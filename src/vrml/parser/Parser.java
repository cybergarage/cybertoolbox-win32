/* Generated By:JavaCC: Do not edit this line. Parser.java */
package vrml.parser;

import java.io.*;
import vrml.*;
import vrml.field.*;
import vrml.node.*;
import vrml.linkedlist.*;
import vrml.route.*;

public class Parser implements ParserType, ParserConstants {

         public static NodeList                  mNodeList               = new NodeList();
         public static LinkedList        mNodeStackList          = new LinkedList();
         public static int                       mIndentLevel    = 0;

         boolean         bvalue;

         public Parser () {
         }

         public static BaseNode getRootNode() {
                 return (BaseNode)mNodeList.getRootNode();
         }

         public static BaseNode getNodes() {
                 return (BaseNode)mNodeList.getNodes();
         }

         public static void addNode(BaseNode node) {
                 BaseNode parentNode = getCurrentNode();
                 if (parentNode == null)
                         mNodeList.addNode(node);
                 else
                         parentNode.addChildNode(node);

                 node.setParentNode(parentNode);
                 node.initialize();
         }

         public static void clearNodes() {
                 mNodeList.deleteNodes();
         }

         ////////////////////////////////////////////////
         //	find node
         ////////////////////////////////////////////////

         public static BaseNode findNodeByType(String typeName) {
                 BaseNode rootNode = getRootNode();
                 return rootNode.nextTraversalByType(typeName);
         }

         public static BaseNode findNodeByName(String name) {
                 BaseNode rootNode = getRootNode();
                 return rootNode.nextTraversalByName(name);
         }

         ///////////////////////////////////////////////
         //	Praser action
         ///////////////////////////////////////////////

         public static void PushNode(BaseNode node, int type)
         {
                 ParserNodeStack parserNode = new ParserNodeStack(node, type);
                 mNodeStackList.addNode(parserNode);
         }

         public static BaseNode PopNode()
         {
                 ParserNodeStack lastNode = (ParserNodeStack)mNodeStackList.getLastNode();
                 lastNode.remove();
                 return lastNode.getObject();
         }

         public static BaseNode getCurrentNode() {
                 ParserNodeStack lastNode = (ParserNodeStack)mNodeStackList.getLastNode();
                 if (lastNode == null)
                         return null;
                 else
                         return lastNode.getObject();
         }

         public static int getCurrentType() {
                 ParserNodeStack lastNode = (ParserNodeStack)mNodeStackList.getLastNode();
                 if (lastNode == null)
                         return 0;
                 else
                         return lastNode.getType();
         }

         ///////////////////////////////////////////////
         //	DEF
         ///////////////////////////////////////////////

         public static String mDefName = null;

         public static void setDefName(String name) {
                 mDefName = name;
         }

         public static String getDefName() {
                 String defName = mDefName;
                 mDefName = null;
                 return defName;
         }

         ///////////////////////////////////////////////
         //	ROUTE
         ///////////////////////////////////////////////

         public static LinkedList        mRouteList              = new LinkedList();

         public static Route getRoutes() {
                 return (Route)mRouteList.getNodes();
         }

         public static Route getRoute(BaseNode eventOutNode, Field eventOutField, BaseNode eventInNode, Field eventInField)
         {
                 for (Route route=getRoutes(); route!=null; route=route.next()) {
                         if (eventOutNode == route.getEventOutNode() && eventOutField == route.getEventOutField() &&
                                 eventInNode == route.getEventInNode() && eventInField == route.getEventInField() ) {
                                 return route;
                         }
                 }
                 return null;
         }

         public static void addRoute(Route route) {
                 if (route.getEventOutNode() == route.getEventInNode())
                         return;
                 if (getRoute(route.getEventOutNode(), route.getEventOutField(), route.getEventInNode(), route.getEventInField()) != null)
                         return;
                 mRouteList.addNode(route);
         }

         public static void addRoute(String eventOutNodeName, String eventOutFieldName, String eventInNodeName, String eventInFieldName)
         {
                 BaseNode eventInNode = findNodeByName(eventInNodeName);
                 BaseNode eventOutNode = findNodeByName(eventOutNodeName);

                 Field eventOutField = null;

                 if (eventOutNode != null) {
                         if (eventOutNode.isScript())
                                 eventOutField = ((Script)eventOutNode).getEventOut(eventOutFieldName);
                         else
                                 eventOutField = ((Node)eventOutNode).getEventOut(eventOutFieldName);
                         if (eventOutField == null)
                                 eventOutField = eventOutNode.getExposedField(eventOutFieldName);
                 }

                 Field eventInField = null;

                 if (eventInNode != null) {
                         eventInField = eventInNode.getEventIn(eventInFieldName);
                         if (eventInField == null)
                                 eventInField = eventInNode.getExposedField(eventInFieldName);
                 }

                 Route route = new Route(eventOutNode, eventOutField, eventInNode, eventInField);
                 addRoute(route);
         }

         public static void deleteRoute(BaseNode eventOutNode, Field eventOutField, BaseNode eventInNode, Field eventInField)
         {
                 Route route = getRoute(eventOutNode, eventOutField, eventInNode, eventInField);
                 if (route!=null)
                         route.remove();
         }

         public static void deleteRoute(Route deleteRoute)
         {
                 for (Route route=getRoutes(); route!=null; route=route.next()) {
                         if (deleteRoute == route) {
                                 route.remove();
                                 return;
                         }
                 }
         }

         ///////////////////////////////////////////////
         //	Praser action
         ///////////////////////////////////////////////

         public static void addSFInt32(int value) {
                 BaseNode        node = getCurrentNode();
                 int                     type = getCurrentType();
                 switch (type) {
                         case parserTypeIdxFaceSetCoordIndex     :
                                 {
                                         IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                                         idxFaceset.addCoordIndex(value);
                                 }
                                 break;
                         case parserTypeIdxFaceSetTexCoordIndex          :
                                 {
                                         IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                                         idxFaceset.addTexCoordIndex(value);
                                 }
                                 break;
                         case parserTypeIdxFaceSetNormalIndex    :
                                 {
                                         IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                                         idxFaceset.addNormalIndex(value);
                                 }
                                 break;
                         case parserTypeIdxFaceSetColorIndex     :
                                 {
                                         IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                                         idxFaceset.addColorIndex(value);
                                 }
                                 break;
                         case parserTypeIdxLineSetCoordIndex     :
                                 {
                                         IndexedLineSet idxLineset = (IndexedLineSet)getCurrentNode();
                                         idxLineset.addCoordIndex(value);
                                 }
                                 break;
                         case parserTypeIdxLineSetColorIndex     :
                                 {
                                         IndexedLineSet idxLineset = (IndexedLineSet)getCurrentNode();
                                         idxLineset.addColorIndex(value);
                                 }
                                 break;
                         case parserTypePixelTextureImage        :
                                 {
                                         ((PixelTexture)getCurrentNode()).addImage(value);
                                 }
                                 break;
                 }
         }

         public static void addSFFloat(float value) {
                 BaseNode        node = getCurrentNode();
                 int                     type = getCurrentType();
                 switch (type) {
                         case parserTypeCoordinateInterpolatorKey :
                                 {
                                         CoordinateInterpolator coord = (CoordinateInterpolator)getCurrentNode();
                                         coord.addKey(value);
                                 }
                                 break;
                         case parserTypePositionInterpolatorKey :
                                 {
                                         PositionInterpolator pos = (PositionInterpolator)getCurrentNode();
                                         pos.addKey(value);
                                 }
                                 break;
                         case parserTypeNormalInterpolatorKey :
                                 {
                                         NormalInterpolator normal = (NormalInterpolator)getCurrentNode();
                                         normal.addKey(value);
                                 }
                                 break;
                         case parserTypeColorInterpolatorKey :
                                 {
                                         ColorInterpolator color = (ColorInterpolator)getCurrentNode();
                                         color.addKey(value);
                                 }
                                 break;
                         case parserTypeScalarInterpolatorKey :
                                 {
                                         ScalarInterpolator scalar = (ScalarInterpolator)getCurrentNode();
                                         scalar.addKey(value);
                                 }
                                 break;
                         case parserTypeScalarInterpolatorKeyValue :
                                 {
                                         ScalarInterpolator scalar = (ScalarInterpolator)getCurrentNode();
                                         scalar.addKeyValue(value);
                                 }
                                 break;
                         case parserTypeOrientationInterpolatorKey :
                                 {
                                         OrientationInterpolator orientation = (OrientationInterpolator)getCurrentNode();
                                         orientation.addKey(value);
                                 }
                                 break;
                         case parserTypeLODRange:
                                 {
                                         ((LOD)getCurrentNode()).addRange(value);
                                 }
                                 break;
                         case parserTypeElevationGridHeight:
                                 {
                                         ((ElevationGrid)getCurrentNode()).addHeight(value);
                                 }
                                 break;
                         case parserTypeTextLength:
                                 {
                                         ((Text)getCurrentNode()).addLength(value);
                                 }
                                 break;
                         case parserTypeBackgroundGroundAngle:
                                 {
                                         ((Background)getCurrentNode()).addGroundAngle(value);
                                 }
                                 break;
                         case parserTypeBackgroundSkyAngle:
                                 {
                                         ((Background)getCurrentNode()).addSkyAngle(value);
                                 }
                                 break;
                         case parserTypeNavigationInfoAvatarSize:
                                 {
                                         ((NavigationInfo)getCurrentNode()).addAvatarSize(value);
                                 }
                                 break;
                 }
         }

         public static void addSFTime(double value) {
         }

         public static void addSFVec2f(float vector[]) {
                 BaseNode        node = getCurrentNode();
                 int                     type = getCurrentType();
                 switch (type) {
                         case parserTypeTextureCoordinate        :
                                 {
                                         TextureCoordinate texCoord = (TextureCoordinate)node;
                                         texCoord.addPoint(vector);
                                 }
                                 break;
                         case parserTypeExtrusionCrossSection    :
                                 {
                                         ((Extrusion)node).addCrossSection(vector);
                                 }
                                 break;
                         case parserTypeExtrusionScale   :
                                 {
                                         ((Extrusion)node).addScale(vector);
                                 }
                                 break;
                 }
         }

         public static void addSFVec3f(float vector[]) {
                 BaseNode        node = getCurrentNode();
                 int                     type = getCurrentType();
                 switch (type) {
                         case parserTypeCoordinate       :
                                 {
                                         Coordinate coord = (Coordinate)node;
                                         coord.addPoint(vector);
                                 }
                                 break;
                         case parserTypeNormal   :
                                 {
                                         Normal normal = (Normal)node;
                                         normal.addVector(vector);
                                 }
                                 break;
                         case parserTypeCoordinateInterpolatorKeyValue :
                                 {
                                         CoordinateInterpolator coord = (CoordinateInterpolator)getCurrentNode();
                                         coord.addKeyValue(vector);
                                 }
                                 break;
                         case parserTypePositionInterpolatorKeyValue :
                                 {
                                         PositionInterpolator pos = (PositionInterpolator)getCurrentNode();
                                         pos.addKeyValue(vector);
                                 }
                                 break;
                         case parserTypeNormalInterpolatorKeyValue :
                                 {
                                         NormalInterpolator normal = (NormalInterpolator)getCurrentNode();
                                         normal.addKeyValue(vector);
                                 }
                                 break;
                         case parserTypeExtrusionSpine :
                                 {
                                         ((Extrusion)node).addSpine(vector);
                                 }
                                 break;
                 }
         }

         public static void addSFColor(float color[]) {
                 BaseNode        node = getCurrentNode();
                 int                     type = getCurrentType();
                 switch (type) {
                         case parserTypeColor:
                                 {
                                         Color col = (Color)node;
                                         col.addColor(color);
                                 }
                                 break;
                         case parserTypeColorInterpolatorKey:
                                 {
                                         ColorInterpolator col = (ColorInterpolator)getCurrentNode();
                                         col.addKeyValue(color);
                                 }
                                 break;
                         case parserTypeBackgroundGroundColor:
                                 {
                                         ((Background)getCurrentNode()).addGroundColor(color);
                                 }
                                 break;
                         case parserTypeBackgroundSkyColor:
                                 {
                                         ((Background)getCurrentNode()).addSkyColor(color);
                                 }
                                 break;
                 }
         }

         public static void addSFRotation(float rotation[]) {
                 BaseNode        node = getCurrentNode();
                 int                     type = getCurrentType();
                 switch (type) {
                         case parserTypeOrientationInterpolatorKeyValue :
                                 {
                                         OrientationInterpolator orientation = (OrientationInterpolator)getCurrentNode();
                                         orientation.addKeyValue(rotation);
                                 }
                                 break;
                         case parserTypeExtrusionOrientation :
                                 {
                                         ((Extrusion)node).addOrientation(rotation);
                                 }
                                 break;
                 }
         }

         public static void addSFString(String string) {
                 BaseNode        node = getCurrentNode();
                 int                     type = getCurrentType();
                 switch (type) {
                         case parserTypeWorldInfoInfo :
                                 {
                                         WorldInfo winfo = (WorldInfo)node;
                                         winfo.addInfo(string);
                                 }
                                 break;
                         case parserTypeScriptUrl:
                                 {
                                         Script script = (Script)node;
                                         script.addUrl(string);
                                 }
                                 break;
                         case parserTypeAnchorUrl:
                                 {
                                         ((Anchor)node).addUrl(string);
                                 }
                                 break;
                         case parserTypeAnchorParameter:
                                 {
                                         ((Anchor)node).addParameter(string);
                                 }
                                 break;
                         case parserTypeInlineUrl:
                                 {
                                         ((Inline)node).addUrl(string);
                                 }
                                 break;
                         case parserTypeAudioClipUrl:
                                 {
                                         ((AudioClip)node).addUrl(string);
                                 }
                                 break;
                         case parserTypeTextString:
                                 {
                                         ((Text)node).addString(string);
                                 }
                                 break;
                         case parserTypeFontStyleJustify:
                                 {
                                         ((FontStyle)node).addJustify(string);
                                 }
                                 break;
                         case parserTypeImageTextureUrl:
                                 {
                                         ((ImageTexture)node).addUrl(string);
                                 }
                                 break;
                         case parserTypeMovieTextureUrl:
                                 {
                                         ((MovieTexture)node).addUrl(string);
                                 }
                                 break;
                         case parserTypeBackgroundBackUrl:
                                 {
                                         ((Background)node).addBackUrl(string);
                                 }
                                 break;
                         case parserTypeBackgroundBottomUrl:
                                 {
                                         ((Background)node).addBottomUrl(string);
                                 }
                                 break;
                         case parserTypeBackgroundFrontUrl:
                                 {
                                         ((Background)node).addFrontUrl(string);
                                 }
                                 break;
                         case parserTypeBackgroundLeftUrl:
                                 {
                                         ((Background)node).addLeftUrl(string);
                                 }
                                 break;
                         case parserTypeBackgroundRightUrl:
                                 {
                                         ((Background)node).addRightUrl(string);
                                 }
                                 break;
                         case parserTypeBackgroundTopUrl:
                                 {
                                         ((Background)node).addTopUrl(string);
                                 }
                                 break;
                         case parserTypeNavigationInfoType:
                                 {
                                         ((NavigationInfo)node).addType(string);
                                 }
                                 break;
                 }
         }

  static final public boolean SFBoolToken() throws ParseError {
    if (jj_mask_1[getToken(1).kind]) {
      jj_consume_token(TRUE);
                         return true;
    } else {
      jj_expLA1[1] = jj_gen;
      if (jj_mask_0[getToken(1).kind]) {
        jj_consume_token(FALSE);
                         return false;
      } else {
        jj_expLA1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_0 = new boolean[227];
  static {
    jj_mask_0[FALSE] = true;
  }
  static boolean[] jj_mask_1 = new boolean[227];
  static {
    jj_mask_1[TRUE] = true;
  }
  
///////////////////////////////////////////////
//	SF/MFFloat
///////////////////////////////////////////////
  static final public float SFFloatToken() throws ParseError {
         Token t;
    if (jj_mask_3[getToken(1).kind]) {
      t = jj_consume_token(NUMBER);
                         Integer ivalue = new Integer(t.image);
                         addSFFloat(ivalue.floatValue());
                         return ivalue.floatValue();
    } else {
      jj_expLA1[3] = jj_gen;
      if (jj_mask_2[getToken(1).kind]) {
        t = jj_consume_token(FLOAT_NUMBER);
                         Float fvalue = new Float(t.image);
                         addSFFloat(fvalue.floatValue());
                         return fvalue.floatValue();
      } else {
        jj_expLA1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_2 = new boolean[227];
  static {
    jj_mask_2[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_3 = new boolean[227];
  static {
    jj_mask_3[NUMBER] = true;
  }
  
  static final public void MFFloatToken() throws ParseError {
    if (jj_mask_7[getToken(1).kind]) {
      jj_consume_token(9);
      label_1:
      while (true) {
        if (jj_mask_5[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[5] = jj_gen;
          break label_1;
        }
        SFFloatToken();
        label_2:
        while (true) {
          if (jj_mask_6[getToken(1).kind]) {
            ;
          } else {
            jj_expLA1[6] = jj_gen;
            break label_2;
          }
          jj_consume_token(10);
          SFFloatToken();
        }
      }
      jj_consume_token(11);
    } else {
      jj_expLA1[7] = jj_gen;
      if (jj_mask_4[getToken(1).kind]) {
        SFFloatToken();
      } else {
        jj_expLA1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_4 = new boolean[227];
  static {
    jj_mask_4[NUMBER] =
    jj_mask_4[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_5 = new boolean[227];
  static {
    jj_mask_5[NUMBER] =
    jj_mask_5[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_6 = new boolean[227];
  static {
    jj_mask_6[10] = true;
  }
  static boolean[] jj_mask_7 = new boolean[227];
  static {
    jj_mask_7[9] = true;
  }
  
///////////////////////////////////////////////
//	SF/MFTime
///////////////////////////////////////////////
  static final public double SFTimeToken() throws ParseError {
         Token t;
    if (jj_mask_9[getToken(1).kind]) {
      t = jj_consume_token(NUMBER);
                         Integer ivalue = new Integer(t.image);
                         addSFTime(ivalue.doubleValue());
                         return ivalue.doubleValue();
    } else {
      jj_expLA1[9] = jj_gen;
      if (jj_mask_8[getToken(1).kind]) {
        t = jj_consume_token(FLOAT_NUMBER);
                         Double dvalue = new Double(t.image);
                         addSFTime(dvalue.doubleValue());
                         return dvalue.doubleValue();
      } else {
        jj_expLA1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_8 = new boolean[227];
  static {
    jj_mask_8[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_9 = new boolean[227];
  static {
    jj_mask_9[NUMBER] = true;
  }
  
  static final public void MFTimeToken() throws ParseError {
    if (jj_mask_13[getToken(1).kind]) {
      jj_consume_token(9);
      label_3:
      while (true) {
        if (jj_mask_11[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[11] = jj_gen;
          break label_3;
        }
        SFTimeToken();
        label_4:
        while (true) {
          if (jj_mask_12[getToken(1).kind]) {
            ;
          } else {
            jj_expLA1[12] = jj_gen;
            break label_4;
          }
          jj_consume_token(10);
          SFTimeToken();
        }
      }
      jj_consume_token(11);
    } else {
      jj_expLA1[13] = jj_gen;
      if (jj_mask_10[getToken(1).kind]) {
        SFTimeToken();
      } else {
        jj_expLA1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_10 = new boolean[227];
  static {
    jj_mask_10[NUMBER] =
    jj_mask_10[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_11 = new boolean[227];
  static {
    jj_mask_11[NUMBER] =
    jj_mask_11[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_12 = new boolean[227];
  static {
    jj_mask_12[10] = true;
  }
  static boolean[] jj_mask_13 = new boolean[227];
  static {
    jj_mask_13[9] = true;
  }
  
///////////////////////////////////////////////
//	SF/MFInt32
///////////////////////////////////////////////
  static final public int SFInt32Token() throws ParseError {
         Token t;
    t = jj_consume_token(NUMBER);
                         Integer ivalue = new Integer(t.image);
                         addSFInt32(ivalue.intValue());
                         return ivalue.intValue();
  }

  static final public void MFInt32Token() throws ParseError {
    if (jj_mask_17[getToken(1).kind]) {
      jj_consume_token(9);
      label_5:
      while (true) {
        if (jj_mask_15[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[15] = jj_gen;
          break label_5;
        }
        SFInt32Token();
        label_6:
        while (true) {
          if (jj_mask_16[getToken(1).kind]) {
            ;
          } else {
            jj_expLA1[16] = jj_gen;
            break label_6;
          }
          jj_consume_token(10);
          SFInt32Token();
        }
      }
      jj_consume_token(11);
    } else {
      jj_expLA1[17] = jj_gen;
      if (jj_mask_14[getToken(1).kind]) {
        SFInt32Token();
      } else {
        jj_expLA1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_14 = new boolean[227];
  static {
    jj_mask_14[NUMBER] = true;
  }
  static boolean[] jj_mask_15 = new boolean[227];
  static {
    jj_mask_15[NUMBER] = true;
  }
  static boolean[] jj_mask_16 = new boolean[227];
  static {
    jj_mask_16[10] = true;
  }
  static boolean[] jj_mask_17 = new boolean[227];
  static {
    jj_mask_17[9] = true;
  }
  
///////////////////////////////////////////////
//	SF/MFVec3f
///////////////////////////////////////////////
  static final public void SFVec2fToken(float value[]) throws ParseError {
         float x, y;
    x = SFFloatToken();
    y = SFFloatToken();
                         value[0] = x;
                         value[1] = y;
                         addSFVec2f(value);
//			System.out.println("MFVec3fToken : " + value[0] + ", "+ value[1] + ", " + value[2] );

  }

  static final public void MFVec2fToken() throws ParseError {
         float value[] = new float[2];
    if (jj_mask_21[getToken(1).kind]) {
      jj_consume_token(9);
      label_7:
      while (true) {
        if (jj_mask_19[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[19] = jj_gen;
          break label_7;
        }
        SFVec2fToken(value);
        label_8:
        while (true) {
          if (jj_mask_20[getToken(1).kind]) {
            ;
          } else {
            jj_expLA1[20] = jj_gen;
            break label_8;
          }
          jj_consume_token(10);
          SFVec2fToken(value);
        }
      }
      jj_consume_token(11);
    } else {
      jj_expLA1[21] = jj_gen;
      if (jj_mask_18[getToken(1).kind]) {
        SFVec2fToken(value);
      } else {
        jj_expLA1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_18 = new boolean[227];
  static {
    jj_mask_18[NUMBER] =
    jj_mask_18[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_19 = new boolean[227];
  static {
    jj_mask_19[NUMBER] =
    jj_mask_19[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_20 = new boolean[227];
  static {
    jj_mask_20[10] = true;
  }
  static boolean[] jj_mask_21 = new boolean[227];
  static {
    jj_mask_21[9] = true;
  }
  
///////////////////////////////////////////////
//	SF/MFVec3f
///////////////////////////////////////////////
  static final public void SFVec3fToken(float value[]) throws ParseError {
         float x, y, z;
    x = SFFloatToken();
    y = SFFloatToken();
    z = SFFloatToken();
                         value[0] = x;
                         value[1] = y;
                         value[2] = z;
                         addSFVec3f(value);
//			System.out.println("MFVec3fToken : " + value[0] + ", "+ value[1] + ", " + value[2] );

  }

  static final public void MFVec3fToken() throws ParseError {
         float value[] = new float[3];
    if (jj_mask_25[getToken(1).kind]) {
      jj_consume_token(9);
      label_9:
      while (true) {
        if (jj_mask_23[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[23] = jj_gen;
          break label_9;
        }
        SFVec3fToken(value);
        label_10:
        while (true) {
          if (jj_mask_24[getToken(1).kind]) {
            ;
          } else {
            jj_expLA1[24] = jj_gen;
            break label_10;
          }
          jj_consume_token(10);
          SFVec3fToken(value);
        }
      }
      jj_consume_token(11);
    } else {
      jj_expLA1[25] = jj_gen;
      if (jj_mask_22[getToken(1).kind]) {
        SFVec3fToken(value);
      } else {
        jj_expLA1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_22 = new boolean[227];
  static {
    jj_mask_22[NUMBER] =
    jj_mask_22[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_23 = new boolean[227];
  static {
    jj_mask_23[NUMBER] =
    jj_mask_23[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_24 = new boolean[227];
  static {
    jj_mask_24[10] = true;
  }
  static boolean[] jj_mask_25 = new boolean[227];
  static {
    jj_mask_25[9] = true;
  }
  
///////////////////////////////////////////////
//	SF/MFRotation
///////////////////////////////////////////////
  static final public void SFRotationToken(float value[]) throws ParseError {
         float x, y, z, w;
    x = SFFloatToken();
    y = SFFloatToken();
    z = SFFloatToken();
    w = SFFloatToken();
                         value[0] = x;
                         value[1] = y;
                         value[2] = z;
                         value[3] = w;
                         addSFRotation(value);
  }

  static final public void MFRotationToken() throws ParseError {
         float value[] = new float[4];
    if (jj_mask_29[getToken(1).kind]) {
      jj_consume_token(9);
      label_11:
      while (true) {
        if (jj_mask_27[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[27] = jj_gen;
          break label_11;
        }
        SFRotationToken(value);
        label_12:
        while (true) {
          if (jj_mask_28[getToken(1).kind]) {
            ;
          } else {
            jj_expLA1[28] = jj_gen;
            break label_12;
          }
          jj_consume_token(10);
          SFRotationToken(value);
        }
      }
      jj_consume_token(11);
    } else {
      jj_expLA1[29] = jj_gen;
      if (jj_mask_26[getToken(1).kind]) {
        SFRotationToken(value);
      } else {
        jj_expLA1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_26 = new boolean[227];
  static {
    jj_mask_26[NUMBER] =
    jj_mask_26[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_27 = new boolean[227];
  static {
    jj_mask_27[NUMBER] =
    jj_mask_27[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_28 = new boolean[227];
  static {
    jj_mask_28[10] = true;
  }
  static boolean[] jj_mask_29 = new boolean[227];
  static {
    jj_mask_29[9] = true;
  }
  
///////////////////////////////////////////////
//	SF/MFColor
///////////////////////////////////////////////
  static final public void SFColorToken(float color[]) throws ParseError {
         float x, y, z;
    x = SFFloatToken();
    y = SFFloatToken();
    z = SFFloatToken();
                         color[0] = x;
                         color[1] = y;
                         color[2] = z;
                         addSFColor(color);
//			System.out.println("MFVec3fToken : " + value[0] + ", "+ value[1] + ", " + value[2] );

  }

  static final public void MFColorToken() throws ParseError {
         float color[] = new float[3];
    if (jj_mask_33[getToken(1).kind]) {
      jj_consume_token(9);
      label_13:
      while (true) {
        if (jj_mask_31[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[31] = jj_gen;
          break label_13;
        }
        SFColorToken(color);
        label_14:
        while (true) {
          if (jj_mask_32[getToken(1).kind]) {
            ;
          } else {
            jj_expLA1[32] = jj_gen;
            break label_14;
          }
          jj_consume_token(10);
          SFColorToken(color);
        }
      }
      jj_consume_token(11);
    } else {
      jj_expLA1[33] = jj_gen;
      if (jj_mask_30[getToken(1).kind]) {
        SFColorToken(color);
      } else {
        jj_expLA1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_30 = new boolean[227];
  static {
    jj_mask_30[NUMBER] =
    jj_mask_30[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_31 = new boolean[227];
  static {
    jj_mask_31[NUMBER] =
    jj_mask_31[FLOAT_NUMBER] = true;
  }
  static boolean[] jj_mask_32 = new boolean[227];
  static {
    jj_mask_32[10] = true;
  }
  static boolean[] jj_mask_33 = new boolean[227];
  static {
    jj_mask_33[9] = true;
  }
  
///////////////////////////////////////////////
//	SF/MFString
///////////////////////////////////////////////
  static final public String SFStringToken() throws ParseError {
         String          value;
         Token   t;
    t = jj_consume_token(STRING);
                         value = t.image.substring(1, t.image.length()-1);
                         addSFString(value);
                         return value;
  }

  static final public void MFStringToken() throws ParseError {
    if (jj_mask_37[getToken(1).kind]) {
      jj_consume_token(9);
      label_15:
      while (true) {
        if (jj_mask_35[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[35] = jj_gen;
          break label_15;
        }
        SFStringToken();
        label_16:
        while (true) {
          if (jj_mask_36[getToken(1).kind]) {
            ;
          } else {
            jj_expLA1[36] = jj_gen;
            break label_16;
          }
          jj_consume_token(10);
          SFStringToken();
        }
      }
      jj_consume_token(11);
    } else {
      jj_expLA1[37] = jj_gen;
      if (jj_mask_34[getToken(1).kind]) {
        SFStringToken();
      } else {
        jj_expLA1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_34 = new boolean[227];
  static {
    jj_mask_34[STRING] = true;
  }
  static boolean[] jj_mask_35 = new boolean[227];
  static {
    jj_mask_35[STRING] = true;
  }
  static boolean[] jj_mask_36 = new boolean[227];
  static {
    jj_mask_36[10] = true;
  }
  static boolean[] jj_mask_37 = new boolean[227];
  static {
    jj_mask_37[9] = true;
  }
  
///////////////////////////////////////////////
//	SFImage
///////////////////////////////////////////////
  static final public void SFImageToken() throws ParseError {
    jj_consume_token(9);
    label_17:
    while (true) {
      if (jj_mask_38[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[38] = jj_gen;
        break label_17;
      }
      SFInt32Token();
    }
    jj_consume_token(11);
  }

  static boolean[] jj_mask_38 = new boolean[227];
  static {
    jj_mask_38[NUMBER] = true;
  }
  
  static final public String Def() throws ParseError {
         Token t;
    jj_consume_token(DEF);
    t = jj_consume_token(ID);
                         setDefName(t.image);
                         return t.image;
  }

  static final public void Route() throws ParseError {
         Token eventOutNode;
         Token eventOutField;
         Token eventInNode;
         Token eventInField;
    jj_consume_token(ROUTE);
    eventOutNode = jj_consume_token(ID);
    jj_consume_token(16);
    eventOutField = jj_consume_token(ID);
    jj_consume_token(TO);
    eventInNode = jj_consume_token(ID);
    jj_consume_token(16);
    eventInField = jj_consume_token(ID);
                         addRoute(eventOutNode.image, eventOutField.image, eventInNode.image, eventInField.image);
  }

///////////////////////////////////////////////
//
//	Nodes
//
///////////////////////////////////////////////
  static final public void Node() throws ParseError {
    label_18:
    while (true) {
      if (jj_mask_39[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[39] = jj_gen;
        break label_18;
      }
      Def();
    }
    SFNode();
  }

  static boolean[] jj_mask_39 = new boolean[227];
  static {
    jj_mask_39[DEF] = true;
  }
  
  static final public void SFNode() throws ParseError {
    if (jj_mask_47[getToken(1).kind]) {
      GroupingNode();
    } else {
      jj_expLA1[47] = jj_gen;
      if (jj_mask_46[getToken(1).kind]) {
        LightNode();
      } else {
        jj_expLA1[46] = jj_gen;
        if (jj_mask_45[getToken(1).kind]) {
          TimeSensor();
        } else {
          jj_expLA1[45] = jj_gen;
          if (jj_mask_44[getToken(1).kind]) {
            InterpolatorNode();
          } else {
            jj_expLA1[44] = jj_gen;
            if (jj_mask_43[getToken(1).kind]) {
              SensorNode();
            } else {
              jj_expLA1[43] = jj_gen;
              if (jj_mask_42[getToken(1).kind]) {
                Script();
              } else {
                jj_expLA1[42] = jj_gen;
                if (jj_mask_41[getToken(1).kind]) {
                  CommonNode();
                } else {
                  jj_expLA1[41] = jj_gen;
                  if (jj_mask_40[getToken(1).kind]) {
                    BindableNode();
                  } else {
                    jj_expLA1[40] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseError();
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_40 = new boolean[227];
  static {
    jj_mask_40[Background] =
    jj_mask_40[Fog] =
    jj_mask_40[NavigationInfo] =
    jj_mask_40[Viewpoint] =
    jj_mask_40[WorldInfo] = true;
  }
  static boolean[] jj_mask_41 = new boolean[227];
  static {
    jj_mask_41[AudioClip] =
    jj_mask_41[Sound] = true;
  }
  static boolean[] jj_mask_42 = new boolean[227];
  static {
    jj_mask_42[Script] = true;
  }
  static boolean[] jj_mask_43 = new boolean[227];
  static {
    jj_mask_43[CylinderSensor] =
    jj_mask_43[PlaneSensor] =
    jj_mask_43[ProximitySensor] =
    jj_mask_43[SphereSensor] =
    jj_mask_43[TouchSensor] =
    jj_mask_43[VisibilitySensor] = true;
  }
  static boolean[] jj_mask_44 = new boolean[227];
  static {
    jj_mask_44[ColorInterpolator] =
    jj_mask_44[CoordinateInterpolator] =
    jj_mask_44[NormalInterpolator] =
    jj_mask_44[OrientationInterpolator] =
    jj_mask_44[PositionInterpolator] =
    jj_mask_44[ScalarInterpolator] = true;
  }
  static boolean[] jj_mask_45 = new boolean[227];
  static {
    jj_mask_45[TimeSensor] = true;
  }
  static boolean[] jj_mask_46 = new boolean[227];
  static {
    jj_mask_46[DirectionalLight] =
    jj_mask_46[PointLight] =
    jj_mask_46[SpotLight] = true;
  }
  static boolean[] jj_mask_47 = new boolean[227];
  static {
    jj_mask_47[Anchor] =
    jj_mask_47[Billboard] =
    jj_mask_47[Collision] =
    jj_mask_47[Group] =
    jj_mask_47[Inline] =
    jj_mask_47[LOD] =
    jj_mask_47[Switch] =
    jj_mask_47[Transform] = true;
  }
  
  static final public void SensorNode() throws ParseError {
    if (jj_mask_53[getToken(1).kind]) {
      CylinderSensor();
    } else {
      jj_expLA1[53] = jj_gen;
      if (jj_mask_52[getToken(1).kind]) {
        PlaneSensor();
      } else {
        jj_expLA1[52] = jj_gen;
        if (jj_mask_51[getToken(1).kind]) {
          ProximitySensor();
        } else {
          jj_expLA1[51] = jj_gen;
          if (jj_mask_50[getToken(1).kind]) {
            SphereSensor();
          } else {
            jj_expLA1[50] = jj_gen;
            if (jj_mask_49[getToken(1).kind]) {
              TouchSensor();
            } else {
              jj_expLA1[49] = jj_gen;
              if (jj_mask_48[getToken(1).kind]) {
                VisibilitySensor();
              } else {
                jj_expLA1[48] = jj_gen;
                jj_consume_token(-1);
                throw new ParseError();
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_48 = new boolean[227];
  static {
    jj_mask_48[VisibilitySensor] = true;
  }
  static boolean[] jj_mask_49 = new boolean[227];
  static {
    jj_mask_49[TouchSensor] = true;
  }
  static boolean[] jj_mask_50 = new boolean[227];
  static {
    jj_mask_50[SphereSensor] = true;
  }
  static boolean[] jj_mask_51 = new boolean[227];
  static {
    jj_mask_51[ProximitySensor] = true;
  }
  static boolean[] jj_mask_52 = new boolean[227];
  static {
    jj_mask_52[PlaneSensor] = true;
  }
  static boolean[] jj_mask_53 = new boolean[227];
  static {
    jj_mask_53[CylinderSensor] = true;
  }
  
  static final public void InterpolatorNode() throws ParseError {
    if (jj_mask_59[getToken(1).kind]) {
      CoordinateInterpolator();
    } else {
      jj_expLA1[59] = jj_gen;
      if (jj_mask_58[getToken(1).kind]) {
        ScalarInterpolator();
      } else {
        jj_expLA1[58] = jj_gen;
        if (jj_mask_57[getToken(1).kind]) {
          PositionInterpolator();
        } else {
          jj_expLA1[57] = jj_gen;
          if (jj_mask_56[getToken(1).kind]) {
            OrientationInterpolator();
          } else {
            jj_expLA1[56] = jj_gen;
            if (jj_mask_55[getToken(1).kind]) {
              NormalInterpolator();
            } else {
              jj_expLA1[55] = jj_gen;
              if (jj_mask_54[getToken(1).kind]) {
                ColorInterpolator();
              } else {
                jj_expLA1[54] = jj_gen;
                jj_consume_token(-1);
                throw new ParseError();
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_54 = new boolean[227];
  static {
    jj_mask_54[ColorInterpolator] = true;
  }
  static boolean[] jj_mask_55 = new boolean[227];
  static {
    jj_mask_55[NormalInterpolator] = true;
  }
  static boolean[] jj_mask_56 = new boolean[227];
  static {
    jj_mask_56[OrientationInterpolator] = true;
  }
  static boolean[] jj_mask_57 = new boolean[227];
  static {
    jj_mask_57[PositionInterpolator] = true;
  }
  static boolean[] jj_mask_58 = new boolean[227];
  static {
    jj_mask_58[ScalarInterpolator] = true;
  }
  static boolean[] jj_mask_59 = new boolean[227];
  static {
    jj_mask_59[CoordinateInterpolator] = true;
  }
  
  static final public void LightNode() throws ParseError {
    if (jj_mask_62[getToken(1).kind]) {
      DirectionalLight();
    } else {
      jj_expLA1[62] = jj_gen;
      if (jj_mask_61[getToken(1).kind]) {
        PointLight();
      } else {
        jj_expLA1[61] = jj_gen;
        if (jj_mask_60[getToken(1).kind]) {
          SpotLight();
        } else {
          jj_expLA1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_60 = new boolean[227];
  static {
    jj_mask_60[SpotLight] = true;
  }
  static boolean[] jj_mask_61 = new boolean[227];
  static {
    jj_mask_61[PointLight] = true;
  }
  static boolean[] jj_mask_62 = new boolean[227];
  static {
    jj_mask_62[DirectionalLight] = true;
  }
  
  static final public void GroupingNode() throws ParseError {
    if (jj_mask_70[getToken(1).kind]) {
      Anchor();
    } else {
      jj_expLA1[70] = jj_gen;
      if (jj_mask_69[getToken(1).kind]) {
        Billboard();
      } else {
        jj_expLA1[69] = jj_gen;
        if (jj_mask_68[getToken(1).kind]) {
          Collision();
        } else {
          jj_expLA1[68] = jj_gen;
          if (jj_mask_67[getToken(1).kind]) {
            Inline();
          } else {
            jj_expLA1[67] = jj_gen;
            if (jj_mask_66[getToken(1).kind]) {
              LOD();
            } else {
              jj_expLA1[66] = jj_gen;
              if (jj_mask_65[getToken(1).kind]) {
                Switch();
              } else {
                jj_expLA1[65] = jj_gen;
                if (jj_mask_64[getToken(1).kind]) {
                  Transform();
                } else {
                  jj_expLA1[64] = jj_gen;
                  if (jj_mask_63[getToken(1).kind]) {
                    Group();
                  } else {
                    jj_expLA1[63] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseError();
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_63 = new boolean[227];
  static {
    jj_mask_63[Group] = true;
  }
  static boolean[] jj_mask_64 = new boolean[227];
  static {
    jj_mask_64[Transform] = true;
  }
  static boolean[] jj_mask_65 = new boolean[227];
  static {
    jj_mask_65[Switch] = true;
  }
  static boolean[] jj_mask_66 = new boolean[227];
  static {
    jj_mask_66[LOD] = true;
  }
  static boolean[] jj_mask_67 = new boolean[227];
  static {
    jj_mask_67[Inline] = true;
  }
  static boolean[] jj_mask_68 = new boolean[227];
  static {
    jj_mask_68[Collision] = true;
  }
  static boolean[] jj_mask_69 = new boolean[227];
  static {
    jj_mask_69[Billboard] = true;
  }
  static boolean[] jj_mask_70 = new boolean[227];
  static {
    jj_mask_70[Anchor] = true;
  }
  
  static final public void CommonNode() throws ParseError {
    if (jj_mask_72[getToken(1).kind]) {
      AudioClip();
    } else {
      jj_expLA1[72] = jj_gen;
      if (jj_mask_71[getToken(1).kind]) {
        Sound();
      } else {
        jj_expLA1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_71 = new boolean[227];
  static {
    jj_mask_71[Sound] = true;
  }
  static boolean[] jj_mask_72 = new boolean[227];
  static {
    jj_mask_72[AudioClip] = true;
  }
  
  static final public void GeometryNode() throws ParseError {
    if (jj_mask_82[getToken(1).kind]) {
      IndexedFaceSet();
    } else {
      jj_expLA1[82] = jj_gen;
      if (jj_mask_81[getToken(1).kind]) {
        IndexedLineSet();
      } else {
        jj_expLA1[81] = jj_gen;
        if (jj_mask_80[getToken(1).kind]) {
          Box();
        } else {
          jj_expLA1[80] = jj_gen;
          if (jj_mask_79[getToken(1).kind]) {
            Cone();
          } else {
            jj_expLA1[79] = jj_gen;
            if (jj_mask_78[getToken(1).kind]) {
              Extrusion();
            } else {
              jj_expLA1[78] = jj_gen;
              if (jj_mask_77[getToken(1).kind]) {
                PointSet();
              } else {
                jj_expLA1[77] = jj_gen;
                if (jj_mask_76[getToken(1).kind]) {
                  Sphere();
                } else {
                  jj_expLA1[76] = jj_gen;
                  if (jj_mask_75[getToken(1).kind]) {
                    Cylinder();
                  } else {
                    jj_expLA1[75] = jj_gen;
                    if (jj_mask_74[getToken(1).kind]) {
                      ElevationGrid();
                    } else {
                      jj_expLA1[74] = jj_gen;
                      if (jj_mask_73[getToken(1).kind]) {
                        Text();
                      } else {
                        jj_expLA1[73] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseError();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_73 = new boolean[227];
  static {
    jj_mask_73[Text] = true;
  }
  static boolean[] jj_mask_74 = new boolean[227];
  static {
    jj_mask_74[ElevationGrid] = true;
  }
  static boolean[] jj_mask_75 = new boolean[227];
  static {
    jj_mask_75[Cylinder] = true;
  }
  static boolean[] jj_mask_76 = new boolean[227];
  static {
    jj_mask_76[Sphere] = true;
  }
  static boolean[] jj_mask_77 = new boolean[227];
  static {
    jj_mask_77[PointSet] = true;
  }
  static boolean[] jj_mask_78 = new boolean[227];
  static {
    jj_mask_78[Extrusion] = true;
  }
  static boolean[] jj_mask_79 = new boolean[227];
  static {
    jj_mask_79[Cone] = true;
  }
  static boolean[] jj_mask_80 = new boolean[227];
  static {
    jj_mask_80[Box] = true;
  }
  static boolean[] jj_mask_81 = new boolean[227];
  static {
    jj_mask_81[IndexedLineSet] = true;
  }
  static boolean[] jj_mask_82 = new boolean[227];
  static {
    jj_mask_82[IndexedFaceSet] = true;
  }
  
  static final public void BindableNode() throws ParseError {
    if (jj_mask_87[getToken(1).kind]) {
      Background();
    } else {
      jj_expLA1[87] = jj_gen;
      if (jj_mask_86[getToken(1).kind]) {
        Viewpoint();
      } else {
        jj_expLA1[86] = jj_gen;
        if (jj_mask_85[getToken(1).kind]) {
          Fog();
        } else {
          jj_expLA1[85] = jj_gen;
          if (jj_mask_84[getToken(1).kind]) {
            NavigationInfo();
          } else {
            jj_expLA1[84] = jj_gen;
            if (jj_mask_83[getToken(1).kind]) {
              WorldInfo();
            } else {
              jj_expLA1[83] = jj_gen;
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_83 = new boolean[227];
  static {
    jj_mask_83[WorldInfo] = true;
  }
  static boolean[] jj_mask_84 = new boolean[227];
  static {
    jj_mask_84[NavigationInfo] = true;
  }
  static boolean[] jj_mask_85 = new boolean[227];
  static {
    jj_mask_85[Fog] = true;
  }
  static boolean[] jj_mask_86 = new boolean[227];
  static {
    jj_mask_86[Viewpoint] = true;
  }
  static boolean[] jj_mask_87 = new boolean[227];
  static {
    jj_mask_87[Background] = true;
  }
  
/*
*	children
*/
  static final public void ChildrenElement() throws ParseError {
    if (jj_mask_89[getToken(1).kind]) {
      SFNode();
    } else {
      jj_expLA1[89] = jj_gen;
      if (jj_mask_88[getToken(1).kind]) {
        Shape();
      } else {
        jj_expLA1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_88 = new boolean[227];
  static {
    jj_mask_88[Shape] = true;
  }
  static boolean[] jj_mask_89 = new boolean[227];
  static {
    jj_mask_89[Anchor] =
    jj_mask_89[AudioClip] =
    jj_mask_89[Background] =
    jj_mask_89[Billboard] =
    jj_mask_89[Collision] =
    jj_mask_89[ColorInterpolator] =
    jj_mask_89[CoordinateInterpolator] =
    jj_mask_89[CylinderSensor] =
    jj_mask_89[DirectionalLight] =
    jj_mask_89[Fog] =
    jj_mask_89[Group] =
    jj_mask_89[Inline] =
    jj_mask_89[LOD] =
    jj_mask_89[NavigationInfo] =
    jj_mask_89[NormalInterpolator] =
    jj_mask_89[OrientationInterpolator] =
    jj_mask_89[PlaneSensor] =
    jj_mask_89[PointLight] =
    jj_mask_89[PositionInterpolator] =
    jj_mask_89[ProximitySensor] =
    jj_mask_89[ScalarInterpolator] =
    jj_mask_89[Script] =
    jj_mask_89[Sound] =
    jj_mask_89[SphereSensor] =
    jj_mask_89[SpotLight] =
    jj_mask_89[Switch] =
    jj_mask_89[TimeSensor] =
    jj_mask_89[TouchSensor] =
    jj_mask_89[Transform] =
    jj_mask_89[Viewpoint] =
    jj_mask_89[VisibilitySensor] =
    jj_mask_89[WorldInfo] = true;
  }
  
  static final public void Children() throws ParseError {
    jj_consume_token(children);
    label_19:
    while (true) {
      if (jj_mask_90[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[90] = jj_gen;
        break label_19;
      }
      jj_consume_token(9);
    }
    label_20:
    while (true) {
      if (jj_mask_91[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[91] = jj_gen;
        break label_20;
      }
      label_21:
      while (true) {
        if (jj_mask_92[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[92] = jj_gen;
          break label_21;
        }
        Def();
      }
      ChildrenElement();
    }
    label_22:
    while (true) {
      if (jj_mask_93[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[93] = jj_gen;
        break label_22;
      }
      jj_consume_token(11);
    }
  }

  static boolean[] jj_mask_90 = new boolean[227];
  static {
    jj_mask_90[9] = true;
  }
  static boolean[] jj_mask_91 = new boolean[227];
  static {
    jj_mask_91[DEF] =
    jj_mask_91[Anchor] =
    jj_mask_91[AudioClip] =
    jj_mask_91[Background] =
    jj_mask_91[Billboard] =
    jj_mask_91[Collision] =
    jj_mask_91[ColorInterpolator] =
    jj_mask_91[CoordinateInterpolator] =
    jj_mask_91[CylinderSensor] =
    jj_mask_91[DirectionalLight] =
    jj_mask_91[Fog] =
    jj_mask_91[Group] =
    jj_mask_91[Inline] =
    jj_mask_91[LOD] =
    jj_mask_91[NavigationInfo] =
    jj_mask_91[NormalInterpolator] =
    jj_mask_91[OrientationInterpolator] =
    jj_mask_91[PlaneSensor] =
    jj_mask_91[PointLight] =
    jj_mask_91[PositionInterpolator] =
    jj_mask_91[ProximitySensor] =
    jj_mask_91[ScalarInterpolator] =
    jj_mask_91[Script] =
    jj_mask_91[Sound] =
    jj_mask_91[SphereSensor] =
    jj_mask_91[SpotLight] =
    jj_mask_91[Shape] =
    jj_mask_91[Switch] =
    jj_mask_91[TimeSensor] =
    jj_mask_91[TouchSensor] =
    jj_mask_91[Transform] =
    jj_mask_91[Viewpoint] =
    jj_mask_91[VisibilitySensor] =
    jj_mask_91[WorldInfo] = true;
  }
  static boolean[] jj_mask_92 = new boolean[227];
  static {
    jj_mask_92[DEF] = true;
  }
  static boolean[] jj_mask_93 = new boolean[227];
  static {
    jj_mask_93[11] = true;
  }
  
  static final public void AnchorUrlID() throws ParseError {
    jj_consume_token(url);
                         PushNode(getCurrentNode(), parserTypeAnchorUrl);
  }

  static final public void AnchorParameterID() throws ParseError {
    jj_consume_token(parameter);
                         PushNode(getCurrentNode(), parserTypeAnchorParameter);
  }

  static final public void AnchorElement() throws ParseError {
         float   vec[] = new float[3];
         String          value;
    if (jj_mask_99[getToken(1).kind]) {
      AnchorUrlID();
      MFStringToken();
                         PopNode();
    } else {
      jj_expLA1[99] = jj_gen;
      if (jj_mask_98[getToken(1).kind]) {
        AnchorParameterID();
        MFStringToken();
                         PopNode();
      } else {
        jj_expLA1[98] = jj_gen;
        if (jj_mask_97[getToken(1).kind]) {
          jj_consume_token(description);
          value = SFStringToken();
                         ((Anchor)getCurrentNode()).setDescription(value);
        } else {
          jj_expLA1[97] = jj_gen;
          if (jj_mask_96[getToken(1).kind]) {
            jj_consume_token(bboxCenter);
            SFVec3fToken(vec);
                         ((Anchor)getCurrentNode()).setBBoxCenter(vec);
          } else {
            jj_expLA1[96] = jj_gen;
            if (jj_mask_95[getToken(1).kind]) {
              jj_consume_token(bboxSize);
              SFVec3fToken(vec);
                         ((Anchor)getCurrentNode()).setBBoxSize(vec);
            } else {
              jj_expLA1[95] = jj_gen;
              if (jj_mask_94[getToken(1).kind]) {
                Children();
              } else {
                jj_expLA1[94] = jj_gen;
                jj_consume_token(-1);
                throw new ParseError();
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_94 = new boolean[227];
  static {
    jj_mask_94[children] = true;
  }
  static boolean[] jj_mask_95 = new boolean[227];
  static {
    jj_mask_95[bboxSize] = true;
  }
  static boolean[] jj_mask_96 = new boolean[227];
  static {
    jj_mask_96[bboxCenter] = true;
  }
  static boolean[] jj_mask_97 = new boolean[227];
  static {
    jj_mask_97[description] = true;
  }
  static boolean[] jj_mask_98 = new boolean[227];
  static {
    jj_mask_98[parameter] = true;
  }
  static boolean[] jj_mask_99 = new boolean[227];
  static {
    jj_mask_99[url] = true;
  }
  
  static final public void AnchorID() throws ParseError {
    jj_consume_token(Anchor);
                         Anchor anchor = new Anchor();
                         anchor.setName(getDefName());
                         PushNode(anchor, parserTypeAnchor);
  }

  static final public void Anchor() throws ParseError {
    AnchorID();
    jj_consume_token(23);
    label_23:
    while (true) {
      if (jj_mask_100[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[100] = jj_gen;
        break label_23;
      }
      AnchorElement();
    }
    jj_consume_token(24);
                         Anchor anchor = (Anchor)getCurrentNode();
                         PopNode();
                         addNode(anchor);
  }

  static boolean[] jj_mask_100 = new boolean[227];
  static {
    jj_mask_100[children] =
    jj_mask_100[url] =
    jj_mask_100[parameter] =
    jj_mask_100[description] =
    jj_mask_100[bboxCenter] =
    jj_mask_100[bboxSize] = true;
  }
  
  static final public void AppearanceElement() throws ParseError {
    if (jj_mask_102[getToken(1).kind]) {
      jj_consume_token(material);
      Material();
    } else {
      jj_expLA1[102] = jj_gen;
      if (jj_mask_101[getToken(1).kind]) {
        jj_consume_token(textureTransform);
        TextureTransform();
      } else {
        jj_expLA1[101] = jj_gen;
        if (jj_2_3(2)) {
          jj_consume_token(texture);
          ImageTexture();
        } else {
          if (jj_2_2(2)) {
            jj_consume_token(texture);
            MovieTexture();
          } else {
            if (jj_2_1(2)) {
              jj_consume_token(texture);
              PixelTexture();
            } else {
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_101 = new boolean[227];
  static {
    jj_mask_101[textureTransform] = true;
  }
  static boolean[] jj_mask_102 = new boolean[227];
  static {
    jj_mask_102[material] = true;
  }
  
  static final public void AppearanceID() throws ParseError {
    jj_consume_token(Appearance);
                         Appearance apper = new Appearance();
                         apper.setName(getDefName());
                         PushNode(apper, parserTypeAppearance);
  }

  static final public void Appearance() throws ParseError {
    AppearanceID();
    jj_consume_token(23);
    label_24:
    while (true) {
      if (jj_mask_103[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[103] = jj_gen;
        break label_24;
      }
      AppearanceElement();
    }
    jj_consume_token(24);
                         Appearance apper = (Appearance)getCurrentNode();
                         PopNode();
                         addNode(apper);
  }

  static boolean[] jj_mask_103 = new boolean[227];
  static {
    jj_mask_103[material] =
    jj_mask_103[textureTransform] =
    jj_mask_103[texture] = true;
  }
  
  static final public void AudioClipUrlID() throws ParseError {
    jj_consume_token(url);
                         PushNode(getCurrentNode(), parserTypeAudioClipUrl);
  }

  static final public void AudioClipElement() throws ParseError {
         String          svalue;
         boolean         bvalue;
         float   fvalue;
         double          dvalue;
    if (jj_mask_109[getToken(1).kind]) {
      AudioClipUrlID();
      MFStringToken();
                         PopNode();
    } else {
      jj_expLA1[109] = jj_gen;
      if (jj_mask_108[getToken(1).kind]) {
        jj_consume_token(description);
        svalue = SFStringToken();
                         ((AudioClip)getCurrentNode()).setDescription(svalue);
      } else {
        jj_expLA1[108] = jj_gen;
        if (jj_mask_107[getToken(1).kind]) {
          jj_consume_token(loop);
          bvalue = SFBoolToken();
                         ((AudioClip)getCurrentNode()).setLoop(bvalue);
        } else {
          jj_expLA1[107] = jj_gen;
          if (jj_mask_106[getToken(1).kind]) {
            jj_consume_token(pitch);
            fvalue = SFFloatToken();
                         ((AudioClip)getCurrentNode()).setPitch(fvalue);
          } else {
            jj_expLA1[106] = jj_gen;
            if (jj_mask_105[getToken(1).kind]) {
              jj_consume_token(startTime);
              dvalue = SFTimeToken();
                         ((AudioClip)getCurrentNode()).setStartTime(dvalue);
            } else {
              jj_expLA1[105] = jj_gen;
              if (jj_mask_104[getToken(1).kind]) {
                jj_consume_token(stopTime);
                dvalue = SFTimeToken();
                         ((AudioClip)getCurrentNode()).setStopTime(dvalue);
              } else {
                jj_expLA1[104] = jj_gen;
                jj_consume_token(-1);
                throw new ParseError();
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_104 = new boolean[227];
  static {
    jj_mask_104[stopTime] = true;
  }
  static boolean[] jj_mask_105 = new boolean[227];
  static {
    jj_mask_105[startTime] = true;
  }
  static boolean[] jj_mask_106 = new boolean[227];
  static {
    jj_mask_106[pitch] = true;
  }
  static boolean[] jj_mask_107 = new boolean[227];
  static {
    jj_mask_107[loop] = true;
  }
  static boolean[] jj_mask_108 = new boolean[227];
  static {
    jj_mask_108[description] = true;
  }
  static boolean[] jj_mask_109 = new boolean[227];
  static {
    jj_mask_109[url] = true;
  }
  
  static final public void AudioClipID() throws ParseError {
    jj_consume_token(AudioClip);
                         AudioClip aclip = new AudioClip();
                         aclip.setName(getDefName());
                         PushNode(aclip, parserTypeAudioClip);
  }

  static final public void AudioClip() throws ParseError {
    AudioClipID();
    jj_consume_token(23);
    label_25:
    while (true) {
      if (jj_mask_110[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[110] = jj_gen;
        break label_25;
      }
      AudioClipElement();
    }
    jj_consume_token(24);
                         AudioClip aclip = (AudioClip)getCurrentNode();
                         PopNode();
                         addNode(aclip);
  }

  static boolean[] jj_mask_110 = new boolean[227];
  static {
    jj_mask_110[url] =
    jj_mask_110[description] =
    jj_mask_110[loop] =
    jj_mask_110[pitch] =
    jj_mask_110[startTime] =
    jj_mask_110[stopTime] = true;
  }
  
  static final public void BackgroundBackUrlID() throws ParseError {
    jj_consume_token(backUrl);
                         PushNode(getCurrentNode(), parserTypeBackgroundBackUrl);
  }

  static final public void BackgroundBottomUrlID() throws ParseError {
    jj_consume_token(bottomUrl);
                         PushNode(getCurrentNode(), parserTypeBackgroundBottomUrl);
  }

  static final public void BackgroundFrontUrlID() throws ParseError {
    jj_consume_token(frontUrl);
                         PushNode(getCurrentNode(), parserTypeBackgroundFrontUrl);
  }

  static final public void BackgroundLeftUrlID() throws ParseError {
    jj_consume_token(leftUrl);
                         PushNode(getCurrentNode(), parserTypeBackgroundLeftUrl);
  }

  static final public void BackgroundRightUrlID() throws ParseError {
    jj_consume_token(rightUrl);
                         PushNode(getCurrentNode(), parserTypeBackgroundRightUrl);
  }

  static final public void BackgroundTopUrlID() throws ParseError {
    jj_consume_token(topUrl);
                         PushNode(getCurrentNode(), parserTypeBackgroundTopUrl);
  }

  static final public void BackgroundGroundAngleID() throws ParseError {
    jj_consume_token(groundAngle);
                         PushNode(getCurrentNode(), parserTypeBackgroundGroundAngle);
  }

  static final public void BackgroundSkyAngleID() throws ParseError {
    jj_consume_token(skyAngle);
                         PushNode(getCurrentNode(), parserTypeBackgroundSkyAngle);
  }

  static final public void BackgroundGroundColorID() throws ParseError {
    jj_consume_token(groundColor);
                         PushNode(getCurrentNode(), parserTypeBackgroundGroundColor);
  }

  static final public void BackgroundSkyColorID() throws ParseError {
    jj_consume_token(skyColor);
                         PushNode(getCurrentNode(), parserTypeBackgroundSkyColor);
  }

  static final public void BackgroundElement() throws ParseError {
         float   vec[] = new float[3];
         String          value;
    if (jj_mask_120[getToken(1).kind]) {
      BackgroundBackUrlID();
      MFStringToken();
                         PopNode();
    } else {
      jj_expLA1[120] = jj_gen;
      if (jj_mask_119[getToken(1).kind]) {
        BackgroundBottomUrlID();
        MFStringToken();
                         PopNode();
      } else {
        jj_expLA1[119] = jj_gen;
        if (jj_mask_118[getToken(1).kind]) {
          BackgroundFrontUrlID();
          MFStringToken();
                         PopNode();
        } else {
          jj_expLA1[118] = jj_gen;
          if (jj_mask_117[getToken(1).kind]) {
            BackgroundLeftUrlID();
            MFStringToken();
                         PopNode();
          } else {
            jj_expLA1[117] = jj_gen;
            if (jj_mask_116[getToken(1).kind]) {
              BackgroundRightUrlID();
              MFStringToken();
                         PopNode();
            } else {
              jj_expLA1[116] = jj_gen;
              if (jj_mask_115[getToken(1).kind]) {
                BackgroundTopUrlID();
                MFStringToken();
                         PopNode();
              } else {
                jj_expLA1[115] = jj_gen;
                if (jj_mask_114[getToken(1).kind]) {
                  BackgroundGroundAngleID();
                  MFFloatToken();
                         PopNode();
                } else {
                  jj_expLA1[114] = jj_gen;
                  if (jj_mask_113[getToken(1).kind]) {
                    BackgroundSkyAngleID();
                    MFFloatToken();
                         PopNode();
                  } else {
                    jj_expLA1[113] = jj_gen;
                    if (jj_mask_112[getToken(1).kind]) {
                      BackgroundGroundColorID();
                      MFColorToken();
                         PopNode();
                    } else {
                      jj_expLA1[112] = jj_gen;
                      if (jj_mask_111[getToken(1).kind]) {
                        BackgroundSkyColorID();
                        MFColorToken();
                         PopNode();
                      } else {
                        jj_expLA1[111] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseError();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_111 = new boolean[227];
  static {
    jj_mask_111[skyColor] = true;
  }
  static boolean[] jj_mask_112 = new boolean[227];
  static {
    jj_mask_112[groundColor] = true;
  }
  static boolean[] jj_mask_113 = new boolean[227];
  static {
    jj_mask_113[skyAngle] = true;
  }
  static boolean[] jj_mask_114 = new boolean[227];
  static {
    jj_mask_114[groundAngle] = true;
  }
  static boolean[] jj_mask_115 = new boolean[227];
  static {
    jj_mask_115[topUrl] = true;
  }
  static boolean[] jj_mask_116 = new boolean[227];
  static {
    jj_mask_116[rightUrl] = true;
  }
  static boolean[] jj_mask_117 = new boolean[227];
  static {
    jj_mask_117[leftUrl] = true;
  }
  static boolean[] jj_mask_118 = new boolean[227];
  static {
    jj_mask_118[frontUrl] = true;
  }
  static boolean[] jj_mask_119 = new boolean[227];
  static {
    jj_mask_119[bottomUrl] = true;
  }
  static boolean[] jj_mask_120 = new boolean[227];
  static {
    jj_mask_120[backUrl] = true;
  }
  
  static final public void BackgroundID() throws ParseError {
    jj_consume_token(Background);
                         Background bg = new Background();
                         bg.setName(getDefName());
                         PushNode(bg, parserTypeBackground);
  }

  static final public void Background() throws ParseError {
    BackgroundID();
    jj_consume_token(23);
    label_26:
    while (true) {
      if (jj_mask_121[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[121] = jj_gen;
        break label_26;
      }
      BackgroundElement();
    }
    jj_consume_token(24);
                         Background bg = (Background)getCurrentNode();
                         PopNode();
                         addNode(bg);
  }

  static boolean[] jj_mask_121 = new boolean[227];
  static {
    jj_mask_121[backUrl] =
    jj_mask_121[bottomUrl] =
    jj_mask_121[frontUrl] =
    jj_mask_121[leftUrl] =
    jj_mask_121[rightUrl] =
    jj_mask_121[topUrl] =
    jj_mask_121[groundAngle] =
    jj_mask_121[skyAngle] =
    jj_mask_121[groundColor] =
    jj_mask_121[skyColor] = true;
  }
  
  static final public void BillboardElement() throws ParseError {
         float   vec[] = new float[3];
         float   value[] = new float[3];
    if (jj_mask_125[getToken(1).kind]) {
      jj_consume_token(axisOfRotation);
      SFVec3fToken(value);
                         ((Billboard)getCurrentNode()).setAxisOfRotation(value);
    } else {
      jj_expLA1[125] = jj_gen;
      if (jj_mask_124[getToken(1).kind]) {
        jj_consume_token(bboxCenter);
        SFVec3fToken(vec);
                         ((Billboard)getCurrentNode()).setBBoxCenter(vec);
      } else {
        jj_expLA1[124] = jj_gen;
        if (jj_mask_123[getToken(1).kind]) {
          jj_consume_token(bboxSize);
          SFVec3fToken(vec);
                         ((Billboard)getCurrentNode()).setBBoxSize(vec);
        } else {
          jj_expLA1[123] = jj_gen;
          if (jj_mask_122[getToken(1).kind]) {
            Children();
          } else {
            jj_expLA1[122] = jj_gen;
            jj_consume_token(-1);
            throw new ParseError();
          }
        }
      }
    }
  }

  static boolean[] jj_mask_122 = new boolean[227];
  static {
    jj_mask_122[children] = true;
  }
  static boolean[] jj_mask_123 = new boolean[227];
  static {
    jj_mask_123[bboxSize] = true;
  }
  static boolean[] jj_mask_124 = new boolean[227];
  static {
    jj_mask_124[bboxCenter] = true;
  }
  static boolean[] jj_mask_125 = new boolean[227];
  static {
    jj_mask_125[axisOfRotation] = true;
  }
  
  static final public void BillboardID() throws ParseError {
    jj_consume_token(Billboard);
                         Billboard billboard = new Billboard();
                         billboard.setName(getDefName());
                         PushNode(billboard, parserTypeBillboard);
  }

  static final public void Billboard() throws ParseError {
    BillboardID();
    jj_consume_token(23);
    label_27:
    while (true) {
      if (jj_mask_126[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[126] = jj_gen;
        break label_27;
      }
      BillboardElement();
    }
    jj_consume_token(24);
                         Billboard billboard = (Billboard)getCurrentNode();
                         PopNode();
                         addNode(billboard);
  }

  static boolean[] jj_mask_126 = new boolean[227];
  static {
    jj_mask_126[children] =
    jj_mask_126[bboxCenter] =
    jj_mask_126[bboxSize] =
    jj_mask_126[axisOfRotation] = true;
  }
  
  static final public void BoxElement() throws ParseError {
         float   value[] = new float[3];
    jj_consume_token(size);
    SFVec3fToken(value);
                         ((Box)getCurrentNode()).setSize(value);
  }

  static final public void BoxID() throws ParseError {
    jj_consume_token(Box);
                         Box box = new Box();
                         box.setName(getDefName());
                         PushNode(box, parserTypeBox);
  }

  static final public void Box() throws ParseError {
    BoxID();
    jj_consume_token(23);
    label_28:
    while (true) {
      if (jj_mask_127[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[127] = jj_gen;
        break label_28;
      }
      BoxElement();
    }
    jj_consume_token(24);
                         Box box = (Box)getCurrentNode();
                         PopNode();
                         addNode(box);
  }

  static boolean[] jj_mask_127 = new boolean[227];
  static {
    jj_mask_127[size] = true;
  }
  
  static final public void CollisionElement() throws ParseError {
         float   vec[] = new float[3];
         boolean         value;
    if (jj_mask_131[getToken(1).kind]) {
      jj_consume_token(collide);
      value = SFBoolToken();
                         ((Collision)getCurrentNode()).setCollide(value);
    } else {
      jj_expLA1[131] = jj_gen;
      if (jj_mask_130[getToken(1).kind]) {
        jj_consume_token(bboxCenter);
        SFVec3fToken(vec);
                         ((Collision)getCurrentNode()).setBBoxCenter(vec);
      } else {
        jj_expLA1[130] = jj_gen;
        if (jj_mask_129[getToken(1).kind]) {
          jj_consume_token(bboxSize);
          SFVec3fToken(vec);
                         ((Collision)getCurrentNode()).setBBoxSize(vec);
        } else {
          jj_expLA1[129] = jj_gen;
          if (jj_mask_128[getToken(1).kind]) {
            Children();
          } else {
            jj_expLA1[128] = jj_gen;
            jj_consume_token(-1);
            throw new ParseError();
          }
        }
      }
    }
  }

  static boolean[] jj_mask_128 = new boolean[227];
  static {
    jj_mask_128[children] = true;
  }
  static boolean[] jj_mask_129 = new boolean[227];
  static {
    jj_mask_129[bboxSize] = true;
  }
  static boolean[] jj_mask_130 = new boolean[227];
  static {
    jj_mask_130[bboxCenter] = true;
  }
  static boolean[] jj_mask_131 = new boolean[227];
  static {
    jj_mask_131[collide] = true;
  }
  
  static final public void CollisionID() throws ParseError {
    jj_consume_token(Collision);
                         Collision collision = new Collision();
                         collision.setName(getDefName());
                         PushNode(collision, parserTypeCollision);
  }

  static final public void Collision() throws ParseError {
    CollisionID();
    jj_consume_token(23);
    label_29:
    while (true) {
      if (jj_mask_132[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[132] = jj_gen;
        break label_29;
      }
      CollisionElement();
    }
    jj_consume_token(24);
                         Collision collision = (Collision)getCurrentNode();
                         PopNode();
                         addNode(collision);
  }

  static boolean[] jj_mask_132 = new boolean[227];
  static {
    jj_mask_132[children] =
    jj_mask_132[bboxCenter] =
    jj_mask_132[bboxSize] =
    jj_mask_132[collide] = true;
  }
  
  static final public void ColorID() throws ParseError {
    jj_consume_token(Color);
                         Color color = new Color();
                         color.setName(getDefName());
                         PushNode(color, parserTypeColor);
  }

  static final public void Color() throws ParseError {
    ColorID();
    jj_consume_token(23);
    jj_consume_token(color);
    MFColorToken();
    jj_consume_token(24);
                         Color color = (Color)getCurrentNode();
                         PopNode();
                         addNode(color);
  }

  static final public void ColorInterpolatorKeyID() throws ParseError {
    jj_consume_token(key);
                         ColorInterpolator color = (ColorInterpolator)getCurrentNode();
                         PushNode(color, parserTypeColorInterpolatorKey);
  }

  static final public void ColorInterpolatorKeyValueID() throws ParseError {
    jj_consume_token(keyValue);
                         ColorInterpolator color = (ColorInterpolator)getCurrentNode();
                         PushNode(color, parserTypeColorInterpolatorKeyValue);
  }

  static final public void ColorInterpolatorID() throws ParseError {
    jj_consume_token(ColorInterpolator);
                         ColorInterpolator color = new ColorInterpolator();
                         color.setName(getDefName());
                         PushNode(color, parserTypeColorInterpolator);
  }

  static final public void ColorInterpolatorElement() throws ParseError {
         float   value3f[] = new float[3];
         float   value;
         boolean ok;
    if (jj_mask_134[getToken(1).kind]) {
      ColorInterpolatorKeyID();
      MFFloatToken();
                         PopNode();
    } else {
      jj_expLA1[134] = jj_gen;
      if (jj_mask_133[getToken(1).kind]) {
        ColorInterpolatorKeyValueID();
        MFColorToken();
                         PopNode();
      } else {
        jj_expLA1[133] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_133 = new boolean[227];
  static {
    jj_mask_133[keyValue] = true;
  }
  static boolean[] jj_mask_134 = new boolean[227];
  static {
    jj_mask_134[key] = true;
  }
  
  static final public void ColorInterpolator() throws ParseError {
    ColorInterpolatorID();
    jj_consume_token(23);
    label_30:
    while (true) {
      if (jj_mask_135[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[135] = jj_gen;
        break label_30;
      }
      ColorInterpolatorElement();
    }
    jj_consume_token(24);
                         ColorInterpolator pos = (ColorInterpolator)getCurrentNode();
                         PopNode();
                         addNode(pos);
  }

  static boolean[] jj_mask_135 = new boolean[227];
  static {
    jj_mask_135[key] =
    jj_mask_135[keyValue] = true;
  }
  
  static final public void ConeElement() throws ParseError {
         boolean         bvalue;
         float   fvalue;
    if (jj_mask_139[getToken(1).kind]) {
      jj_consume_token(side);
      bvalue = SFBoolToken();
                         ((Cone)getCurrentNode()).setSide(bvalue);
    } else {
      jj_expLA1[139] = jj_gen;
      if (jj_mask_138[getToken(1).kind]) {
        jj_consume_token(bottom);
        bvalue = SFBoolToken();
                         ((Cone)getCurrentNode()).setBottom(bvalue);
      } else {
        jj_expLA1[138] = jj_gen;
        if (jj_mask_137[getToken(1).kind]) {
          jj_consume_token(height);
          fvalue = SFFloatToken();
                         ((Cone)getCurrentNode()).setHeight(fvalue);
        } else {
          jj_expLA1[137] = jj_gen;
          if (jj_mask_136[getToken(1).kind]) {
            jj_consume_token(bottomRadius);
            fvalue = SFFloatToken();
                         ((Cone)getCurrentNode()).setBottomRadius(fvalue);
          } else {
            jj_expLA1[136] = jj_gen;
            jj_consume_token(-1);
            throw new ParseError();
          }
        }
      }
    }
  }

  static boolean[] jj_mask_136 = new boolean[227];
  static {
    jj_mask_136[bottomRadius] = true;
  }
  static boolean[] jj_mask_137 = new boolean[227];
  static {
    jj_mask_137[height] = true;
  }
  static boolean[] jj_mask_138 = new boolean[227];
  static {
    jj_mask_138[bottom] = true;
  }
  static boolean[] jj_mask_139 = new boolean[227];
  static {
    jj_mask_139[side] = true;
  }
  
  static final public void ConeID() throws ParseError {
    jj_consume_token(Cone);
                         Cone cone = new Cone();
                         cone.setName(getDefName());
                         PushNode(cone, parserTypeCone);
  }

  static final public void Cone() throws ParseError {
    ConeID();
    jj_consume_token(23);
    label_31:
    while (true) {
      if (jj_mask_140[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[140] = jj_gen;
        break label_31;
      }
      ConeElement();
    }
    jj_consume_token(24);
                         Cone cone = (Cone)getCurrentNode();
                         PopNode();
                         addNode(cone);
  }

  static boolean[] jj_mask_140 = new boolean[227];
  static {
    jj_mask_140[height] =
    jj_mask_140[bottomRadius] =
    jj_mask_140[side] =
    jj_mask_140[bottom] = true;
  }
  
  static final public void CoordinateID() throws ParseError {
    jj_consume_token(Coordinate);
                         Coordinate coord = new Coordinate();
                         coord.setName(getDefName());
                         PushNode(coord, parserTypeCoordinate);
  }

  static final public void Coordinate() throws ParseError {
    CoordinateID();
    jj_consume_token(23);
    jj_consume_token(point);
    MFVec3fToken();
    jj_consume_token(24);
                         Coordinate coord = (Coordinate)getCurrentNode();
                         PopNode();
                         addNode(coord);
  }

  static final public void CoordinateInterpolatorKeyID() throws ParseError {
    jj_consume_token(key);
                         CoordinateInterpolator coord = (CoordinateInterpolator)getCurrentNode();
                         PushNode(coord, parserTypeCoordinateInterpolatorKey);
  }

  static final public void CoordinateInterpolatorKeyValueID() throws ParseError {
    jj_consume_token(keyValue);
                         CoordinateInterpolator coord = (CoordinateInterpolator)getCurrentNode();
                         PushNode(coord, parserTypeCoordinateInterpolatorKeyValue);
  }

  static final public void CoordinateInterpolatorID() throws ParseError {
    jj_consume_token(CoordinateInterpolator);
                         CoordinateInterpolator coord = new CoordinateInterpolator();
                         coord.setName(getDefName());
                         PushNode(coord, parserTypeCoordinateInterpolator);
  }

  static final public void CoordinateInterpolatorElement() throws ParseError {
         float   value3f[] = new float[3];
         float   value;
         boolean ok;
    if (jj_mask_142[getToken(1).kind]) {
      CoordinateInterpolatorKeyID();
      MFFloatToken();
                         PopNode();
    } else {
      jj_expLA1[142] = jj_gen;
      if (jj_mask_141[getToken(1).kind]) {
        CoordinateInterpolatorKeyValueID();
        MFVec3fToken();
                         PopNode();
      } else {
        jj_expLA1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_141 = new boolean[227];
  static {
    jj_mask_141[keyValue] = true;
  }
  static boolean[] jj_mask_142 = new boolean[227];
  static {
    jj_mask_142[key] = true;
  }
  
  static final public void CoordinateInterpolator() throws ParseError {
    CoordinateInterpolatorID();
    jj_consume_token(23);
    label_32:
    while (true) {
      if (jj_mask_143[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[143] = jj_gen;
        break label_32;
      }
      CoordinateInterpolatorElement();
    }
    jj_consume_token(24);
                         CoordinateInterpolator coord = (CoordinateInterpolator)getCurrentNode();
                         PopNode();
                         addNode(coord);
  }

  static boolean[] jj_mask_143 = new boolean[227];
  static {
    jj_mask_143[key] =
    jj_mask_143[keyValue] = true;
  }
  
  static final public void CylinderElement() throws ParseError {
         boolean         bvalue;
         float   fvalue;
    if (jj_mask_148[getToken(1).kind]) {
      jj_consume_token(side);
      bvalue = SFBoolToken();
                         ((Cylinder)getCurrentNode()).setSide(bvalue);
    } else {
      jj_expLA1[148] = jj_gen;
      if (jj_mask_147[getToken(1).kind]) {
        jj_consume_token(bottom);
        bvalue = SFBoolToken();
                         ((Cylinder)getCurrentNode()).setBottom(bvalue);
      } else {
        jj_expLA1[147] = jj_gen;
        if (jj_mask_146[getToken(1).kind]) {
          jj_consume_token(top);
          bvalue = SFBoolToken();
                         ((Cylinder)getCurrentNode()).setTop(bvalue);
        } else {
          jj_expLA1[146] = jj_gen;
          if (jj_mask_145[getToken(1).kind]) {
            jj_consume_token(height);
            fvalue = SFFloatToken();
                         ((Cylinder)getCurrentNode()).setHeight(fvalue);
          } else {
            jj_expLA1[145] = jj_gen;
            if (jj_mask_144[getToken(1).kind]) {
              jj_consume_token(radius);
              fvalue = SFFloatToken();
                         ((Cylinder)getCurrentNode()).setRadius(fvalue);
            } else {
              jj_expLA1[144] = jj_gen;
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_144 = new boolean[227];
  static {
    jj_mask_144[radius] = true;
  }
  static boolean[] jj_mask_145 = new boolean[227];
  static {
    jj_mask_145[height] = true;
  }
  static boolean[] jj_mask_146 = new boolean[227];
  static {
    jj_mask_146[top] = true;
  }
  static boolean[] jj_mask_147 = new boolean[227];
  static {
    jj_mask_147[bottom] = true;
  }
  static boolean[] jj_mask_148 = new boolean[227];
  static {
    jj_mask_148[side] = true;
  }
  
  static final public void CylinderID() throws ParseError {
    jj_consume_token(Cylinder);
                         Cylinder cylinder = new Cylinder();
                         cylinder.setName(getDefName());
                         PushNode(cylinder, parserTypeCylinder);
  }

  static final public void Cylinder() throws ParseError {
    CylinderID();
    jj_consume_token(23);
    label_33:
    while (true) {
      if (jj_mask_149[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[149] = jj_gen;
        break label_33;
      }
      CylinderElement();
    }
    jj_consume_token(24);
                         Cylinder cylinder = (Cylinder)getCurrentNode();
                         PopNode();
                         addNode(cylinder);
  }

  static boolean[] jj_mask_149 = new boolean[227];
  static {
    jj_mask_149[height] =
    jj_mask_149[side] =
    jj_mask_149[bottom] =
    jj_mask_149[top] =
    jj_mask_149[radius] = true;
  }
  
  static final public void CylinderSensorElement() throws ParseError {
         boolean         bvalue;
         float   fvalue;
    if (jj_mask_155[getToken(1).kind]) {
      jj_consume_token(minAngle);
      fvalue = SFFloatToken();
                         ((CylinderSensor)getCurrentNode()).setMinAngle(fvalue);
    } else {
      jj_expLA1[155] = jj_gen;
      if (jj_mask_154[getToken(1).kind]) {
        jj_consume_token(maxAngle);
        fvalue = SFFloatToken();
                         ((CylinderSensor)getCurrentNode()).setMaxAngle(fvalue);
      } else {
        jj_expLA1[154] = jj_gen;
        if (jj_mask_153[getToken(1).kind]) {
          jj_consume_token(diskAngle);
          fvalue = SFFloatToken();
                         ((CylinderSensor)getCurrentNode()).setDiskAngle(fvalue);
        } else {
          jj_expLA1[153] = jj_gen;
          if (jj_mask_152[getToken(1).kind]) {
            jj_consume_token(offset);
            fvalue = SFFloatToken();
                         ((CylinderSensor)getCurrentNode()).setOffset(fvalue);
          } else {
            jj_expLA1[152] = jj_gen;
            if (jj_mask_151[getToken(1).kind]) {
              jj_consume_token(enabled);
              bvalue = SFBoolToken();
                         ((CylinderSensor)getCurrentNode()).setEnabled(bvalue);
            } else {
              jj_expLA1[151] = jj_gen;
              if (jj_mask_150[getToken(1).kind]) {
                jj_consume_token(autoOffset);
                bvalue = SFBoolToken();
                         ((CylinderSensor)getCurrentNode()).setAutoOffset(bvalue);
              } else {
                jj_expLA1[150] = jj_gen;
                jj_consume_token(-1);
                throw new ParseError();
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_150 = new boolean[227];
  static {
    jj_mask_150[autoOffset] = true;
  }
  static boolean[] jj_mask_151 = new boolean[227];
  static {
    jj_mask_151[enabled] = true;
  }
  static boolean[] jj_mask_152 = new boolean[227];
  static {
    jj_mask_152[offset] = true;
  }
  static boolean[] jj_mask_153 = new boolean[227];
  static {
    jj_mask_153[diskAngle] = true;
  }
  static boolean[] jj_mask_154 = new boolean[227];
  static {
    jj_mask_154[maxAngle] = true;
  }
  static boolean[] jj_mask_155 = new boolean[227];
  static {
    jj_mask_155[minAngle] = true;
  }
  
  static final public void CylinderSensorID() throws ParseError {
    jj_consume_token(CylinderSensor);
                         CylinderSensor sensor = new CylinderSensor();
                         sensor.setName(getDefName());
                         PushNode(sensor, parserTypeCylinderSensor);
  }

  static final public void CylinderSensor() throws ParseError {
    CylinderSensorID();
    jj_consume_token(23);
    label_34:
    while (true) {
      if (jj_mask_156[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[156] = jj_gen;
        break label_34;
      }
      CylinderSensorElement();
    }
    jj_consume_token(24);
                         CylinderSensor sensor = (CylinderSensor)getCurrentNode();
                         PopNode();
                         addNode(sensor);
  }

  static boolean[] jj_mask_156 = new boolean[227];
  static {
    jj_mask_156[minAngle] =
    jj_mask_156[maxAngle] =
    jj_mask_156[enabled] =
    jj_mask_156[diskAngle] =
    jj_mask_156[offset] =
    jj_mask_156[autoOffset] = true;
  }
  
  static final public void DirectionalLightElement() throws ParseError {
         float   value3f[] = new float[3];
         float   value;
         boolean ok;
    if (jj_mask_161[getToken(1).kind]) {
      jj_consume_token(on);
      ok = SFBoolToken();
                         DirectionalLight light = (DirectionalLight)getCurrentNode();
                         light.setOn(ok);
    } else {
      jj_expLA1[161] = jj_gen;
      if (jj_mask_160[getToken(1).kind]) {
        jj_consume_token(intensity);
        value = SFFloatToken();
                         DirectionalLight light = (DirectionalLight)getCurrentNode();
                         light.setIntensity(value);
      } else {
        jj_expLA1[160] = jj_gen;
        if (jj_mask_159[getToken(1).kind]) {
          jj_consume_token(ambientIntensity);
          value = SFFloatToken();
                         DirectionalLight light = (DirectionalLight)getCurrentNode();
                         light.setAmbientIntensity(value);
        } else {
          jj_expLA1[159] = jj_gen;
          if (jj_mask_158[getToken(1).kind]) {
            jj_consume_token(color);
            SFColorToken(value3f);
                         DirectionalLight light = (DirectionalLight)getCurrentNode();
                         light.setColor(value3f);
          } else {
            jj_expLA1[158] = jj_gen;
            if (jj_mask_157[getToken(1).kind]) {
              jj_consume_token(direction);
              SFVec3fToken(value3f);
                         DirectionalLight light = (DirectionalLight)getCurrentNode();
                         light.setDirection(value3f);
            } else {
              jj_expLA1[157] = jj_gen;
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_157 = new boolean[227];
  static {
    jj_mask_157[direction] = true;
  }
  static boolean[] jj_mask_158 = new boolean[227];
  static {
    jj_mask_158[color] = true;
  }
  static boolean[] jj_mask_159 = new boolean[227];
  static {
    jj_mask_159[ambientIntensity] = true;
  }
  static boolean[] jj_mask_160 = new boolean[227];
  static {
    jj_mask_160[intensity] = true;
  }
  static boolean[] jj_mask_161 = new boolean[227];
  static {
    jj_mask_161[on] = true;
  }
  
  static final public void DirectionalLightID() throws ParseError {
    jj_consume_token(DirectionalLight);
                         DirectionalLight light = new DirectionalLight();
                         light.setName(getDefName());
                         PushNode(light, parserTypeDirectionalLight);
  }

  static final public void DirectionalLight() throws ParseError {
    DirectionalLightID();
    jj_consume_token(23);
    label_35:
    while (true) {
      if (jj_mask_162[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[162] = jj_gen;
        break label_35;
      }
      DirectionalLightElement();
    }
    jj_consume_token(24);
                         DirectionalLight light = (DirectionalLight)getCurrentNode();
                         PopNode();
                         addNode(light);
  }

  static boolean[] jj_mask_162 = new boolean[227];
  static {
    jj_mask_162[color] =
    jj_mask_162[on] =
    jj_mask_162[intensity] =
    jj_mask_162[ambientIntensity] =
    jj_mask_162[direction] = true;
  }
  
  static final public void ElevationGridHeightID() throws ParseError {
    jj_consume_token(height);
                         PushNode(getCurrentNode(), parserTypeElevationGridHeight);
  }

  static final public void ElevationGridElement() throws ParseError {
         boolean         bvalue;
         float   fvalue;
         int             ivalue;
         double          dvalue;
    if (jj_mask_175[getToken(1).kind]) {
      ElevationGridHeightID();
      MFFloatToken();
                         PopNode();
    } else {
      jj_expLA1[175] = jj_gen;
      if (jj_mask_174[getToken(1).kind]) {
        jj_consume_token(ccw);
        bvalue = SFBoolToken();
                         ((ElevationGrid)getCurrentNode()).setCCW(bvalue);
      } else {
        jj_expLA1[174] = jj_gen;
        if (jj_mask_173[getToken(1).kind]) {
          jj_consume_token(colorPerVertex);
          bvalue = SFBoolToken();
                         ((ElevationGrid)getCurrentNode()).setColorPerVertex(bvalue);
        } else {
          jj_expLA1[173] = jj_gen;
          if (jj_mask_172[getToken(1).kind]) {
            jj_consume_token(creaseAngle);
            fvalue = SFFloatToken();
                         ((ElevationGrid)getCurrentNode()).setCreaseAngle(fvalue);
          } else {
            jj_expLA1[172] = jj_gen;
            if (jj_mask_171[getToken(1).kind]) {
              jj_consume_token(solid);
              bvalue = SFBoolToken();
                         ((ElevationGrid)getCurrentNode()).setSolid(bvalue);
            } else {
              jj_expLA1[171] = jj_gen;
              if (jj_mask_170[getToken(1).kind]) {
                jj_consume_token(normalPerVertex);
                bvalue = SFBoolToken();
                         ((ElevationGrid)getCurrentNode()).setNormalPerVertex(bvalue);
              } else {
                jj_expLA1[170] = jj_gen;
                if (jj_mask_169[getToken(1).kind]) {
                  jj_consume_token(xDimension);
                  ivalue = SFInt32Token();
                         ((ElevationGrid)getCurrentNode()).setXDimension(ivalue);
                } else {
                  jj_expLA1[169] = jj_gen;
                  if (jj_mask_168[getToken(1).kind]) {
                    jj_consume_token(xSpacing);
                    fvalue = SFFloatToken();
                         ((ElevationGrid)getCurrentNode()).setXSpacing(fvalue);
                  } else {
                    jj_expLA1[168] = jj_gen;
                    if (jj_mask_167[getToken(1).kind]) {
                      jj_consume_token(zDimension);
                      ivalue = SFInt32Token();
                         ((ElevationGrid)getCurrentNode()).setZDimension(ivalue);
                    } else {
                      jj_expLA1[167] = jj_gen;
                      if (jj_mask_166[getToken(1).kind]) {
                        jj_consume_token(zSpacing);
                        fvalue = SFFloatToken();
                         ((ElevationGrid)getCurrentNode()).setZSpacing(fvalue);
                      } else {
                        jj_expLA1[166] = jj_gen;
                        if (jj_mask_165[getToken(1).kind]) {
                          jj_consume_token(normal);
                          Normal();
                        } else {
                          jj_expLA1[165] = jj_gen;
                          if (jj_mask_164[getToken(1).kind]) {
                            jj_consume_token(color);
                            Color();
                          } else {
                            jj_expLA1[164] = jj_gen;
                            if (jj_mask_163[getToken(1).kind]) {
                              jj_consume_token(texCoord);
                              TextureCoordinate();
                            } else {
                              jj_expLA1[163] = jj_gen;
                              jj_consume_token(-1);
                              throw new ParseError();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_163 = new boolean[227];
  static {
    jj_mask_163[texCoord] = true;
  }
  static boolean[] jj_mask_164 = new boolean[227];
  static {
    jj_mask_164[color] = true;
  }
  static boolean[] jj_mask_165 = new boolean[227];
  static {
    jj_mask_165[normal] = true;
  }
  static boolean[] jj_mask_166 = new boolean[227];
  static {
    jj_mask_166[zSpacing] = true;
  }
  static boolean[] jj_mask_167 = new boolean[227];
  static {
    jj_mask_167[zDimension] = true;
  }
  static boolean[] jj_mask_168 = new boolean[227];
  static {
    jj_mask_168[xSpacing] = true;
  }
  static boolean[] jj_mask_169 = new boolean[227];
  static {
    jj_mask_169[xDimension] = true;
  }
  static boolean[] jj_mask_170 = new boolean[227];
  static {
    jj_mask_170[normalPerVertex] = true;
  }
  static boolean[] jj_mask_171 = new boolean[227];
  static {
    jj_mask_171[solid] = true;
  }
  static boolean[] jj_mask_172 = new boolean[227];
  static {
    jj_mask_172[creaseAngle] = true;
  }
  static boolean[] jj_mask_173 = new boolean[227];
  static {
    jj_mask_173[colorPerVertex] = true;
  }
  static boolean[] jj_mask_174 = new boolean[227];
  static {
    jj_mask_174[ccw] = true;
  }
  static boolean[] jj_mask_175 = new boolean[227];
  static {
    jj_mask_175[height] = true;
  }
  
  static final public void ElevationGridID() throws ParseError {
    jj_consume_token(ElevationGrid);
                         ElevationGrid aclip = new ElevationGrid();
                         aclip.setName(getDefName());
                         PushNode(aclip, parserTypeElevationGrid);
  }

  static final public void ElevationGrid() throws ParseError {
    ElevationGridID();
    jj_consume_token(23);
    label_36:
    while (true) {
      if (jj_mask_176[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[176] = jj_gen;
        break label_36;
      }
      ElevationGridElement();
    }
    jj_consume_token(24);
                         ElevationGrid aclip = (ElevationGrid)getCurrentNode();
                         PopNode();
                         addNode(aclip);
  }

  static boolean[] jj_mask_176 = new boolean[227];
  static {
    jj_mask_176[color] =
    jj_mask_176[height] =
    jj_mask_176[ccw] =
    jj_mask_176[colorPerVertex] =
    jj_mask_176[creaseAngle] =
    jj_mask_176[normalPerVertex] =
    jj_mask_176[solid] =
    jj_mask_176[xDimension] =
    jj_mask_176[xSpacing] =
    jj_mask_176[zDimension] =
    jj_mask_176[zSpacing] =
    jj_mask_176[normal] =
    jj_mask_176[texCoord] = true;
  }
  
  static final public void ExtrusionCrossSectionID() throws ParseError {
    jj_consume_token(crossSection);
                         PushNode(getCurrentNode(), parserTypeExtrusionCrossSection);
  }

  static final public void ExtrusionOrientationID() throws ParseError {
    jj_consume_token(orientation);
                         PushNode(getCurrentNode(), parserTypeExtrusionOrientation);
  }

  static final public void ExtrusionScaleID() throws ParseError {
    jj_consume_token(scale);
                         PushNode(getCurrentNode(), parserTypeExtrusionScale);
  }

  static final public void ExtrusionSpineID() throws ParseError {
    jj_consume_token(spine);
                         PushNode(getCurrentNode(), parserTypeExtrusionSpine);
  }

  static final public void ExtrusionElement() throws ParseError {
         boolean         bvalue;
         float   fvalue;
         int             ivalue;
         double          dvalue;
    if (jj_mask_186[getToken(1).kind]) {
      ExtrusionCrossSectionID();
      MFVec2fToken();
                         PopNode();
    } else {
      jj_expLA1[186] = jj_gen;
      if (jj_mask_185[getToken(1).kind]) {
        ExtrusionOrientationID();
        MFRotationToken();
                         PopNode();
      } else {
        jj_expLA1[185] = jj_gen;
        if (jj_mask_184[getToken(1).kind]) {
          ExtrusionScaleID();
          MFVec2fToken();
                         PopNode();
        } else {
          jj_expLA1[184] = jj_gen;
          if (jj_mask_183[getToken(1).kind]) {
            ExtrusionSpineID();
            MFVec3fToken();
                         PopNode();
          } else {
            jj_expLA1[183] = jj_gen;
            if (jj_mask_182[getToken(1).kind]) {
              jj_consume_token(ccw);
              bvalue = SFBoolToken();
                         ((Extrusion)getCurrentNode()).setCCW(bvalue);
            } else {
              jj_expLA1[182] = jj_gen;
              if (jj_mask_181[getToken(1).kind]) {
                jj_consume_token(convex);
                bvalue = SFBoolToken();
                         ((Extrusion)getCurrentNode()).setConvex(bvalue);
              } else {
                jj_expLA1[181] = jj_gen;
                if (jj_mask_180[getToken(1).kind]) {
                  jj_consume_token(beginCap);
                  bvalue = SFBoolToken();
                         ((Extrusion)getCurrentNode()).setBeginCap(bvalue);
                } else {
                  jj_expLA1[180] = jj_gen;
                  if (jj_mask_179[getToken(1).kind]) {
                    jj_consume_token(endCap);
                    bvalue = SFBoolToken();
                         ((Extrusion)getCurrentNode()).setEndCap(bvalue);
                  } else {
                    jj_expLA1[179] = jj_gen;
                    if (jj_mask_178[getToken(1).kind]) {
                      jj_consume_token(creaseAngle);
                      fvalue = SFFloatToken();
                         ((Extrusion)getCurrentNode()).setCreaseAngle(fvalue);
                    } else {
                      jj_expLA1[178] = jj_gen;
                      if (jj_mask_177[getToken(1).kind]) {
                        jj_consume_token(solid);
                        bvalue = SFBoolToken();
                         ((Extrusion)getCurrentNode()).setSolid(bvalue);
                      } else {
                        jj_expLA1[177] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseError();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_177 = new boolean[227];
  static {
    jj_mask_177[solid] = true;
  }
  static boolean[] jj_mask_178 = new boolean[227];
  static {
    jj_mask_178[creaseAngle] = true;
  }
  static boolean[] jj_mask_179 = new boolean[227];
  static {
    jj_mask_179[endCap] = true;
  }
  static boolean[] jj_mask_180 = new boolean[227];
  static {
    jj_mask_180[beginCap] = true;
  }
  static boolean[] jj_mask_181 = new boolean[227];
  static {
    jj_mask_181[convex] = true;
  }
  static boolean[] jj_mask_182 = new boolean[227];
  static {
    jj_mask_182[ccw] = true;
  }
  static boolean[] jj_mask_183 = new boolean[227];
  static {
    jj_mask_183[spine] = true;
  }
  static boolean[] jj_mask_184 = new boolean[227];
  static {
    jj_mask_184[scale] = true;
  }
  static boolean[] jj_mask_185 = new boolean[227];
  static {
    jj_mask_185[orientation] = true;
  }
  static boolean[] jj_mask_186 = new boolean[227];
  static {
    jj_mask_186[crossSection] = true;
  }
  
  static final public void ExtrusionID() throws ParseError {
    jj_consume_token(Extrusion);
                         Extrusion node = new Extrusion();
                         node.setName(getDefName());
                         PushNode(node, parserTypeExtrusion);
  }

  static final public void Extrusion() throws ParseError {
    ExtrusionID();
    jj_consume_token(23);
    label_37:
    while (true) {
      if (jj_mask_187[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[187] = jj_gen;
        break label_37;
      }
      ExtrusionElement();
    }
    jj_consume_token(24);
                         Extrusion node = (Extrusion)getCurrentNode();
                         PopNode();
                         addNode(node);
  }

  static boolean[] jj_mask_187 = new boolean[227];
  static {
    jj_mask_187[ccw] =
    jj_mask_187[creaseAngle] =
    jj_mask_187[solid] =
    jj_mask_187[beginCap] =
    jj_mask_187[endCap] =
    jj_mask_187[crossSection] =
    jj_mask_187[spine] =
    jj_mask_187[convex] =
    jj_mask_187[scale] =
    jj_mask_187[orientation] = true;
  }
  
  static final public void FogElement() throws ParseError {
         String          svalue;
         float   fvalue;
         float   value3[] = new float[3];
    if (jj_mask_190[getToken(1).kind]) {
      jj_consume_token(color);
      SFColorToken(value3);
                         ((Fog)getCurrentNode()).setColor(value3);
    } else {
      jj_expLA1[190] = jj_gen;
      if (jj_mask_189[getToken(1).kind]) {
        jj_consume_token(fogType);
        svalue = SFStringToken();
                         ((Fog)getCurrentNode()).setFogType(svalue);
      } else {
        jj_expLA1[189] = jj_gen;
        if (jj_mask_188[getToken(1).kind]) {
          jj_consume_token(visibilityRange);
          fvalue = SFFloatToken();
                         ((Fog)getCurrentNode()).setVisibilityRange(fvalue);
        } else {
          jj_expLA1[188] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_188 = new boolean[227];
  static {
    jj_mask_188[visibilityRange] = true;
  }
  static boolean[] jj_mask_189 = new boolean[227];
  static {
    jj_mask_189[fogType] = true;
  }
  static boolean[] jj_mask_190 = new boolean[227];
  static {
    jj_mask_190[color] = true;
  }
  
  static final public void FogID() throws ParseError {
    jj_consume_token(Fog);
                         Fog fog = new Fog();
                         fog.setName(getDefName());
                         PushNode(fog, parserTypeFog);
  }

  static final public void Fog() throws ParseError {
    FogID();
    jj_consume_token(23);
    label_38:
    while (true) {
      if (jj_mask_191[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[191] = jj_gen;
        break label_38;
      }
      FogElement();
    }
    jj_consume_token(24);
                         Fog fog = (Fog)getCurrentNode();
                         PopNode();
                         addNode(fog);
  }

  static boolean[] jj_mask_191 = new boolean[227];
  static {
    jj_mask_191[color] =
    jj_mask_191[fogType] =
    jj_mask_191[visibilityRange] = true;
  }
  
  static final public void FontStyleJustifyID() throws ParseError {
    jj_consume_token(justify);
                         PushNode(getCurrentNode(), parserTypeFontStyleJustify);
  }

  static final public void FontStyleElement() throws ParseError {
         String          value;
         boolean         bvalue;
         float   fvalue;
    if (jj_mask_200[getToken(1).kind]) {
      FontStyleJustifyID();
      MFStringToken();
                         PopNode();
    } else {
      jj_expLA1[200] = jj_gen;
      if (jj_mask_199[getToken(1).kind]) {
        jj_consume_token(family);
        value = SFStringToken();
                         ((FontStyle)getCurrentNode()).setFamily(value);
      } else {
        jj_expLA1[199] = jj_gen;
        if (jj_mask_198[getToken(1).kind]) {
          jj_consume_token(language);
          value = SFStringToken();
                         ((FontStyle)getCurrentNode()).setLanguage(value);
        } else {
          jj_expLA1[198] = jj_gen;
          if (jj_mask_197[getToken(1).kind]) {
            jj_consume_token(style);
            value = SFStringToken();
                         ((FontStyle)getCurrentNode()).setStyle(value);
          } else {
            jj_expLA1[197] = jj_gen;
            if (jj_mask_196[getToken(1).kind]) {
              jj_consume_token(horizontal);
              bvalue = SFBoolToken();
                         ((FontStyle)getCurrentNode()).setHorizontal(bvalue);
            } else {
              jj_expLA1[196] = jj_gen;
              if (jj_mask_195[getToken(1).kind]) {
                jj_consume_token(leftToRight);
                bvalue = SFBoolToken();
                         ((FontStyle)getCurrentNode()).setLeftToRight(bvalue);
              } else {
                jj_expLA1[195] = jj_gen;
                if (jj_mask_194[getToken(1).kind]) {
                  jj_consume_token(topToBottom);
                  bvalue = SFBoolToken();
                         ((FontStyle)getCurrentNode()).setTopToBottom(bvalue);
                } else {
                  jj_expLA1[194] = jj_gen;
                  if (jj_mask_193[getToken(1).kind]) {
                    jj_consume_token(size);
                    fvalue = SFFloatToken();
                         ((FontStyle)getCurrentNode()).setSize(fvalue);
                  } else {
                    jj_expLA1[193] = jj_gen;
                    if (jj_mask_192[getToken(1).kind]) {
                      jj_consume_token(spacing);
                      fvalue = SFFloatToken();
                         ((FontStyle)getCurrentNode()).setSpacing(fvalue);
                    } else {
                      jj_expLA1[192] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseError();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_192 = new boolean[227];
  static {
    jj_mask_192[spacing] = true;
  }
  static boolean[] jj_mask_193 = new boolean[227];
  static {
    jj_mask_193[size] = true;
  }
  static boolean[] jj_mask_194 = new boolean[227];
  static {
    jj_mask_194[topToBottom] = true;
  }
  static boolean[] jj_mask_195 = new boolean[227];
  static {
    jj_mask_195[leftToRight] = true;
  }
  static boolean[] jj_mask_196 = new boolean[227];
  static {
    jj_mask_196[horizontal] = true;
  }
  static boolean[] jj_mask_197 = new boolean[227];
  static {
    jj_mask_197[style] = true;
  }
  static boolean[] jj_mask_198 = new boolean[227];
  static {
    jj_mask_198[language] = true;
  }
  static boolean[] jj_mask_199 = new boolean[227];
  static {
    jj_mask_199[family] = true;
  }
  static boolean[] jj_mask_200 = new boolean[227];
  static {
    jj_mask_200[justify] = true;
  }
  
  static final public void FontStyleID() throws ParseError {
    jj_consume_token(FontStyle);
                         FontStyle anchor = new FontStyle();
                         anchor.setName(getDefName());
                         PushNode(anchor, parserTypeFontStyle);
  }

  static final public void FontStyle() throws ParseError {
    FontStyleID();
    jj_consume_token(23);
    label_39:
    while (true) {
      if (jj_mask_201[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[201] = jj_gen;
        break label_39;
      }
      FontStyleElement();
    }
    jj_consume_token(24);
                         FontStyle anchor = (FontStyle)getCurrentNode();
                         PopNode();
                         addNode(anchor);
  }

  static boolean[] jj_mask_201 = new boolean[227];
  static {
    jj_mask_201[size] =
    jj_mask_201[justify] =
    jj_mask_201[family] =
    jj_mask_201[style] =
    jj_mask_201[horizontal] =
    jj_mask_201[leftToRight] =
    jj_mask_201[topToBottom] =
    jj_mask_201[language] =
    jj_mask_201[spacing] = true;
  }
  
  static final public void GroupElement() throws ParseError {
         float   vec[] = new float[3];
    if (jj_mask_204[getToken(1).kind]) {
      jj_consume_token(bboxCenter);
      SFVec3fToken(vec);
                         ((Group)getCurrentNode()).setBBoxCenter(vec);
    } else {
      jj_expLA1[204] = jj_gen;
      if (jj_mask_203[getToken(1).kind]) {
        jj_consume_token(bboxSize);
        SFVec3fToken(vec);
                         ((Group)getCurrentNode()).setBBoxSize(vec);
      } else {
        jj_expLA1[203] = jj_gen;
        if (jj_mask_202[getToken(1).kind]) {
          Children();
        } else {
          jj_expLA1[202] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_202 = new boolean[227];
  static {
    jj_mask_202[children] = true;
  }
  static boolean[] jj_mask_203 = new boolean[227];
  static {
    jj_mask_203[bboxSize] = true;
  }
  static boolean[] jj_mask_204 = new boolean[227];
  static {
    jj_mask_204[bboxCenter] = true;
  }
  
  static final public void GroupID() throws ParseError {
         String name = null;
    jj_consume_token(Group);
                         Group group = new Group();
                         group.setName(getDefName());
                         PushNode(group, parserTypeGroup);
  }

  static final public void Group() throws ParseError {
    GroupID();
    jj_consume_token(23);
    label_40:
    while (true) {
      if (jj_mask_205[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[205] = jj_gen;
        break label_40;
      }
      GroupElement();
    }
    jj_consume_token(24);
                         Group group = (Group)getCurrentNode();
                         PopNode();
                         addNode(group);
  }

  static boolean[] jj_mask_205 = new boolean[227];
  static {
    jj_mask_205[children] =
    jj_mask_205[bboxCenter] =
    jj_mask_205[bboxSize] = true;
  }
  
  static final public void ImageTextureUrlID() throws ParseError {
    jj_consume_token(url);
                         PushNode(getCurrentNode(), parserTypeImageTextureUrl);
  }

  static final public void ImageTextureElement() throws ParseError {
         boolean         bvalue;
    if (jj_mask_208[getToken(1).kind]) {
      ImageTextureUrlID();
      MFStringToken();
                         PopNode();
    } else {
      jj_expLA1[208] = jj_gen;
      if (jj_mask_207[getToken(1).kind]) {
        jj_consume_token(repeatS);
        bvalue = SFBoolToken();
                         ((ImageTexture)getCurrentNode()).setRepeatS(bvalue);
      } else {
        jj_expLA1[207] = jj_gen;
        if (jj_mask_206[getToken(1).kind]) {
          jj_consume_token(repeatT);
          bvalue = SFBoolToken();
                         ((ImageTexture)getCurrentNode()).setRepeatT(bvalue);
        } else {
          jj_expLA1[206] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_206 = new boolean[227];
  static {
    jj_mask_206[repeatT] = true;
  }
  static boolean[] jj_mask_207 = new boolean[227];
  static {
    jj_mask_207[repeatS] = true;
  }
  static boolean[] jj_mask_208 = new boolean[227];
  static {
    jj_mask_208[url] = true;
  }
  
  static final public void ImageTextureID() throws ParseError {
    jj_consume_token(ImageTexture);
                         ImageTexture texture = new ImageTexture();
                         texture.setName(getDefName());
                         PushNode(texture, parserTypeImageTexture);
  }

  static final public void ImageTexture() throws ParseError {
    ImageTextureID();
    jj_consume_token(23);
    label_41:
    while (true) {
      if (jj_mask_209[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[209] = jj_gen;
        break label_41;
      }
      ImageTextureElement();
    }
    jj_consume_token(24);
                         ImageTexture texture = (ImageTexture)getCurrentNode();
                         PopNode();
                         addNode(texture);
  }

  static boolean[] jj_mask_209 = new boolean[227];
  static {
    jj_mask_209[url] =
    jj_mask_209[repeatS] =
    jj_mask_209[repeatT] = true;
  }
  
  static final public void IdxFaceSetCoordIndexID() throws ParseError {
    jj_consume_token(coordIndex);
                         IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                         PushNode(idxFaceset, parserTypeIdxFaceSetCoordIndex);
  }

  static final public void IdxFaceSetColorIndexID() throws ParseError {
    jj_consume_token(colorIndex);
                         IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                         PushNode(idxFaceset, parserTypeIdxFaceSetColorIndex);
  }

  static final public void IdxFaceSetNormalIndexID() throws ParseError {
    jj_consume_token(normalIndex);
                         IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                         PushNode(idxFaceset, parserTypeIdxFaceSetNormalIndex);
  }

  static final public void IdxFaceSetTexCoordIndexID() throws ParseError {
    jj_consume_token(texCoordIndex);
                         IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                         PushNode(idxFaceset, parserTypeIdxFaceSetTexCoordIndex);
  }

  static final public void IdxFaceSetElement() throws ParseError {
         boolean         ok;
         float   angle;
    if (jj_mask_223[getToken(1).kind]) {
      jj_consume_token(coord);
      Coordinate();
    } else {
      jj_expLA1[223] = jj_gen;
      if (jj_mask_222[getToken(1).kind]) {
        jj_consume_token(normal);
        Normal();
      } else {
        jj_expLA1[222] = jj_gen;
        if (jj_mask_221[getToken(1).kind]) {
          jj_consume_token(color);
          Color();
        } else {
          jj_expLA1[221] = jj_gen;
          if (jj_mask_220[getToken(1).kind]) {
            jj_consume_token(texCoord);
            TextureCoordinate();
          } else {
            jj_expLA1[220] = jj_gen;
            if (jj_mask_219[getToken(1).kind]) {
              IdxFaceSetCoordIndexID();
              MFInt32Token();
                 PopNode();
            } else {
              jj_expLA1[219] = jj_gen;
              if (jj_mask_218[getToken(1).kind]) {
                IdxFaceSetTexCoordIndexID();
                MFInt32Token();
                 PopNode();
              } else {
                jj_expLA1[218] = jj_gen;
                if (jj_mask_217[getToken(1).kind]) {
                  IdxFaceSetColorIndexID();
                  MFInt32Token();
                 PopNode();
                } else {
                  jj_expLA1[217] = jj_gen;
                  if (jj_mask_216[getToken(1).kind]) {
                    IdxFaceSetNormalIndexID();
                    MFInt32Token();
                 PopNode();
                  } else {
                    jj_expLA1[216] = jj_gen;
                    if (jj_mask_215[getToken(1).kind]) {
                      jj_consume_token(creaseAngle);
                      angle = SFFloatToken();
                 IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                 idxFaceset.setCreaseAngle(angle);
                    } else {
                      jj_expLA1[215] = jj_gen;
                      if (jj_mask_214[getToken(1).kind]) {
                        jj_consume_token(ccw);
                        ok = SFBoolToken();
                 IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                 idxFaceset.setCCW(ok);
                      } else {
                        jj_expLA1[214] = jj_gen;
                        if (jj_mask_213[getToken(1).kind]) {
                          jj_consume_token(solid);
                          ok = SFBoolToken();
                 IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                 idxFaceset.setSolid(ok);
                        } else {
                          jj_expLA1[213] = jj_gen;
                          if (jj_mask_212[getToken(1).kind]) {
                            jj_consume_token(convex);
                            ok = SFBoolToken();
                 IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                 idxFaceset.setConvex(ok);
                          } else {
                            jj_expLA1[212] = jj_gen;
                            if (jj_mask_211[getToken(1).kind]) {
                              jj_consume_token(colorPerVertex);
                              ok = SFBoolToken();
                 IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                 idxFaceset.setColorPerVertex(ok);
                            } else {
                              jj_expLA1[211] = jj_gen;
                              if (jj_mask_210[getToken(1).kind]) {
                                jj_consume_token(normalPerVertex);
                                ok = SFBoolToken();
                 IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                 idxFaceset.setNormalPerVertex(ok);
                              } else {
                                jj_expLA1[210] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseError();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_210 = new boolean[227];
  static {
    jj_mask_210[normalPerVertex] = true;
  }
  static boolean[] jj_mask_211 = new boolean[227];
  static {
    jj_mask_211[colorPerVertex] = true;
  }
  static boolean[] jj_mask_212 = new boolean[227];
  static {
    jj_mask_212[convex] = true;
  }
  static boolean[] jj_mask_213 = new boolean[227];
  static {
    jj_mask_213[solid] = true;
  }
  static boolean[] jj_mask_214 = new boolean[227];
  static {
    jj_mask_214[ccw] = true;
  }
  static boolean[] jj_mask_215 = new boolean[227];
  static {
    jj_mask_215[creaseAngle] = true;
  }
  static boolean[] jj_mask_216 = new boolean[227];
  static {
    jj_mask_216[normalIndex] = true;
  }
  static boolean[] jj_mask_217 = new boolean[227];
  static {
    jj_mask_217[colorIndex] = true;
  }
  static boolean[] jj_mask_218 = new boolean[227];
  static {
    jj_mask_218[texCoordIndex] = true;
  }
  static boolean[] jj_mask_219 = new boolean[227];
  static {
    jj_mask_219[coordIndex] = true;
  }
  static boolean[] jj_mask_220 = new boolean[227];
  static {
    jj_mask_220[texCoord] = true;
  }
  static boolean[] jj_mask_221 = new boolean[227];
  static {
    jj_mask_221[color] = true;
  }
  static boolean[] jj_mask_222 = new boolean[227];
  static {
    jj_mask_222[normal] = true;
  }
  static boolean[] jj_mask_223 = new boolean[227];
  static {
    jj_mask_223[coord] = true;
  }
  
  static final public void IdxFaceSetID() throws ParseError {
    jj_consume_token(IndexedFaceSet);
                         IndexedFaceSet idxFaceset = new IndexedFaceSet();
                         idxFaceset.setName(getDefName());
                         PushNode(idxFaceset, parserTypeIdxFaceSet);
  }

  static final public void IndexedFaceSet() throws ParseError {
    IdxFaceSetID();
    jj_consume_token(23);
    label_42:
    while (true) {
      if (jj_mask_224[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[224] = jj_gen;
        break label_42;
      }
      IdxFaceSetElement();
    }
    jj_consume_token(24);
                         IndexedFaceSet idxFaceset = (IndexedFaceSet)getCurrentNode();
                         PopNode();
                         addNode(idxFaceset);
  }

  static boolean[] jj_mask_224 = new boolean[227];
  static {
    jj_mask_224[color] =
    jj_mask_224[ccw] =
    jj_mask_224[colorPerVertex] =
    jj_mask_224[creaseAngle] =
    jj_mask_224[normalPerVertex] =
    jj_mask_224[solid] =
    jj_mask_224[coord] =
    jj_mask_224[normal] =
    jj_mask_224[texCoord] =
    jj_mask_224[coordIndex] =
    jj_mask_224[colorIndex] =
    jj_mask_224[texCoordIndex] =
    jj_mask_224[normalIndex] =
    jj_mask_224[convex] = true;
  }
  
  static final public void IdxLineSetCoordIndexID() throws ParseError {
    jj_consume_token(coordIndex);
                         PushNode(getCurrentNode(), parserTypeIdxLineSetCoordIndex);
  }

  static final public void IdxLineSetColorIndexID() throws ParseError {
    jj_consume_token(colorIndex);
                         PushNode(getCurrentNode(), parserTypeIdxLineSetColorIndex);
  }

  static final public void IdxLineSetElement() throws ParseError {
         boolean         ok;
         float   angle;
    if (jj_mask_229[getToken(1).kind]) {
      jj_consume_token(coord);
      Coordinate();
    } else {
      jj_expLA1[229] = jj_gen;
      if (jj_mask_228[getToken(1).kind]) {
        jj_consume_token(color);
        Color();
      } else {
        jj_expLA1[228] = jj_gen;
        if (jj_mask_227[getToken(1).kind]) {
          IdxLineSetCoordIndexID();
          MFInt32Token();
                 PopNode();
        } else {
          jj_expLA1[227] = jj_gen;
          if (jj_mask_226[getToken(1).kind]) {
            IdxLineSetColorIndexID();
            MFInt32Token();
                 PopNode();
          } else {
            jj_expLA1[226] = jj_gen;
            if (jj_mask_225[getToken(1).kind]) {
              jj_consume_token(colorPerVertex);
              ok = SFBoolToken();
                 IndexedLineSet idxFaceset = (IndexedLineSet)getCurrentNode();
                 idxFaceset.setColorPerVertex(ok);
            } else {
              jj_expLA1[225] = jj_gen;
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_225 = new boolean[227];
  static {
    jj_mask_225[colorPerVertex] = true;
  }
  static boolean[] jj_mask_226 = new boolean[227];
  static {
    jj_mask_226[colorIndex] = true;
  }
  static boolean[] jj_mask_227 = new boolean[227];
  static {
    jj_mask_227[coordIndex] = true;
  }
  static boolean[] jj_mask_228 = new boolean[227];
  static {
    jj_mask_228[color] = true;
  }
  static boolean[] jj_mask_229 = new boolean[227];
  static {
    jj_mask_229[coord] = true;
  }
  
  static final public void IdxLineSetID() throws ParseError {
    jj_consume_token(IndexedLineSet);
                         IndexedLineSet idxFaceset = new IndexedLineSet();
                         idxFaceset.setName(getDefName());
                         PushNode(idxFaceset, parserTypeIdxLineSet);
  }

  static final public void IndexedLineSet() throws ParseError {
    IdxLineSetID();
    jj_consume_token(23);
    label_43:
    while (true) {
      if (jj_mask_230[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[230] = jj_gen;
        break label_43;
      }
      IdxLineSetElement();
    }
    jj_consume_token(24);
                         IndexedLineSet idxFaceset = (IndexedLineSet)getCurrentNode();
                         PopNode();
                         addNode(idxFaceset);
  }

  static boolean[] jj_mask_230 = new boolean[227];
  static {
    jj_mask_230[color] =
    jj_mask_230[colorPerVertex] =
    jj_mask_230[coord] =
    jj_mask_230[coordIndex] =
    jj_mask_230[colorIndex] = true;
  }
  
  static final public void InlineUrlID() throws ParseError {
    jj_consume_token(url);
                         PushNode(getCurrentNode(), parserTypeInlineUrl);
  }

  static final public void InlineElement() throws ParseError {
         float   vec[] = new float[3];
         String          value;
    if (jj_mask_233[getToken(1).kind]) {
      InlineUrlID();
      MFStringToken();
                         PopNode();
    } else {
      jj_expLA1[233] = jj_gen;
      if (jj_mask_232[getToken(1).kind]) {
        jj_consume_token(bboxCenter);
        SFVec3fToken(vec);
                         ((Inline)getCurrentNode()).setBBoxCenter(vec);
      } else {
        jj_expLA1[232] = jj_gen;
        if (jj_mask_231[getToken(1).kind]) {
          jj_consume_token(bboxSize);
          SFVec3fToken(vec);
                         ((Inline)getCurrentNode()).setBBoxSize(vec);
        } else {
          jj_expLA1[231] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_231 = new boolean[227];
  static {
    jj_mask_231[bboxSize] = true;
  }
  static boolean[] jj_mask_232 = new boolean[227];
  static {
    jj_mask_232[bboxCenter] = true;
  }
  static boolean[] jj_mask_233 = new boolean[227];
  static {
    jj_mask_233[url] = true;
  }
  
  static final public void InlineID() throws ParseError {
    jj_consume_token(Inline);
                         Inline inline = new Inline();
                         inline.setName(getDefName());
                         PushNode(inline, parserTypeInline);
  }

  static final public void Inline() throws ParseError {
    InlineID();
    jj_consume_token(23);
    label_44:
    while (true) {
      if (jj_mask_234[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[234] = jj_gen;
        break label_44;
      }
      InlineElement();
    }
    jj_consume_token(24);
                         Inline inline = (Inline)getCurrentNode();
                         PopNode();
                         addNode(inline);
  }

  static boolean[] jj_mask_234 = new boolean[227];
  static {
    jj_mask_234[url] =
    jj_mask_234[bboxCenter] =
    jj_mask_234[bboxSize] = true;
  }
  
  static final public void Level() throws ParseError {
    jj_consume_token(level);
    label_45:
    while (true) {
      if (jj_mask_235[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[235] = jj_gen;
        break label_45;
      }
      jj_consume_token(9);
    }
    label_46:
    while (true) {
      if (jj_mask_236[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[236] = jj_gen;
        break label_46;
      }
      label_47:
      while (true) {
        if (jj_mask_237[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[237] = jj_gen;
          break label_47;
        }
        Def();
      }
      ChildrenElement();
    }
    label_48:
    while (true) {
      if (jj_mask_238[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[238] = jj_gen;
        break label_48;
      }
      jj_consume_token(11);
    }
  }

  static boolean[] jj_mask_235 = new boolean[227];
  static {
    jj_mask_235[9] = true;
  }
  static boolean[] jj_mask_236 = new boolean[227];
  static {
    jj_mask_236[DEF] =
    jj_mask_236[Anchor] =
    jj_mask_236[AudioClip] =
    jj_mask_236[Background] =
    jj_mask_236[Billboard] =
    jj_mask_236[Collision] =
    jj_mask_236[ColorInterpolator] =
    jj_mask_236[CoordinateInterpolator] =
    jj_mask_236[CylinderSensor] =
    jj_mask_236[DirectionalLight] =
    jj_mask_236[Fog] =
    jj_mask_236[Group] =
    jj_mask_236[Inline] =
    jj_mask_236[LOD] =
    jj_mask_236[NavigationInfo] =
    jj_mask_236[NormalInterpolator] =
    jj_mask_236[OrientationInterpolator] =
    jj_mask_236[PlaneSensor] =
    jj_mask_236[PointLight] =
    jj_mask_236[PositionInterpolator] =
    jj_mask_236[ProximitySensor] =
    jj_mask_236[ScalarInterpolator] =
    jj_mask_236[Script] =
    jj_mask_236[Sound] =
    jj_mask_236[SphereSensor] =
    jj_mask_236[SpotLight] =
    jj_mask_236[Shape] =
    jj_mask_236[Switch] =
    jj_mask_236[TimeSensor] =
    jj_mask_236[TouchSensor] =
    jj_mask_236[Transform] =
    jj_mask_236[Viewpoint] =
    jj_mask_236[VisibilitySensor] =
    jj_mask_236[WorldInfo] = true;
  }
  static boolean[] jj_mask_237 = new boolean[227];
  static {
    jj_mask_237[DEF] = true;
  }
  static boolean[] jj_mask_238 = new boolean[227];
  static {
    jj_mask_238[11] = true;
  }
  
  static final public void LODRangeID() throws ParseError {
    jj_consume_token(range);
                         PushNode(getCurrentNode(), parserTypeLODRange);
  }

  static final public void LODElement() throws ParseError {
         float vector[] = new float[3];
    if (jj_mask_241[getToken(1).kind]) {
      LODRangeID();
      MFFloatToken();
                         PopNode();
    } else {
      jj_expLA1[241] = jj_gen;
      if (jj_mask_240[getToken(1).kind]) {
        jj_consume_token(center);
        SFVec3fToken(vector);
                         ((LOD)getCurrentNode()).setCenter(vector);
      } else {
        jj_expLA1[240] = jj_gen;
        if (jj_mask_239[getToken(1).kind]) {
          Level();
        } else {
          jj_expLA1[239] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_239 = new boolean[227];
  static {
    jj_mask_239[level] = true;
  }
  static boolean[] jj_mask_240 = new boolean[227];
  static {
    jj_mask_240[center] = true;
  }
  static boolean[] jj_mask_241 = new boolean[227];
  static {
    jj_mask_241[range] = true;
  }
  
  static final public void LODID() throws ParseError {
    jj_consume_token(LOD);
                         LOD lod = new LOD();
                         lod.setName(getDefName());
                         PushNode(lod, parserTypeLOD);
  }

  static final public void LOD() throws ParseError {
    LODID();
    jj_consume_token(23);
    label_49:
    while (true) {
      if (jj_mask_242[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[242] = jj_gen;
        break label_49;
      }
      LODElement();
    }
    jj_consume_token(24);
                         LOD lod = (LOD)getCurrentNode();
                         PopNode();
                         addNode(lod);
  }

  static boolean[] jj_mask_242 = new boolean[227];
  static {
    jj_mask_242[center] =
    jj_mask_242[range] =
    jj_mask_242[level] = true;
  }
  
  static final public void MaterialElement() throws ParseError {
         float   color[] = new float[3];
         float   value;
    if (jj_mask_248[getToken(1).kind]) {
      jj_consume_token(ambientIntensity);
      value = SFFloatToken();
                         Material light = (Material)getCurrentNode();
                         light.setAmbientIntensity(value);
    } else {
      jj_expLA1[248] = jj_gen;
      if (jj_mask_247[getToken(1).kind]) {
        jj_consume_token(shininess);
        value = SFFloatToken();
                         Material light = (Material)getCurrentNode();
                         light.setShininess(value);
      } else {
        jj_expLA1[247] = jj_gen;
        if (jj_mask_246[getToken(1).kind]) {
          jj_consume_token(transparency);
          value = SFFloatToken();
                         Material light = (Material)getCurrentNode();
                         light.setTransparency(value);
        } else {
          jj_expLA1[246] = jj_gen;
          if (jj_mask_245[getToken(1).kind]) {
            jj_consume_token(diffuseColor);
            SFColorToken(color);
                         Material light = (Material)getCurrentNode();
                         light.setDiffuseColor(color);
          } else {
            jj_expLA1[245] = jj_gen;
            if (jj_mask_244[getToken(1).kind]) {
              jj_consume_token(specularColor);
              SFColorToken(color);
                         Material light = (Material)getCurrentNode();
                         light.setSpecularColor(color);
            } else {
              jj_expLA1[244] = jj_gen;
              if (jj_mask_243[getToken(1).kind]) {
                jj_consume_token(emissiveColor);
                SFColorToken(color);
                         Material light = (Material)getCurrentNode();
                         light.setEmissiveColor(color);
              } else {
                jj_expLA1[243] = jj_gen;
                jj_consume_token(-1);
                throw new ParseError();
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_243 = new boolean[227];
  static {
    jj_mask_243[emissiveColor] = true;
  }
  static boolean[] jj_mask_244 = new boolean[227];
  static {
    jj_mask_244[specularColor] = true;
  }
  static boolean[] jj_mask_245 = new boolean[227];
  static {
    jj_mask_245[diffuseColor] = true;
  }
  static boolean[] jj_mask_246 = new boolean[227];
  static {
    jj_mask_246[transparency] = true;
  }
  static boolean[] jj_mask_247 = new boolean[227];
  static {
    jj_mask_247[shininess] = true;
  }
  static boolean[] jj_mask_248 = new boolean[227];
  static {
    jj_mask_248[ambientIntensity] = true;
  }
  
  static final public void MaterialID() throws ParseError {
    jj_consume_token(Material);
                         Material mat = new Material();
                         mat.setName(getDefName());
                         PushNode(mat, parserTypeMaterial);
  }

  static final public void Material() throws ParseError {
    MaterialID();
    jj_consume_token(23);
    label_50:
    while (true) {
      if (jj_mask_249[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[249] = jj_gen;
        break label_50;
      }
      MaterialElement();
    }
    jj_consume_token(24);
                         Material mat = (Material)getCurrentNode();
                         PopNode();
                         addNode(mat);
  }

  static boolean[] jj_mask_249 = new boolean[227];
  static {
    jj_mask_249[ambientIntensity] =
    jj_mask_249[diffuseColor] =
    jj_mask_249[specularColor] =
    jj_mask_249[emissiveColor] =
    jj_mask_249[shininess] =
    jj_mask_249[transparency] = true;
  }
  
  static final public void MovieTextureUrlID() throws ParseError {
    jj_consume_token(url);
                         PushNode(getCurrentNode(), parserTypeMovieTextureUrl);
  }

  static final public void MovieTextureElement() throws ParseError {
         boolean         bvalue;
         double          dvalue;
         float   fvalue;
    if (jj_mask_256[getToken(1).kind]) {
      MovieTextureUrlID();
      MFStringToken();
                         PopNode();
    } else {
      jj_expLA1[256] = jj_gen;
      if (jj_mask_255[getToken(1).kind]) {
        jj_consume_token(repeatS);
        bvalue = SFBoolToken();
                         ((MovieTexture)getCurrentNode()).setRepeatS(bvalue);
      } else {
        jj_expLA1[255] = jj_gen;
        if (jj_mask_254[getToken(1).kind]) {
          jj_consume_token(repeatT);
          bvalue = SFBoolToken();
                         ((MovieTexture)getCurrentNode()).setRepeatT(bvalue);
        } else {
          jj_expLA1[254] = jj_gen;
          if (jj_mask_253[getToken(1).kind]) {
            jj_consume_token(loop);
            bvalue = SFBoolToken();
                         ((MovieTexture)getCurrentNode()).setLoop(bvalue);
          } else {
            jj_expLA1[253] = jj_gen;
            if (jj_mask_252[getToken(1).kind]) {
              jj_consume_token(startTime);
              dvalue = SFTimeToken();
                         ((MovieTexture)getCurrentNode()).setStartTime(dvalue);
            } else {
              jj_expLA1[252] = jj_gen;
              if (jj_mask_251[getToken(1).kind]) {
                jj_consume_token(stopTime);
                dvalue = SFTimeToken();
                         ((MovieTexture)getCurrentNode()).setStopTime(dvalue);
              } else {
                jj_expLA1[251] = jj_gen;
                if (jj_mask_250[getToken(1).kind]) {
                  jj_consume_token(speed);
                  fvalue = SFFloatToken();
                         ((MovieTexture)getCurrentNode()).setSpeed(fvalue);
                } else {
                  jj_expLA1[250] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseError();
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_250 = new boolean[227];
  static {
    jj_mask_250[speed] = true;
  }
  static boolean[] jj_mask_251 = new boolean[227];
  static {
    jj_mask_251[stopTime] = true;
  }
  static boolean[] jj_mask_252 = new boolean[227];
  static {
    jj_mask_252[startTime] = true;
  }
  static boolean[] jj_mask_253 = new boolean[227];
  static {
    jj_mask_253[loop] = true;
  }
  static boolean[] jj_mask_254 = new boolean[227];
  static {
    jj_mask_254[repeatT] = true;
  }
  static boolean[] jj_mask_255 = new boolean[227];
  static {
    jj_mask_255[repeatS] = true;
  }
  static boolean[] jj_mask_256 = new boolean[227];
  static {
    jj_mask_256[url] = true;
  }
  
  static final public void MovieTextureID() throws ParseError {
    jj_consume_token(MovieTexture);
                         MovieTexture texture = new MovieTexture();
                         texture.setName(getDefName());
                         PushNode(texture, parserTypeMovieTexture);
  }

  static final public void MovieTexture() throws ParseError {
    MovieTextureID();
    jj_consume_token(23);
    label_51:
    while (true) {
      if (jj_mask_257[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[257] = jj_gen;
        break label_51;
      }
      MovieTextureElement();
    }
    jj_consume_token(24);
                         MovieTexture texture = (MovieTexture)getCurrentNode();
                         PopNode();
                         addNode(texture);
  }

  static boolean[] jj_mask_257 = new boolean[227];
  static {
    jj_mask_257[url] =
    jj_mask_257[loop] =
    jj_mask_257[startTime] =
    jj_mask_257[stopTime] =
    jj_mask_257[repeatS] =
    jj_mask_257[repeatT] =
    jj_mask_257[speed] = true;
  }
  
  static final public void NavigationInfoAvatarSizeID() throws ParseError {
    jj_consume_token(avatarSize);
                         PushNode(getCurrentNode(), parserTypeNavigationInfoAvatarSize);
  }

  static final public void NavigationInfoTypeID() throws ParseError {
    jj_consume_token(type);
                         PushNode(getCurrentNode(), parserTypeNavigationInfoType);
  }

  static final public void NavigationInfoID() throws ParseError {
    jj_consume_token(NavigationInfo);
                         NavigationInfo ninfo = new NavigationInfo();
                         ninfo.setName(getDefName());
                         PushNode(ninfo, parserTypeNavigationInfo);
  }

  static final public void NavigationInfoElement() throws ParseError {
         String          svalue;
         boolean         bvalue;
         float   fvalue;
    if (jj_mask_262[getToken(1).kind]) {
      NavigationInfoAvatarSizeID();
      MFFloatToken();
                         PopNode();
    } else {
      jj_expLA1[262] = jj_gen;
      if (jj_mask_261[getToken(1).kind]) {
        NavigationInfoTypeID();
        MFStringToken();
                         PopNode();
      } else {
        jj_expLA1[261] = jj_gen;
        if (jj_mask_260[getToken(1).kind]) {
          jj_consume_token(headlight);
          bvalue = SFBoolToken();
                         ((NavigationInfo)getCurrentNode()).setHeadlight(bvalue);
        } else {
          jj_expLA1[260] = jj_gen;
          if (jj_mask_259[getToken(1).kind]) {
            jj_consume_token(speed);
            fvalue = SFFloatToken();
                         ((NavigationInfo)getCurrentNode()).setSpeed(fvalue);
          } else {
            jj_expLA1[259] = jj_gen;
            if (jj_mask_258[getToken(1).kind]) {
              jj_consume_token(visibilityLimit);
              fvalue = SFFloatToken();
                         ((NavigationInfo)getCurrentNode()).setVisibilityLimit(fvalue);
            } else {
              jj_expLA1[258] = jj_gen;
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_258 = new boolean[227];
  static {
    jj_mask_258[visibilityLimit] = true;
  }
  static boolean[] jj_mask_259 = new boolean[227];
  static {
    jj_mask_259[speed] = true;
  }
  static boolean[] jj_mask_260 = new boolean[227];
  static {
    jj_mask_260[headlight] = true;
  }
  static boolean[] jj_mask_261 = new boolean[227];
  static {
    jj_mask_261[type] = true;
  }
  static boolean[] jj_mask_262 = new boolean[227];
  static {
    jj_mask_262[avatarSize] = true;
  }
  
  static final public void NavigationInfo() throws ParseError {
    NavigationInfoID();
    jj_consume_token(23);
    label_52:
    while (true) {
      if (jj_mask_263[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[263] = jj_gen;
        break label_52;
      }
      NavigationInfoElement();
    }
    jj_consume_token(24);
                         NavigationInfo node = (NavigationInfo)getCurrentNode();
                         PopNode();
                         addNode(node);
  }

  static boolean[] jj_mask_263 = new boolean[227];
  static {
    jj_mask_263[speed] =
    jj_mask_263[avatarSize] =
    jj_mask_263[headlight] =
    jj_mask_263[type] =
    jj_mask_263[visibilityLimit] = true;
  }
  
  static final public void NormalID() throws ParseError {
    jj_consume_token(Normal);
                         Normal normal = new Normal();
                         normal.setName(getDefName());
                         PushNode(normal, parserTypeNormal);
  }

  static final public void Normal() throws ParseError {
    NormalID();
    jj_consume_token(23);
    jj_consume_token(vector);
    MFVec3fToken();
    jj_consume_token(24);
                         Normal normal = (Normal)getCurrentNode();
                         PopNode();
                         addNode(normal);
  }

  static final public void NormalInterpolatorKeyID() throws ParseError {
    jj_consume_token(key);
                         NormalInterpolator normal = (NormalInterpolator)getCurrentNode();
                         PushNode(normal, parserTypeNormalInterpolatorKey);
  }

  static final public void NormalInterpolatorKeyValueID() throws ParseError {
    jj_consume_token(keyValue);
                         NormalInterpolator normal = (NormalInterpolator)getCurrentNode();
                         PushNode(normal, parserTypeNormalInterpolatorKeyValue);
  }

  static final public void NormalInterpolatorID() throws ParseError {
    jj_consume_token(NormalInterpolator);
                         NormalInterpolator normal = new NormalInterpolator();
                         normal.setName(getDefName());
                         PushNode(normal, parserTypeNormalInterpolator);
  }

  static final public void NormalInterpolatorElement() throws ParseError {
         float   value3f[] = new float[3];
         float   value;
         boolean ok;
    if (jj_mask_265[getToken(1).kind]) {
      NormalInterpolatorKeyID();
      MFFloatToken();
                         PopNode();
    } else {
      jj_expLA1[265] = jj_gen;
      if (jj_mask_264[getToken(1).kind]) {
        NormalInterpolatorKeyValueID();
        MFVec3fToken();
                         PopNode();
      } else {
        jj_expLA1[264] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_264 = new boolean[227];
  static {
    jj_mask_264[keyValue] = true;
  }
  static boolean[] jj_mask_265 = new boolean[227];
  static {
    jj_mask_265[key] = true;
  }
  
  static final public void NormalInterpolator() throws ParseError {
    NormalInterpolatorID();
    jj_consume_token(23);
    label_53:
    while (true) {
      if (jj_mask_266[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[266] = jj_gen;
        break label_53;
      }
      NormalInterpolatorElement();
    }
    jj_consume_token(24);
                         NormalInterpolator pos = (NormalInterpolator)getCurrentNode();
                         PopNode();
                         addNode(pos);
  }

  static boolean[] jj_mask_266 = new boolean[227];
  static {
    jj_mask_266[key] =
    jj_mask_266[keyValue] = true;
  }
  
  static final public void OrientationInterpolatorKeyID() throws ParseError {
    jj_consume_token(key);
                         OrientationInterpolator orientation = (OrientationInterpolator)getCurrentNode();
                         PushNode(orientation, parserTypeOrientationInterpolatorKey);
  }

  static final public void OrientationInterpolatorKeyValueID() throws ParseError {
    jj_consume_token(keyValue);
                         OrientationInterpolator orientation = (OrientationInterpolator)getCurrentNode();
                         PushNode(orientation, parserTypeOrientationInterpolatorKeyValue);
  }

  static final public void OrientationInterpolatorID() throws ParseError {
    jj_consume_token(OrientationInterpolator);
                         OrientationInterpolator orientation = new OrientationInterpolator();
                         orientation.setName(getDefName());
                         PushNode(orientation, parserTypeOrientationInterpolator);
  }

  static final public void OrientationInterpolatorElement() throws ParseError {
    if (jj_mask_268[getToken(1).kind]) {
      OrientationInterpolatorKeyID();
      MFFloatToken();
                         PopNode();
    } else {
      jj_expLA1[268] = jj_gen;
      if (jj_mask_267[getToken(1).kind]) {
        OrientationInterpolatorKeyValueID();
        MFRotationToken();
                         PopNode();
      } else {
        jj_expLA1[267] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_267 = new boolean[227];
  static {
    jj_mask_267[keyValue] = true;
  }
  static boolean[] jj_mask_268 = new boolean[227];
  static {
    jj_mask_268[key] = true;
  }
  
  static final public void OrientationInterpolator() throws ParseError {
    OrientationInterpolatorID();
    jj_consume_token(23);
    label_54:
    while (true) {
      if (jj_mask_269[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[269] = jj_gen;
        break label_54;
      }
      OrientationInterpolatorElement();
    }
    jj_consume_token(24);
                         OrientationInterpolator pos = (OrientationInterpolator)getCurrentNode();
                         PopNode();
                         addNode(pos);
  }

  static boolean[] jj_mask_269 = new boolean[227];
  static {
    jj_mask_269[key] =
    jj_mask_269[keyValue] = true;
  }
  
  static final public void PixelTextureImageID() throws ParseError {
    jj_consume_token(image);
                         PushNode(getCurrentNode(), parserTypePixelTextureImage);
  }

  static final public void PixelTextureElement() throws ParseError {
         boolean         bvalue;
    if (jj_mask_272[getToken(1).kind]) {
      PixelTextureImageID();
      SFImageToken();
                         PopNode();
    } else {
      jj_expLA1[272] = jj_gen;
      if (jj_mask_271[getToken(1).kind]) {
        jj_consume_token(repeatS);
        bvalue = SFBoolToken();
                         ((PixelTexture)getCurrentNode()).setRepeatS(bvalue);
      } else {
        jj_expLA1[271] = jj_gen;
        if (jj_mask_270[getToken(1).kind]) {
          jj_consume_token(repeatT);
          bvalue = SFBoolToken();
                         ((PixelTexture)getCurrentNode()).setRepeatT(bvalue);
        } else {
          jj_expLA1[270] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_270 = new boolean[227];
  static {
    jj_mask_270[repeatT] = true;
  }
  static boolean[] jj_mask_271 = new boolean[227];
  static {
    jj_mask_271[repeatS] = true;
  }
  static boolean[] jj_mask_272 = new boolean[227];
  static {
    jj_mask_272[image] = true;
  }
  
  static final public void PixelTextureID() throws ParseError {
    jj_consume_token(PixelTexture);
                         PixelTexture texture = new PixelTexture();
                         texture.setName(getDefName());
                         PushNode(texture, parserTypePixelTexture);
  }

  static final public void PixelTexture() throws ParseError {
    PixelTextureID();
    jj_consume_token(23);
    label_55:
    while (true) {
      if (jj_mask_273[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[273] = jj_gen;
        break label_55;
      }
      PixelTextureElement();
    }
    jj_consume_token(24);
                         PixelTexture texture = (PixelTexture)getCurrentNode();
                         PopNode();
                         addNode(texture);
  }

  static boolean[] jj_mask_273 = new boolean[227];
  static {
    jj_mask_273[repeatS] =
    jj_mask_273[repeatT] =
    jj_mask_273[image] = true;
  }
  
  static final public void PlaneSensorElement() throws ParseError {
         boolean         bvalue;
         float   fvalue;
         float   v2value[] = new float[2];
         float   v3value[] = new float[3];
    if (jj_mask_278[getToken(1).kind]) {
      jj_consume_token(minPosition);
      SFVec2fToken(v2value);
                         ((PlaneSensor)getCurrentNode()).setMinPosition(v2value);
    } else {
      jj_expLA1[278] = jj_gen;
      if (jj_mask_277[getToken(1).kind]) {
        jj_consume_token(maxPosition);
        SFVec2fToken(v2value);
                         ((PlaneSensor)getCurrentNode()).setMaxPosition(v2value);
      } else {
        jj_expLA1[277] = jj_gen;
        if (jj_mask_276[getToken(1).kind]) {
          jj_consume_token(offset);
          SFVec3fToken(v3value);
                         ((PlaneSensor)getCurrentNode()).setOffset(v3value);
        } else {
          jj_expLA1[276] = jj_gen;
          if (jj_mask_275[getToken(1).kind]) {
            jj_consume_token(enabled);
            bvalue = SFBoolToken();
                         ((PlaneSensor)getCurrentNode()).setEnabled(bvalue);
          } else {
            jj_expLA1[275] = jj_gen;
            if (jj_mask_274[getToken(1).kind]) {
              jj_consume_token(autoOffset);
              bvalue = SFBoolToken();
                         ((PlaneSensor)getCurrentNode()).setAutoOffset(bvalue);
            } else {
              jj_expLA1[274] = jj_gen;
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_274 = new boolean[227];
  static {
    jj_mask_274[autoOffset] = true;
  }
  static boolean[] jj_mask_275 = new boolean[227];
  static {
    jj_mask_275[enabled] = true;
  }
  static boolean[] jj_mask_276 = new boolean[227];
  static {
    jj_mask_276[offset] = true;
  }
  static boolean[] jj_mask_277 = new boolean[227];
  static {
    jj_mask_277[maxPosition] = true;
  }
  static boolean[] jj_mask_278 = new boolean[227];
  static {
    jj_mask_278[minPosition] = true;
  }
  
  static final public void PlaneSensorID() throws ParseError {
    jj_consume_token(PlaneSensor);
                         PlaneSensor sensor = new PlaneSensor();
                         sensor.setName(getDefName());
                         PushNode(sensor, parserTypePlaneSensor);
  }

  static final public void PlaneSensor() throws ParseError {
    PlaneSensorID();
    jj_consume_token(23);
    label_56:
    while (true) {
      if (jj_mask_279[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[279] = jj_gen;
        break label_56;
      }
      PlaneSensorElement();
    }
    jj_consume_token(24);
                         PlaneSensor sensor = (PlaneSensor)getCurrentNode();
                         PopNode();
                         addNode(sensor);
  }

  static boolean[] jj_mask_279 = new boolean[227];
  static {
    jj_mask_279[enabled] =
    jj_mask_279[offset] =
    jj_mask_279[autoOffset] =
    jj_mask_279[minPosition] =
    jj_mask_279[maxPosition] = true;
  }
  
  static final public void PointLightElement() throws ParseError {
         float   value3f[] = new float[3];
         float   value;
         boolean ok;
    if (jj_mask_286[getToken(1).kind]) {
      jj_consume_token(on);
      ok = SFBoolToken();
                         PointLight light = (PointLight)getCurrentNode();
                         light.setOn(ok);
    } else {
      jj_expLA1[286] = jj_gen;
      if (jj_mask_285[getToken(1).kind]) {
        jj_consume_token(intensity);
        value = SFFloatToken();
                         PointLight light = (PointLight)getCurrentNode();
                         light.setIntensity(value);
      } else {
        jj_expLA1[285] = jj_gen;
        if (jj_mask_284[getToken(1).kind]) {
          jj_consume_token(ambientIntensity);
          value = SFFloatToken();
                         PointLight light = (PointLight)getCurrentNode();
                         light.setAmbientIntensity(value);
        } else {
          jj_expLA1[284] = jj_gen;
          if (jj_mask_283[getToken(1).kind]) {
            jj_consume_token(color);
            SFColorToken(value3f);
                         PointLight light = (PointLight)getCurrentNode();
                         light.setColor(value3f);
          } else {
            jj_expLA1[283] = jj_gen;
            if (jj_mask_282[getToken(1).kind]) {
              jj_consume_token(radius);
              value = SFFloatToken();
                         PointLight light = (PointLight)getCurrentNode();
                         light.setRadius(value);
            } else {
              jj_expLA1[282] = jj_gen;
              if (jj_mask_281[getToken(1).kind]) {
                jj_consume_token(location);
                SFVec3fToken(value3f);
                         PointLight light = (PointLight)getCurrentNode();
                         light.setLocation(value3f);
              } else {
                jj_expLA1[281] = jj_gen;
                if (jj_mask_280[getToken(1).kind]) {
                  jj_consume_token(attenuation);
                  SFVec3fToken(value3f);
                         PointLight light = (PointLight)getCurrentNode();
                         light.setAttenuation(value3f);
                } else {
                  jj_expLA1[280] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseError();
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_280 = new boolean[227];
  static {
    jj_mask_280[attenuation] = true;
  }
  static boolean[] jj_mask_281 = new boolean[227];
  static {
    jj_mask_281[location] = true;
  }
  static boolean[] jj_mask_282 = new boolean[227];
  static {
    jj_mask_282[radius] = true;
  }
  static boolean[] jj_mask_283 = new boolean[227];
  static {
    jj_mask_283[color] = true;
  }
  static boolean[] jj_mask_284 = new boolean[227];
  static {
    jj_mask_284[ambientIntensity] = true;
  }
  static boolean[] jj_mask_285 = new boolean[227];
  static {
    jj_mask_285[intensity] = true;
  }
  static boolean[] jj_mask_286 = new boolean[227];
  static {
    jj_mask_286[on] = true;
  }
  
  static final public void PointLightID() throws ParseError {
    jj_consume_token(PointLight);
                         PointLight light = new PointLight();
                         light.setName(getDefName());
                         PushNode(light, parserTypePointLight);
  }

  static final public void PointLight() throws ParseError {
    PointLightID();
    jj_consume_token(23);
    label_57:
    while (true) {
      if (jj_mask_287[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[287] = jj_gen;
        break label_57;
      }
      PointLightElement();
    }
    jj_consume_token(24);
                         PointLight light = (PointLight)getCurrentNode();
                         PopNode();
                         addNode(light);
  }

  static boolean[] jj_mask_287 = new boolean[227];
  static {
    jj_mask_287[color] =
    jj_mask_287[radius] =
    jj_mask_287[on] =
    jj_mask_287[intensity] =
    jj_mask_287[ambientIntensity] =
    jj_mask_287[location] =
    jj_mask_287[attenuation] = true;
  }
  
  static final public void PointSetElement() throws ParseError {
    if (jj_mask_289[getToken(1).kind]) {
      jj_consume_token(color);
      Color();
    } else {
      jj_expLA1[289] = jj_gen;
      if (jj_mask_288[getToken(1).kind]) {
        jj_consume_token(coord);
        Coordinate();
      } else {
        jj_expLA1[288] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_288 = new boolean[227];
  static {
    jj_mask_288[coord] = true;
  }
  static boolean[] jj_mask_289 = new boolean[227];
  static {
    jj_mask_289[color] = true;
  }
  
  static final public void PointSetID() throws ParseError {
    jj_consume_token(PointSet);
                         PointSet point = new PointSet();
                         point.setName(getDefName());
                         PushNode(point, parserTypePointSet);
  }

  static final public void PointSet() throws ParseError {
    PointSetID();
    jj_consume_token(23);
    label_58:
    while (true) {
      if (jj_mask_290[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[290] = jj_gen;
        break label_58;
      }
      PointSetElement();
    }
    jj_consume_token(24);
                         PointSet point = (PointSet)getCurrentNode();
                         PopNode();
                         addNode(point);
  }

  static boolean[] jj_mask_290 = new boolean[227];
  static {
    jj_mask_290[color] =
    jj_mask_290[coord] = true;
  }
  
  static final public void PositionInterpolatorKeyID() throws ParseError {
    jj_consume_token(key);
                         PositionInterpolator pos = (PositionInterpolator)getCurrentNode();
                         PushNode(pos, parserTypePositionInterpolatorKey);
  }

  static final public void PositionInterpolatorKeyValueID() throws ParseError {
    jj_consume_token(keyValue);
                         PositionInterpolator pos = (PositionInterpolator)getCurrentNode();
                         PushNode(pos, parserTypePositionInterpolatorKeyValue);
  }

  static final public void PositionInterpolatorID() throws ParseError {
    jj_consume_token(PositionInterpolator);
                         PositionInterpolator pos = new PositionInterpolator();
                         pos.setName(getDefName());
                         PushNode(pos, parserTypePositionInterpolator);
  }

  static final public void PositionInterpolatorElement() throws ParseError {
         float   value3f[] = new float[3];
         float   value;
         boolean ok;
    if (jj_mask_292[getToken(1).kind]) {
      PositionInterpolatorKeyID();
      MFFloatToken();
                         PopNode();
    } else {
      jj_expLA1[292] = jj_gen;
      if (jj_mask_291[getToken(1).kind]) {
        PositionInterpolatorKeyValueID();
        MFVec3fToken();
                         PopNode();
      } else {
        jj_expLA1[291] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_291 = new boolean[227];
  static {
    jj_mask_291[keyValue] = true;
  }
  static boolean[] jj_mask_292 = new boolean[227];
  static {
    jj_mask_292[key] = true;
  }
  
  static final public void PositionInterpolator() throws ParseError {
    PositionInterpolatorID();
    jj_consume_token(23);
    label_59:
    while (true) {
      if (jj_mask_293[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[293] = jj_gen;
        break label_59;
      }
      PositionInterpolatorElement();
    }
    jj_consume_token(24);
                         PositionInterpolator pos = (PositionInterpolator)getCurrentNode();
                         PopNode();
                         addNode(pos);
  }

  static boolean[] jj_mask_293 = new boolean[227];
  static {
    jj_mask_293[key] =
    jj_mask_293[keyValue] = true;
  }
  
  static final public void ProximitySensorElement() throws ParseError {
         boolean         bvalue;
         float   fvalue;
         float   v3value[] = new float[3];
    if (jj_mask_296[getToken(1).kind]) {
      jj_consume_token(center);
      SFVec3fToken(v3value);
                         ((ProximitySensor)getCurrentNode()).setCenter(v3value);
    } else {
      jj_expLA1[296] = jj_gen;
      if (jj_mask_295[getToken(1).kind]) {
        jj_consume_token(size);
        SFVec3fToken(v3value);
                         ((ProximitySensor)getCurrentNode()).setSize(v3value);
      } else {
        jj_expLA1[295] = jj_gen;
        if (jj_mask_294[getToken(1).kind]) {
          jj_consume_token(enabled);
          bvalue = SFBoolToken();
                         ((ProximitySensor)getCurrentNode()).setEnabled(bvalue);
        } else {
          jj_expLA1[294] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_294 = new boolean[227];
  static {
    jj_mask_294[enabled] = true;
  }
  static boolean[] jj_mask_295 = new boolean[227];
  static {
    jj_mask_295[size] = true;
  }
  static boolean[] jj_mask_296 = new boolean[227];
  static {
    jj_mask_296[center] = true;
  }
  
  static final public void ProximitySensorID() throws ParseError {
    jj_consume_token(ProximitySensor);
                         ProximitySensor sensor = new ProximitySensor();
                         sensor.setName(getDefName());
                         PushNode(sensor, parserTypeProximitySensor);
  }

  static final public void ProximitySensor() throws ParseError {
    ProximitySensorID();
    jj_consume_token(23);
    label_60:
    while (true) {
      if (jj_mask_297[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[297] = jj_gen;
        break label_60;
      }
      ProximitySensorElement();
    }
    jj_consume_token(24);
                         ProximitySensor sensor = (ProximitySensor)getCurrentNode();
                         PopNode();
                         addNode(sensor);
  }

  static boolean[] jj_mask_297 = new boolean[227];
  static {
    jj_mask_297[size] =
    jj_mask_297[enabled] =
    jj_mask_297[center] = true;
  }
  
  static final public void ScalarInterpolatorKeyID() throws ParseError {
    jj_consume_token(key);
                         ScalarInterpolator scalar = (ScalarInterpolator)getCurrentNode();
                         PushNode(scalar, parserTypeScalarInterpolatorKey);
  }

  static final public void ScalarInterpolatorKeyValueID() throws ParseError {
    jj_consume_token(keyValue);
                         ScalarInterpolator scalar = (ScalarInterpolator)getCurrentNode();
                         PushNode(scalar, parserTypeScalarInterpolatorKeyValue);
  }

  static final public void ScalarInterpolatorID() throws ParseError {
    jj_consume_token(ScalarInterpolator);
                         ScalarInterpolator scalar = new ScalarInterpolator();
                         scalar.setName(getDefName());
                         PushNode(scalar, parserTypeScalarInterpolator);
  }

  static final public void ScalarInterpolatorElement() throws ParseError {
    if (jj_mask_299[getToken(1).kind]) {
      ScalarInterpolatorKeyID();
      MFFloatToken();
                         PopNode();
    } else {
      jj_expLA1[299] = jj_gen;
      if (jj_mask_298[getToken(1).kind]) {
        ScalarInterpolatorKeyValueID();
        MFFloatToken();
                         PopNode();
      } else {
        jj_expLA1[298] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_298 = new boolean[227];
  static {
    jj_mask_298[keyValue] = true;
  }
  static boolean[] jj_mask_299 = new boolean[227];
  static {
    jj_mask_299[key] = true;
  }
  
  static final public void ScalarInterpolator() throws ParseError {
    ScalarInterpolatorID();
    jj_consume_token(23);
    label_61:
    while (true) {
      if (jj_mask_300[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[300] = jj_gen;
        break label_61;
      }
      ScalarInterpolatorElement();
    }
    jj_consume_token(24);
                         ScalarInterpolator pos = (ScalarInterpolator)getCurrentNode();
                         PopNode();
                         addNode(pos);
  }

  static boolean[] jj_mask_300 = new boolean[227];
  static {
    jj_mask_300[key] =
    jj_mask_300[keyValue] = true;
  }
  
  static final public String StringValue() throws ParseError {
         Token   t;
    t = jj_consume_token(ID);
                         return t.image;
  }

  static final public void ScriptUrlID() throws ParseError {
    jj_consume_token(url);
                         PushNode(getCurrentNode(), parserTypeScriptUrl);
  }

  static final public void ScriptElement() throws ParseError {
         String          fieldTypeName;
         String          fieldName;
         String          eventInName;
         String          eventOutName;
         String          initialValue;

         String          svalue;
         boolean         bvalue;
         float   fvalue;
         double          dvalue;
         int             ivalue;
         float   value2[] = new float[2];
         float   value3[] = new float[3];
         float   value4[] = new float[4];
    if (jj_mask_303[getToken(1).kind]) {
      ScriptUrlID();
      MFStringToken();
                         PopNode();
    } else {
      jj_expLA1[303] = jj_gen;
      if (jj_mask_302[getToken(1).kind]) {
        jj_consume_token(directOutput);
        bvalue = SFBoolToken();
                         Script script = (Script)getCurrentNode();
                         script.setDirectOutput(bvalue);
      } else {
        jj_expLA1[302] = jj_gen;
        if (jj_mask_301[getToken(1).kind]) {
          jj_consume_token(mustEvaluate);
          bvalue = SFBoolToken();
                         Script script = (Script)getCurrentNode();
                         script.setMustEvaluate(bvalue);
        } else {
          jj_expLA1[301] = jj_gen;
          if (jj_2_46(2)) {
            jj_consume_token(eventIn);
            jj_consume_token(SFBool);
            eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFBool value = new SFBool();
                         script.addEventIn(eventInName, value);
          } else {
            if (jj_2_45(2)) {
              jj_consume_token(eventIn);
              jj_consume_token(SFColor);
              eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFColor value = new SFColor();
                         script.addEventIn(eventInName, value);
            } else {
              if (jj_2_44(2)) {
                jj_consume_token(eventIn);
                jj_consume_token(SFFloat);
                eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFFloat value = new SFFloat();
                         script.addEventIn(eventInName, value);
              } else {
                if (jj_2_43(2)) {
                  jj_consume_token(eventIn);
                  jj_consume_token(SFInt32);
                  eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFInt32 value = new SFInt32();
                         script.addEventIn(eventInName, value);
                } else {
                  if (jj_2_42(2)) {
                    jj_consume_token(eventIn);
                    jj_consume_token(SFRotation);
                    eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFRotation value = new SFRotation();
                         script.addEventIn(eventInName, value);
                  } else {
                    if (jj_2_41(2)) {
                      jj_consume_token(eventIn);
                      jj_consume_token(SFString);
                      eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFString value = new SFString();
                         script.addEventIn(eventInName, value);
                    } else {
                      if (jj_2_40(2)) {
                        jj_consume_token(eventIn);
                        jj_consume_token(SFTime);
                        eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFTime value = new SFTime();
                         script.addEventIn(eventInName, value);
                      } else {
                        if (jj_2_39(2)) {
                          jj_consume_token(eventIn);
                          jj_consume_token(SFVec2f);
                          eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFVec2f value = new SFVec2f();
                         script.addEventIn(eventInName, value);
                        } else {
                          if (jj_2_38(2)) {
                            jj_consume_token(eventIn);
                            jj_consume_token(SFVec3f);
                            eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFVec3f value = new SFVec3f();
                         script.addEventIn(eventInName, value);
                          } else {
                            if (jj_2_37(3)) {
                              jj_consume_token(eventIn);
                              jj_consume_token(MFColor);
                              eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFColor value = new MFColor();
                         script.addEventIn(eventInName, value);
                            } else {
                              if (jj_2_36(3)) {
                                jj_consume_token(eventIn);
                                jj_consume_token(MFFloat);
                                eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFFloat value = new MFFloat();
                         script.addEventIn(eventInName, value);
                              } else {
                                if (jj_2_35(3)) {
                                  jj_consume_token(eventIn);
                                  jj_consume_token(MFInt32);
                                  eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFInt32 value = new MFInt32();
                         script.addEventIn(eventInName, value);
                                } else {
                                  if (jj_2_34(3)) {
                                    jj_consume_token(eventIn);
                                    jj_consume_token(MFRotation);
                                    eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFRotation value = new MFRotation();
                         script.addEventIn(eventInName, value);
                                  } else {
                                    if (jj_2_33(3)) {
                                      jj_consume_token(eventIn);
                                      jj_consume_token(MFString);
                                      eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFString value = new MFString();
                         script.addEventIn(eventInName, value);
                                    } else {
                                      if (jj_2_32(3)) {
                                        jj_consume_token(eventIn);
                                        jj_consume_token(MFTime);
                                        eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFTime value = new MFTime();
                         script.addEventIn(eventInName, value);
                                      } else {
                                        if (jj_2_31(3)) {
                                          jj_consume_token(eventIn);
                                          jj_consume_token(MFVec2f);
                                          eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFVec2f value = new MFVec2f();
                         script.addEventIn(eventInName, value);
                                        } else {
                                          if (jj_2_30(3)) {
                                            jj_consume_token(eventIn);
                                            jj_consume_token(MFVec3f);
                                            eventInName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFVec3f value = new MFVec3f();
                         script.addEventIn(eventInName, value);
                                          } else {
                                            if (jj_2_29(2)) {
                                              jj_consume_token(eventOut);
                                              jj_consume_token(SFBool);
                                              eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFBool value = new SFBool();
                         script.addEventOut(eventOutName, value);
                                            } else {
                                              if (jj_2_28(2)) {
                                                jj_consume_token(eventOut);
                                                jj_consume_token(SFColor);
                                                eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFColor value = new SFColor();
                         script.addEventOut(eventOutName, value);
                                              } else {
                                                if (jj_2_27(2)) {
                                                  jj_consume_token(eventOut);
                                                  jj_consume_token(SFFloat);
                                                  eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFFloat value = new SFFloat();
                         script.addEventOut(eventOutName, value);
                                                } else {
                                                  if (jj_2_26(2)) {
                                                    jj_consume_token(eventOut);
                                                    jj_consume_token(SFInt32);
                                                    eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFInt32 value = new SFInt32();
                         script.addEventOut(eventOutName, value);
                                                  } else {
                                                    if (jj_2_25(2)) {
                                                      jj_consume_token(eventOut);
                                                      jj_consume_token(SFRotation);
                                                      eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFRotation value = new SFRotation();
                         script.addEventOut(eventOutName, value);
                                                    } else {
                                                      if (jj_2_24(2)) {
                                                        jj_consume_token(eventOut);
                                                        jj_consume_token(SFString);
                                                        eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFString value = new SFString();
                         script.addEventOut(eventOutName, value);
                                                      } else {
                                                        if (jj_2_23(2)) {
                                                          jj_consume_token(eventOut);
                                                          jj_consume_token(SFTime);
                                                          eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFTime value = new SFTime();
                         script.addEventOut(eventOutName, value);
                                                        } else {
                                                          if (jj_2_22(2)) {
                                                            jj_consume_token(eventOut);
                                                            jj_consume_token(SFVec2f);
                                                            eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFVec2f value = new SFVec2f();
                         script.addEventOut(eventOutName, value);
                                                          } else {
                                                            if (jj_2_21(2)) {
                                                              jj_consume_token(eventOut);
                                                              jj_consume_token(SFVec3f);
                                                              eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         SFVec3f value = new SFVec3f();
                         script.addEventOut(eventOutName, value);
                                                            } else {
                                                              if (jj_2_20(3)) {
                                                                jj_consume_token(eventOut);
                                                                jj_consume_token(MFColor);
                                                                eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFColor value = new MFColor();
                         script.addEventOut(eventOutName, value);
                                                              } else {
                                                                if (jj_2_19(3)) {
                                                                  jj_consume_token(eventOut);
                                                                  jj_consume_token(MFFloat);
                                                                  eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFFloat value = new MFFloat();
                         script.addEventOut(eventOutName, value);
                                                                } else {
                                                                  if (jj_2_18(3)) {
                                                                    jj_consume_token(eventOut);
                                                                    jj_consume_token(MFInt32);
                                                                    eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFInt32 value = new MFInt32();
                         script.addEventOut(eventOutName, value);
                                                                  } else {
                                                                    if (jj_2_17(3)) {
                                                                      jj_consume_token(eventOut);
                                                                      jj_consume_token(MFRotation);
                                                                      eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFRotation value = new MFRotation();
                         script.addEventOut(eventOutName, value);
                                                                    } else {
                                                                      if (jj_2_16(3)) {
                                                                        jj_consume_token(eventOut);
                                                                        jj_consume_token(MFString);
                                                                        eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFString value = new MFString();
                         script.addEventOut(eventOutName, value);
                                                                      } else {
                                                                        if (jj_2_15(3)) {
                                                                          jj_consume_token(eventOut);
                                                                          jj_consume_token(MFTime);
                                                                          eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFTime value = new MFTime();
                         script.addEventOut(eventOutName, value);
                                                                        } else {
                                                                          if (jj_2_14(3)) {
                                                                            jj_consume_token(eventOut);
                                                                            jj_consume_token(MFVec2f);
                                                                            eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFVec2f value = new MFVec2f();
                         script.addEventOut(eventOutName, value);
                                                                          } else {
                                                                            if (jj_2_13(3)) {
                                                                              jj_consume_token(eventOut);
                                                                              jj_consume_token(MFVec3f);
                                                                              eventOutName = StringValue();
                         Script script = (Script)getCurrentNode();
                         MFVec3f value = new MFVec3f();
                         script.addEventOut(eventOutName, value);
                                                                            } else {
                                                                              if (jj_2_12(2)) {
                                                                                jj_consume_token(field);
                                                                                jj_consume_token(SFBool);
                                                                                fieldName = StringValue();
                                                                                bvalue = SFBoolToken();
                         Script script = (Script)getCurrentNode();
                         SFBool value = new SFBool(bvalue);
                         script.addField(fieldName, value);
                                                                              } else {
                                                                                if (jj_2_11(2)) {
                                                                                  jj_consume_token(field);
                                                                                  jj_consume_token(SFColor);
                                                                                  fieldName = StringValue();
                                                                                  SFColorToken(value3);
                         Script script = (Script)getCurrentNode();
                         SFColor value = new SFColor(value3);
                         script.addField(fieldName, value);
                                                                                } else {
                                                                                  if (jj_2_10(2)) {
                                                                                    jj_consume_token(field);
                                                                                    jj_consume_token(SFFloat);
                                                                                    fieldName = StringValue();
                                                                                    fvalue = SFFloatToken();
                         Script script = (Script)getCurrentNode();
                         SFFloat value = new SFFloat(fvalue);
                         script.addField(fieldName, value);
                                                                                  } else {
                                                                                    if (jj_2_9(2)) {
                                                                                      jj_consume_token(field);
                                                                                      jj_consume_token(SFInt32);
                                                                                      fieldName = StringValue();
                                                                                      ivalue = SFInt32Token();
                         Script script = (Script)getCurrentNode();
                         SFInt32 value = new SFInt32(ivalue);
                         script.addField(fieldName, value);
                                                                                    } else {
                                                                                      if (jj_2_8(2)) {
                                                                                        jj_consume_token(field);
                                                                                        jj_consume_token(SFRotation);
                                                                                        fieldName = StringValue();
                                                                                        SFRotationToken(value4);
                         Script script = (Script)getCurrentNode();
                         SFRotation value = new SFRotation(value4);
                         script.addField(fieldName, value);
                                                                                      } else {
                                                                                        if (jj_2_7(2)) {
                                                                                          jj_consume_token(field);
                                                                                          jj_consume_token(SFString);
                                                                                          fieldName = StringValue();
                                                                                          svalue = SFStringToken();
                         Script script = (Script)getCurrentNode();
                         SFString value = new SFString(svalue);
                         script.addField(fieldName, value);
                                                                                        } else {
                                                                                          if (jj_2_6(2)) {
                                                                                            jj_consume_token(field);
                                                                                            jj_consume_token(SFTime);
                                                                                            fieldName = StringValue();
                                                                                            dvalue = SFTimeToken();
                         Script script = (Script)getCurrentNode();
                         SFTime value = new SFTime(dvalue);
                         script.addField(fieldName, value);
                                                                                          } else {
                                                                                            if (jj_2_5(2)) {
                                                                                              jj_consume_token(field);
                                                                                              jj_consume_token(SFVec2f);
                                                                                              fieldName = StringValue();
                                                                                              SFVec2fToken(value2);
                         Script script = (Script)getCurrentNode();
                         SFVec2f value = new SFVec2f(value2);
                         script.addField(fieldName, value);
                                                                                            } else {
                                                                                              if (jj_2_4(2)) {
                                                                                                jj_consume_token(field);
                                                                                                jj_consume_token(SFVec3f);
                                                                                                fieldName = StringValue();
                                                                                                SFVec3fToken(value3);
                         Script script = (Script)getCurrentNode();
                         SFVec3f value = new SFVec3f(value3);
                         script.addField(fieldName, value);
                                                                                              } else {
                                                                                                jj_consume_token(-1);
                                                                                                throw new ParseError();
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_301 = new boolean[227];
  static {
    jj_mask_301[mustEvaluate] = true;
  }
  static boolean[] jj_mask_302 = new boolean[227];
  static {
    jj_mask_302[directOutput] = true;
  }
  static boolean[] jj_mask_303 = new boolean[227];
  static {
    jj_mask_303[url] = true;
  }
  
  static final public void ScriptID() throws ParseError {
    jj_consume_token(Script);
                         Script script = new Script();
                         script.setName(getDefName());
                         PushNode(script, parserTypeScript);
  }

  static final public void Script() throws ParseError {
    ScriptID();
    jj_consume_token(23);
    label_62:
    while (true) {
      if (jj_mask_304[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[304] = jj_gen;
        break label_62;
      }
      ScriptElement();
    }
    jj_consume_token(24);
                         Script script = (Script)getCurrentNode();
                         PopNode();
                         addNode(script);
  }

  static boolean[] jj_mask_304 = new boolean[227];
  static {
    jj_mask_304[url] =
    jj_mask_304[directOutput] =
    jj_mask_304[mustEvaluate] =
    jj_mask_304[eventIn] =
    jj_mask_304[eventOut] =
    jj_mask_304[field] = true;
  }
  
  static final public void SoundElement() throws ParseError {
         boolean         bvalue;
         float   fvalue;
         float   vector[] = new float[3];
    if (jj_mask_314[getToken(1).kind]) {
      jj_consume_token(spatialize);
      bvalue = SFBoolToken();
                         ((Sound)getCurrentNode()).setSpatialize(bvalue);
    } else {
      jj_expLA1[314] = jj_gen;
      if (jj_mask_313[getToken(1).kind]) {
        jj_consume_token(intensity);
        fvalue = SFFloatToken();
                         ((Sound)getCurrentNode()).setIntensity(fvalue);
      } else {
        jj_expLA1[313] = jj_gen;
        if (jj_mask_312[getToken(1).kind]) {
          jj_consume_token(maxBack);
          fvalue = SFFloatToken();
                         ((Sound)getCurrentNode()).setMaxBack(fvalue);
        } else {
          jj_expLA1[312] = jj_gen;
          if (jj_mask_311[getToken(1).kind]) {
            jj_consume_token(minBack);
            fvalue = SFFloatToken();
                         ((Sound)getCurrentNode()).setMinBack(fvalue);
          } else {
            jj_expLA1[311] = jj_gen;
            if (jj_mask_310[getToken(1).kind]) {
              jj_consume_token(maxFront);
              fvalue = SFFloatToken();
                         ((Sound)getCurrentNode()).setMaxFront(fvalue);
            } else {
              jj_expLA1[310] = jj_gen;
              if (jj_mask_309[getToken(1).kind]) {
                jj_consume_token(minFront);
                fvalue = SFFloatToken();
                         ((Sound)getCurrentNode()).setMinFront(fvalue);
              } else {
                jj_expLA1[309] = jj_gen;
                if (jj_mask_308[getToken(1).kind]) {
                  jj_consume_token(priority);
                  fvalue = SFFloatToken();
                         ((Sound)getCurrentNode()).setPriority(fvalue);
                } else {
                  jj_expLA1[308] = jj_gen;
                  if (jj_mask_307[getToken(1).kind]) {
                    jj_consume_token(direction);
                    SFVec3fToken(vector);
                         ((Sound)getCurrentNode()).setDirection(vector);
                  } else {
                    jj_expLA1[307] = jj_gen;
                    if (jj_mask_306[getToken(1).kind]) {
                      jj_consume_token(location);
                      SFVec3fToken(vector);
                         ((Sound)getCurrentNode()).setLocation(vector);
                    } else {
                      jj_expLA1[306] = jj_gen;
                      if (jj_mask_305[getToken(1).kind]) {
                        jj_consume_token(source);
                        AudioClip();
                      } else {
                        jj_expLA1[305] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseError();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_305 = new boolean[227];
  static {
    jj_mask_305[source] = true;
  }
  static boolean[] jj_mask_306 = new boolean[227];
  static {
    jj_mask_306[location] = true;
  }
  static boolean[] jj_mask_307 = new boolean[227];
  static {
    jj_mask_307[direction] = true;
  }
  static boolean[] jj_mask_308 = new boolean[227];
  static {
    jj_mask_308[priority] = true;
  }
  static boolean[] jj_mask_309 = new boolean[227];
  static {
    jj_mask_309[minFront] = true;
  }
  static boolean[] jj_mask_310 = new boolean[227];
  static {
    jj_mask_310[maxFront] = true;
  }
  static boolean[] jj_mask_311 = new boolean[227];
  static {
    jj_mask_311[minBack] = true;
  }
  static boolean[] jj_mask_312 = new boolean[227];
  static {
    jj_mask_312[maxBack] = true;
  }
  static boolean[] jj_mask_313 = new boolean[227];
  static {
    jj_mask_313[intensity] = true;
  }
  static boolean[] jj_mask_314 = new boolean[227];
  static {
    jj_mask_314[spatialize] = true;
  }
  
  static final public void SoundID() throws ParseError {
    jj_consume_token(Sound);
                         Sound sound = new Sound();
                         sound.setName(getDefName());
                         PushNode(sound, parserTypeSound);
  }

  static final public void Sound() throws ParseError {
    SoundID();
    jj_consume_token(23);
    label_63:
    while (true) {
      if (jj_mask_315[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[315] = jj_gen;
        break label_63;
      }
      SoundElement();
    }
    jj_consume_token(24);
                         Sound sound = (Sound)getCurrentNode();
                         PopNode();
                         addNode(sound);
  }

  static boolean[] jj_mask_315 = new boolean[227];
  static {
    jj_mask_315[intensity] =
    jj_mask_315[direction] =
    jj_mask_315[location] =
    jj_mask_315[spatialize] =
    jj_mask_315[maxBack] =
    jj_mask_315[minBack] =
    jj_mask_315[maxFront] =
    jj_mask_315[minFront] =
    jj_mask_315[priority] =
    jj_mask_315[source] = true;
  }
  
  static final public void SphereElement() throws ParseError {
         float   value;
    jj_consume_token(radius);
    value = SFFloatToken();
                         ((Sphere)getCurrentNode()).setRadius(value);
  }

  static final public void SphereID() throws ParseError {
    jj_consume_token(Sphere);
                         Sphere sphere = new Sphere();
                         sphere.setName(getDefName());
                         PushNode(sphere, parserTypeSphere);
  }

  static final public void Sphere() throws ParseError {
    SphereID();
    jj_consume_token(23);
    label_64:
    while (true) {
      if (jj_mask_316[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[316] = jj_gen;
        break label_64;
      }
      SphereElement();
    }
    jj_consume_token(24);
                         Sphere sphere = (Sphere)getCurrentNode();
                         PopNode();
                         addNode(sphere);
  }

  static boolean[] jj_mask_316 = new boolean[227];
  static {
    jj_mask_316[radius] = true;
  }
  
  static final public void SphereSensorElement() throws ParseError {
         boolean         bvalue;
         float   rotvalue[] = new float[4];
    if (jj_mask_319[getToken(1).kind]) {
      jj_consume_token(offset);
      SFRotationToken(rotvalue);
                         ((SphereSensor)getCurrentNode()).setOffset(rotvalue);
    } else {
      jj_expLA1[319] = jj_gen;
      if (jj_mask_318[getToken(1).kind]) {
        jj_consume_token(enabled);
        bvalue = SFBoolToken();
                         ((SphereSensor)getCurrentNode()).setEnabled(bvalue);
      } else {
        jj_expLA1[318] = jj_gen;
        if (jj_mask_317[getToken(1).kind]) {
          jj_consume_token(autoOffset);
          bvalue = SFBoolToken();
                         ((SphereSensor)getCurrentNode()).setAutoOffset(bvalue);
        } else {
          jj_expLA1[317] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_317 = new boolean[227];
  static {
    jj_mask_317[autoOffset] = true;
  }
  static boolean[] jj_mask_318 = new boolean[227];
  static {
    jj_mask_318[enabled] = true;
  }
  static boolean[] jj_mask_319 = new boolean[227];
  static {
    jj_mask_319[offset] = true;
  }
  
  static final public void SphereSensorID() throws ParseError {
    jj_consume_token(SphereSensor);
                         SphereSensor sensor = new SphereSensor();
                         sensor.setName(getDefName());
                         PushNode(sensor, parserTypeSphereSensor);
  }

  static final public void SphereSensor() throws ParseError {
    SphereSensorID();
    jj_consume_token(23);
    label_65:
    while (true) {
      if (jj_mask_320[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[320] = jj_gen;
        break label_65;
      }
      SphereSensorElement();
    }
    jj_consume_token(24);
                         SphereSensor sensor = (SphereSensor)getCurrentNode();
                         PopNode();
                         addNode(sensor);
  }

  static boolean[] jj_mask_320 = new boolean[227];
  static {
    jj_mask_320[enabled] =
    jj_mask_320[offset] =
    jj_mask_320[autoOffset] = true;
  }
  
  static final public void SpotLightElement() throws ParseError {
         float   value3f[] = new float[3];
         float   value;
         boolean ok;
    if (jj_mask_330[getToken(1).kind]) {
      jj_consume_token(on);
      ok = SFBoolToken();
                         SpotLight light = (SpotLight)getCurrentNode();
                         light.setOn(ok);
    } else {
      jj_expLA1[330] = jj_gen;
      if (jj_mask_329[getToken(1).kind]) {
        jj_consume_token(intensity);
        value = SFFloatToken();
                         SpotLight light = (SpotLight)getCurrentNode();
                         light.setIntensity(value);
      } else {
        jj_expLA1[329] = jj_gen;
        if (jj_mask_328[getToken(1).kind]) {
          jj_consume_token(ambientIntensity);
          value = SFFloatToken();
                         SpotLight light = (SpotLight)getCurrentNode();
                         light.setAmbientIntensity(value);
        } else {
          jj_expLA1[328] = jj_gen;
          if (jj_mask_327[getToken(1).kind]) {
            jj_consume_token(beamWidth);
            value = SFFloatToken();
                         SpotLight light = (SpotLight)getCurrentNode();
                         light.setBeamWidth(value);
          } else {
            jj_expLA1[327] = jj_gen;
            if (jj_mask_326[getToken(1).kind]) {
              jj_consume_token(cutOffAngle);
              value = SFFloatToken();
                         SpotLight light = (SpotLight)getCurrentNode();
                         light.setCutOffAngle(value);
            } else {
              jj_expLA1[326] = jj_gen;
              if (jj_mask_325[getToken(1).kind]) {
                jj_consume_token(color);
                SFColorToken(value3f);
                         SpotLight light = (SpotLight)getCurrentNode();
                         light.setColor(value3f);
              } else {
                jj_expLA1[325] = jj_gen;
                if (jj_mask_324[getToken(1).kind]) {
                  jj_consume_token(direction);
                  SFVec3fToken(value3f);
                         SpotLight light = (SpotLight)getCurrentNode();
                         light.setDirection(value3f);
                } else {
                  jj_expLA1[324] = jj_gen;
                  if (jj_mask_323[getToken(1).kind]) {
                    jj_consume_token(location);
                    SFVec3fToken(value3f);
                         SpotLight light = (SpotLight)getCurrentNode();
                         light.setLocation(value3f);
                  } else {
                    jj_expLA1[323] = jj_gen;
                    if (jj_mask_322[getToken(1).kind]) {
                      jj_consume_token(attenuation);
                      SFVec3fToken(value3f);
                         SpotLight light = (SpotLight)getCurrentNode();
                         light.setAttenuation(value3f);
                    } else {
                      jj_expLA1[322] = jj_gen;
                      if (jj_mask_321[getToken(1).kind]) {
                        jj_consume_token(radius);
                        value = SFFloatToken();
                         SpotLight light = (SpotLight)getCurrentNode();
                         light.setRadius(value);
                      } else {
                        jj_expLA1[321] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseError();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_321 = new boolean[227];
  static {
    jj_mask_321[radius] = true;
  }
  static boolean[] jj_mask_322 = new boolean[227];
  static {
    jj_mask_322[attenuation] = true;
  }
  static boolean[] jj_mask_323 = new boolean[227];
  static {
    jj_mask_323[location] = true;
  }
  static boolean[] jj_mask_324 = new boolean[227];
  static {
    jj_mask_324[direction] = true;
  }
  static boolean[] jj_mask_325 = new boolean[227];
  static {
    jj_mask_325[color] = true;
  }
  static boolean[] jj_mask_326 = new boolean[227];
  static {
    jj_mask_326[cutOffAngle] = true;
  }
  static boolean[] jj_mask_327 = new boolean[227];
  static {
    jj_mask_327[beamWidth] = true;
  }
  static boolean[] jj_mask_328 = new boolean[227];
  static {
    jj_mask_328[ambientIntensity] = true;
  }
  static boolean[] jj_mask_329 = new boolean[227];
  static {
    jj_mask_329[intensity] = true;
  }
  static boolean[] jj_mask_330 = new boolean[227];
  static {
    jj_mask_330[on] = true;
  }
  
  static final public void SpotLightID() throws ParseError {
    jj_consume_token(SpotLight);
                         SpotLight light = new SpotLight();
                         light.setName(getDefName());
                         PushNode(light, parserTypeSpotLight);
  }

  static final public void SpotLight() throws ParseError {
    SpotLightID();
    jj_consume_token(23);
    label_66:
    while (true) {
      if (jj_mask_331[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[331] = jj_gen;
        break label_66;
      }
      SpotLightElement();
    }
    jj_consume_token(24);
                         SpotLight light = (SpotLight)getCurrentNode();
                         PopNode();
                         addNode(light);
  }

  static boolean[] jj_mask_331 = new boolean[227];
  static {
    jj_mask_331[color] =
    jj_mask_331[radius] =
    jj_mask_331[on] =
    jj_mask_331[intensity] =
    jj_mask_331[ambientIntensity] =
    jj_mask_331[direction] =
    jj_mask_331[location] =
    jj_mask_331[attenuation] =
    jj_mask_331[beamWidth] =
    jj_mask_331[cutOffAngle] = true;
  }
  
  static final public void ShapeElement() throws ParseError {
    if (jj_mask_333[getToken(1).kind]) {
      jj_consume_token(geometry);
      GeometryNode();
    } else {
      jj_expLA1[333] = jj_gen;
      if (jj_mask_332[getToken(1).kind]) {
        jj_consume_token(appearance);
        Appearance();
      } else {
        jj_expLA1[332] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_332 = new boolean[227];
  static {
    jj_mask_332[appearance] = true;
  }
  static boolean[] jj_mask_333 = new boolean[227];
  static {
    jj_mask_333[geometry] = true;
  }
  
  static final public void ShapeID() throws ParseError {
    jj_consume_token(Shape);
                         Shape shape = new Shape();
                         shape.setName(getDefName());
                         PushNode(shape, parserTypeShape);
  }

  static final public void Shape() throws ParseError {
    ShapeID();
    jj_consume_token(23);
    label_67:
    while (true) {
      if (jj_mask_334[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[334] = jj_gen;
        break label_67;
      }
      ShapeElement();
    }
    jj_consume_token(24);
                         Shape shape = (Shape)getCurrentNode();
                         PopNode();
                         addNode(shape);
  }

  static boolean[] jj_mask_334 = new boolean[227];
  static {
    jj_mask_334[appearance] =
    jj_mask_334[geometry] = true;
  }
  
  static final public void Choice() throws ParseError {
    jj_consume_token(choice);
    label_68:
    while (true) {
      if (jj_mask_335[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[335] = jj_gen;
        break label_68;
      }
      jj_consume_token(9);
    }
    label_69:
    while (true) {
      if (jj_mask_336[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[336] = jj_gen;
        break label_69;
      }
      label_70:
      while (true) {
        if (jj_mask_337[getToken(1).kind]) {
          ;
        } else {
          jj_expLA1[337] = jj_gen;
          break label_70;
        }
        Def();
      }
      ChildrenElement();
    }
    label_71:
    while (true) {
      if (jj_mask_338[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[338] = jj_gen;
        break label_71;
      }
      jj_consume_token(11);
    }
  }

  static boolean[] jj_mask_335 = new boolean[227];
  static {
    jj_mask_335[9] = true;
  }
  static boolean[] jj_mask_336 = new boolean[227];
  static {
    jj_mask_336[DEF] =
    jj_mask_336[Anchor] =
    jj_mask_336[AudioClip] =
    jj_mask_336[Background] =
    jj_mask_336[Billboard] =
    jj_mask_336[Collision] =
    jj_mask_336[ColorInterpolator] =
    jj_mask_336[CoordinateInterpolator] =
    jj_mask_336[CylinderSensor] =
    jj_mask_336[DirectionalLight] =
    jj_mask_336[Fog] =
    jj_mask_336[Group] =
    jj_mask_336[Inline] =
    jj_mask_336[LOD] =
    jj_mask_336[NavigationInfo] =
    jj_mask_336[NormalInterpolator] =
    jj_mask_336[OrientationInterpolator] =
    jj_mask_336[PlaneSensor] =
    jj_mask_336[PointLight] =
    jj_mask_336[PositionInterpolator] =
    jj_mask_336[ProximitySensor] =
    jj_mask_336[ScalarInterpolator] =
    jj_mask_336[Script] =
    jj_mask_336[Sound] =
    jj_mask_336[SphereSensor] =
    jj_mask_336[SpotLight] =
    jj_mask_336[Shape] =
    jj_mask_336[Switch] =
    jj_mask_336[TimeSensor] =
    jj_mask_336[TouchSensor] =
    jj_mask_336[Transform] =
    jj_mask_336[Viewpoint] =
    jj_mask_336[VisibilitySensor] =
    jj_mask_336[WorldInfo] = true;
  }
  static boolean[] jj_mask_337 = new boolean[227];
  static {
    jj_mask_337[DEF] = true;
  }
  static boolean[] jj_mask_338 = new boolean[227];
  static {
    jj_mask_338[11] = true;
  }
  
  static final public void SwitchElement() throws ParseError {
         int     value;
    if (jj_mask_340[getToken(1).kind]) {
      jj_consume_token(whichChoice);
      value = SFInt32Token();
                         ((Switch)getCurrentNode()).setWhichChoice(value);
    } else {
      jj_expLA1[340] = jj_gen;
      if (jj_mask_339[getToken(1).kind]) {
        Choice();
      } else {
        jj_expLA1[339] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_339 = new boolean[227];
  static {
    jj_mask_339[choice] = true;
  }
  static boolean[] jj_mask_340 = new boolean[227];
  static {
    jj_mask_340[whichChoice] = true;
  }
  
  static final public void SwitchID() throws ParseError {
    jj_consume_token(Switch);
                         Switch snode = new Switch();
                         snode.setName(getDefName());
                         PushNode(snode, parserTypeSwitch);
  }

  static final public void Switch() throws ParseError {
    SwitchID();
    jj_consume_token(23);
    label_72:
    while (true) {
      if (jj_mask_341[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[341] = jj_gen;
        break label_72;
      }
      SwitchElement();
    }
    jj_consume_token(24);
                         Switch snode = (Switch)getCurrentNode();
                         PopNode();
                         addNode(snode);
  }

  static boolean[] jj_mask_341 = new boolean[227];
  static {
    jj_mask_341[whichChoice] =
    jj_mask_341[choice] = true;
  }
  
  static final public void TextStringID() throws ParseError {
    jj_consume_token(string);
                         PushNode(getCurrentNode(), parserTypeTextString);
  }

  static final public void TextLengthID() throws ParseError {
    jj_consume_token(length);
                         PushNode(getCurrentNode(), parserTypeTextLength);
  }

  static final public void TextElement() throws ParseError {
         float   fvalue;
    if (jj_mask_345[getToken(1).kind]) {
      TextStringID();
      MFStringToken();
                         PopNode();
    } else {
      jj_expLA1[345] = jj_gen;
      if (jj_mask_344[getToken(1).kind]) {
        TextLengthID();
        MFFloatToken();
                         PopNode();
      } else {
        jj_expLA1[344] = jj_gen;
        if (jj_mask_343[getToken(1).kind]) {
          jj_consume_token(maxExtent);
          fvalue = SFFloatToken();
                         ((Text)getCurrentNode()).setMaxExtent(fvalue);
        } else {
          jj_expLA1[343] = jj_gen;
          if (jj_mask_342[getToken(1).kind]) {
            jj_consume_token(fontStyle);
            FontStyle();
          } else {
            jj_expLA1[342] = jj_gen;
            jj_consume_token(-1);
            throw new ParseError();
          }
        }
      }
    }
  }

  static boolean[] jj_mask_342 = new boolean[227];
  static {
    jj_mask_342[fontStyle] = true;
  }
  static boolean[] jj_mask_343 = new boolean[227];
  static {
    jj_mask_343[maxExtent] = true;
  }
  static boolean[] jj_mask_344 = new boolean[227];
  static {
    jj_mask_344[length] = true;
  }
  static boolean[] jj_mask_345 = new boolean[227];
  static {
    jj_mask_345[string] = true;
  }
  
  static final public void TextID() throws ParseError {
    jj_consume_token(Text);
                         Text anchor = new Text();
                         anchor.setName(getDefName());
                         PushNode(anchor, parserTypeText);
  }

  static final public void Text() throws ParseError {
    TextID();
    jj_consume_token(23);
    label_73:
    while (true) {
      if (jj_mask_346[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[346] = jj_gen;
        break label_73;
      }
      TextElement();
    }
    jj_consume_token(24);
                         Text anchor = (Text)getCurrentNode();
                         PopNode();
                         addNode(anchor);
  }

  static boolean[] jj_mask_346 = new boolean[227];
  static {
    jj_mask_346[string] =
    jj_mask_346[length] =
    jj_mask_346[maxExtent] =
    jj_mask_346[fontStyle] = true;
  }
  
  static final public void TextureCoordinateID() throws ParseError {
    jj_consume_token(TextureCoordinate);
                         TextureCoordinate texCoord = new TextureCoordinate();
                         texCoord.setName(getDefName());
                         PushNode(texCoord, parserTypeTextureCoordinate);
  }

  static final public void TextureCoordinate() throws ParseError {
    TextureCoordinateID();
    jj_consume_token(23);
    jj_consume_token(point);
    MFVec2fToken();
    jj_consume_token(24);
                         TextureCoordinate texCoord = (TextureCoordinate)getCurrentNode();
                         PopNode();
                         addNode(texCoord);
  }

  static final public void TextureTransformElement() throws ParseError {
         float   vec[] = new float[2];
         float   fvalue;
    if (jj_mask_350[getToken(1).kind]) {
      jj_consume_token(translation);
      SFVec2fToken(vec);
                         TextureTransform textureTransform = (TextureTransform)getCurrentNode();
                         textureTransform.setTranslation(vec);
    } else {
      jj_expLA1[350] = jj_gen;
      if (jj_mask_349[getToken(1).kind]) {
        jj_consume_token(rotation);
        fvalue = SFFloatToken();
                         TextureTransform textureTransform = (TextureTransform)getCurrentNode();
                         textureTransform.setRotation(fvalue);
      } else {
        jj_expLA1[349] = jj_gen;
        if (jj_mask_348[getToken(1).kind]) {
          jj_consume_token(scale);
          SFVec2fToken(vec);
                         TextureTransform textureTransform = (TextureTransform)getCurrentNode();
                         textureTransform.setScale(vec);
        } else {
          jj_expLA1[348] = jj_gen;
          if (jj_mask_347[getToken(1).kind]) {
            jj_consume_token(center);
            SFVec2fToken(vec);
                         TextureTransform textureTransform = (TextureTransform)getCurrentNode();
                         textureTransform.setCenter(vec);
          } else {
            jj_expLA1[347] = jj_gen;
            jj_consume_token(-1);
            throw new ParseError();
          }
        }
      }
    }
  }

  static boolean[] jj_mask_347 = new boolean[227];
  static {
    jj_mask_347[center] = true;
  }
  static boolean[] jj_mask_348 = new boolean[227];
  static {
    jj_mask_348[scale] = true;
  }
  static boolean[] jj_mask_349 = new boolean[227];
  static {
    jj_mask_349[rotation] = true;
  }
  static boolean[] jj_mask_350 = new boolean[227];
  static {
    jj_mask_350[translation] = true;
  }
  
  static final public void TextureTransformID() throws ParseError {
    jj_consume_token(TextureTransform);
                         TextureTransform textureTransform = new TextureTransform();
                         textureTransform.setName(getDefName());
                         PushNode(textureTransform, parserTypeTextureTransform);
  }

  static final public void TextureTransform() throws ParseError {
    TextureTransformID();
    jj_consume_token(23);
    label_74:
    while (true) {
      if (jj_mask_351[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[351] = jj_gen;
        break label_74;
      }
      TextureTransformElement();
    }
    jj_consume_token(24);
                         TextureTransform textureTransform = (TextureTransform)getCurrentNode();
                         PopNode();
                         addNode(textureTransform);
  }

  static boolean[] jj_mask_351 = new boolean[227];
  static {
    jj_mask_351[center] =
    jj_mask_351[rotation] =
    jj_mask_351[scale] =
    jj_mask_351[translation] = true;
  }
  
  static final public void TimeSensorElement() throws ParseError {
         float   fvalue;
         boolean bvalue;
    if (jj_mask_356[getToken(1).kind]) {
      jj_consume_token(enabled);
      bvalue = SFBoolToken();
                         TimeSensor time = (TimeSensor)getCurrentNode();
                         time.setEnabled(bvalue);
    } else {
      jj_expLA1[356] = jj_gen;
      if (jj_mask_355[getToken(1).kind]) {
        jj_consume_token(loop);
        bvalue = SFBoolToken();
                         TimeSensor time = (TimeSensor)getCurrentNode();
                         time.setLoop(bvalue);
      } else {
        jj_expLA1[355] = jj_gen;
        if (jj_mask_354[getToken(1).kind]) {
          jj_consume_token(cycleInterval);
          fvalue = SFFloatToken();
                         TimeSensor time = (TimeSensor)getCurrentNode();
                         time.setCycleInterval(fvalue);
        } else {
          jj_expLA1[354] = jj_gen;
          if (jj_mask_353[getToken(1).kind]) {
            jj_consume_token(startTime);
            fvalue = SFFloatToken();
                         TimeSensor time = (TimeSensor)getCurrentNode();
                         time.setStartTime(fvalue);
          } else {
            jj_expLA1[353] = jj_gen;
            if (jj_mask_352[getToken(1).kind]) {
              jj_consume_token(stopTime);
              fvalue = SFFloatToken();
                         TimeSensor time = (TimeSensor)getCurrentNode();
                         time.setStopTime(fvalue);
            } else {
              jj_expLA1[352] = jj_gen;
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_352 = new boolean[227];
  static {
    jj_mask_352[stopTime] = true;
  }
  static boolean[] jj_mask_353 = new boolean[227];
  static {
    jj_mask_353[startTime] = true;
  }
  static boolean[] jj_mask_354 = new boolean[227];
  static {
    jj_mask_354[cycleInterval] = true;
  }
  static boolean[] jj_mask_355 = new boolean[227];
  static {
    jj_mask_355[loop] = true;
  }
  static boolean[] jj_mask_356 = new boolean[227];
  static {
    jj_mask_356[enabled] = true;
  }
  
  static final public void TimeSensorID() throws ParseError {
    jj_consume_token(TimeSensor);
                         TimeSensor time = new TimeSensor();
                         time.setName(getDefName());
                         PushNode(time, parserTypeTimeSensor);
  }

  static final public void TimeSensor() throws ParseError {
    TimeSensorID();
    jj_consume_token(23);
    label_75:
    while (true) {
      if (jj_mask_357[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[357] = jj_gen;
        break label_75;
      }
      TimeSensorElement();
    }
    jj_consume_token(24);
                         TimeSensor time = (TimeSensor)getCurrentNode();
                         PopNode();
                         addNode(time);
  }

  static boolean[] jj_mask_357 = new boolean[227];
  static {
    jj_mask_357[loop] =
    jj_mask_357[startTime] =
    jj_mask_357[stopTime] =
    jj_mask_357[enabled] =
    jj_mask_357[cycleInterval] = true;
  }
  
  static final public void TouchSensorElement() throws ParseError {
         boolean         bvalue;
    jj_consume_token(enabled);
    bvalue = SFBoolToken();
                         ((TouchSensor)getCurrentNode()).setEnabled(bvalue);
  }

  static final public void TouchSensorID() throws ParseError {
    jj_consume_token(TouchSensor);
                         TouchSensor sensor = new TouchSensor();
                         sensor.setName(getDefName());
                         PushNode(sensor, parserTypeTouchSensor);
  }

  static final public void TouchSensor() throws ParseError {
    TouchSensorID();
    jj_consume_token(23);
    label_76:
    while (true) {
      if (jj_mask_358[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[358] = jj_gen;
        break label_76;
      }
      TouchSensorElement();
    }
    jj_consume_token(24);
                         TouchSensor sensor = (TouchSensor)getCurrentNode();
                         PopNode();
                         addNode(sensor);
  }

  static boolean[] jj_mask_358 = new boolean[227];
  static {
    jj_mask_358[enabled] = true;
  }
  
  static final public void TransformElement() throws ParseError {
         float   vec[] = new float[3];
         float   rot[] = new float[4];
    if (jj_mask_366[getToken(1).kind]) {
      jj_consume_token(translation);
      SFVec3fToken(vec);
                         Transform transform = (Transform)getCurrentNode();
                         transform.setTranslation(vec);
    } else {
      jj_expLA1[366] = jj_gen;
      if (jj_mask_365[getToken(1).kind]) {
        jj_consume_token(rotation);
        SFRotationToken(rot);
                         Transform transform = (Transform)getCurrentNode();
                         transform.setRotation(rot);
      } else {
        jj_expLA1[365] = jj_gen;
        if (jj_mask_364[getToken(1).kind]) {
          jj_consume_token(scale);
          SFVec3fToken(vec);
                         Transform transform = (Transform)getCurrentNode();
                         transform.setScale(vec);
        } else {
          jj_expLA1[364] = jj_gen;
          if (jj_mask_363[getToken(1).kind]) {
            jj_consume_token(scaleOrientation);
            SFRotationToken(rot);
                         Transform transform = (Transform)getCurrentNode();
                         transform.setScaleOrientation(rot);
          } else {
            jj_expLA1[363] = jj_gen;
            if (jj_mask_362[getToken(1).kind]) {
              jj_consume_token(center);
              SFVec3fToken(vec);
                         Transform transform = (Transform)getCurrentNode();
                         transform.setCenter(vec);
            } else {
              jj_expLA1[362] = jj_gen;
              if (jj_mask_361[getToken(1).kind]) {
                jj_consume_token(bboxCenter);
                SFVec3fToken(vec);
                         Transform transform = (Transform)getCurrentNode();
                         transform.setBBoxCenter(vec);
              } else {
                jj_expLA1[361] = jj_gen;
                if (jj_mask_360[getToken(1).kind]) {
                  jj_consume_token(bboxSize);
                  SFVec3fToken(vec);
                         Transform transform = (Transform)getCurrentNode();
                         transform.setBBoxSize(vec);
                } else {
                  jj_expLA1[360] = jj_gen;
                  if (jj_mask_359[getToken(1).kind]) {
                    Children();
                  } else {
                    jj_expLA1[359] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseError();
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_359 = new boolean[227];
  static {
    jj_mask_359[children] = true;
  }
  static boolean[] jj_mask_360 = new boolean[227];
  static {
    jj_mask_360[bboxSize] = true;
  }
  static boolean[] jj_mask_361 = new boolean[227];
  static {
    jj_mask_361[bboxCenter] = true;
  }
  static boolean[] jj_mask_362 = new boolean[227];
  static {
    jj_mask_362[center] = true;
  }
  static boolean[] jj_mask_363 = new boolean[227];
  static {
    jj_mask_363[scaleOrientation] = true;
  }
  static boolean[] jj_mask_364 = new boolean[227];
  static {
    jj_mask_364[scale] = true;
  }
  static boolean[] jj_mask_365 = new boolean[227];
  static {
    jj_mask_365[rotation] = true;
  }
  static boolean[] jj_mask_366 = new boolean[227];
  static {
    jj_mask_366[translation] = true;
  }
  
  static final public void TransformID() throws ParseError {
         String name = null;
    jj_consume_token(Transform);
                         Transform transform = new Transform();
                         transform.setName(getDefName());
                         PushNode(transform, parserTypeTransform);
  }

  static final public void Transform() throws ParseError {
    TransformID();
    jj_consume_token(23);
    label_77:
    while (true) {
      if (jj_mask_367[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[367] = jj_gen;
        break label_77;
      }
      TransformElement();
    }
    jj_consume_token(24);
                         Transform transform = (Transform)getCurrentNode();
                         PopNode();
                         addNode(transform);
  }

  static boolean[] jj_mask_367 = new boolean[227];
  static {
    jj_mask_367[children] =
    jj_mask_367[bboxCenter] =
    jj_mask_367[bboxSize] =
    jj_mask_367[center] =
    jj_mask_367[rotation] =
    jj_mask_367[scale] =
    jj_mask_367[scaleOrientation] =
    jj_mask_367[translation] = true;
  }
  
  static final public void ViewpointElement() throws ParseError {
         float   vec[] = new float[3];
         float   rot[] = new float[4];
         float   fov;
         boolean ok;
         String          string;
    if (jj_mask_372[getToken(1).kind]) {
      jj_consume_token(position);
      SFVec3fToken(vec);
                         Viewpoint view = (Viewpoint)getCurrentNode();
                         view.setPosition(vec);
    } else {
      jj_expLA1[372] = jj_gen;
      if (jj_mask_371[getToken(1).kind]) {
        jj_consume_token(orientation);
        SFRotationToken(rot);
                         Viewpoint view = (Viewpoint)getCurrentNode();
                         view.setOrientation(rot);
      } else {
        jj_expLA1[371] = jj_gen;
        if (jj_mask_370[getToken(1).kind]) {
          jj_consume_token(fieldOfView);
          fov = SFFloatToken();
                         Viewpoint view = (Viewpoint)getCurrentNode();
                         view.setFieldOfView(fov);
        } else {
          jj_expLA1[370] = jj_gen;
          if (jj_mask_369[getToken(1).kind]) {
            jj_consume_token(jump);
            ok = SFBoolToken();
                         Viewpoint view = (Viewpoint)getCurrentNode();
                         view.setJump(ok);
          } else {
            jj_expLA1[369] = jj_gen;
            if (jj_mask_368[getToken(1).kind]) {
              jj_consume_token(description);
              string = SFStringToken();
                         Viewpoint view = (Viewpoint)getCurrentNode();
                         view.setDescription(string);
            } else {
              jj_expLA1[368] = jj_gen;
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
        }
      }
    }
  }

  static boolean[] jj_mask_368 = new boolean[227];
  static {
    jj_mask_368[description] = true;
  }
  static boolean[] jj_mask_369 = new boolean[227];
  static {
    jj_mask_369[jump] = true;
  }
  static boolean[] jj_mask_370 = new boolean[227];
  static {
    jj_mask_370[fieldOfView] = true;
  }
  static boolean[] jj_mask_371 = new boolean[227];
  static {
    jj_mask_371[orientation] = true;
  }
  static boolean[] jj_mask_372 = new boolean[227];
  static {
    jj_mask_372[position] = true;
  }
  
  static final public void ViewpointID() throws ParseError {
    jj_consume_token(Viewpoint);
                         Viewpoint view = new Viewpoint();
                         view.setName(getDefName());
                         PushNode(view, parserTypeViewpoint);
  }

  static final public void Viewpoint() throws ParseError {
    ViewpointID();
    jj_consume_token(23);
    label_78:
    while (true) {
      if (jj_mask_373[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[373] = jj_gen;
        break label_78;
      }
      ViewpointElement();
    }
    jj_consume_token(24);
                         Viewpoint view = (Viewpoint)getCurrentNode();
                         PopNode();
                         addNode(view);
  }

  static boolean[] jj_mask_373 = new boolean[227];
  static {
    jj_mask_373[description] =
    jj_mask_373[position] =
    jj_mask_373[orientation] =
    jj_mask_373[fieldOfView] =
    jj_mask_373[jump] = true;
  }
  
  static final public void VisibilitySensorElement() throws ParseError {
         boolean         bvalue;
         float   v3value[] = new float[3];
    if (jj_mask_376[getToken(1).kind]) {
      jj_consume_token(center);
      SFVec3fToken(v3value);
                         ((VisibilitySensor)getCurrentNode()).setCenter(v3value);
    } else {
      jj_expLA1[376] = jj_gen;
      if (jj_mask_375[getToken(1).kind]) {
        jj_consume_token(size);
        SFVec3fToken(v3value);
                         ((VisibilitySensor)getCurrentNode()).setSize(v3value);
      } else {
        jj_expLA1[375] = jj_gen;
        if (jj_mask_374[getToken(1).kind]) {
          jj_consume_token(enabled);
          bvalue = SFBoolToken();
                         ((VisibilitySensor)getCurrentNode()).setEnabled(bvalue);
        } else {
          jj_expLA1[374] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_374 = new boolean[227];
  static {
    jj_mask_374[enabled] = true;
  }
  static boolean[] jj_mask_375 = new boolean[227];
  static {
    jj_mask_375[size] = true;
  }
  static boolean[] jj_mask_376 = new boolean[227];
  static {
    jj_mask_376[center] = true;
  }
  
  static final public void VisibilitySensorID() throws ParseError {
    jj_consume_token(VisibilitySensor);
                         VisibilitySensor sensor = new VisibilitySensor();
                         sensor.setName(getDefName());
                         PushNode(sensor, parserTypeVisibilitySensor);
  }

  static final public void VisibilitySensor() throws ParseError {
    VisibilitySensorID();
    jj_consume_token(23);
    label_79:
    while (true) {
      if (jj_mask_377[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[377] = jj_gen;
        break label_79;
      }
      VisibilitySensorElement();
    }
    jj_consume_token(24);
                         VisibilitySensor sensor = (VisibilitySensor)getCurrentNode();
                         PopNode();
                         addNode(sensor);
  }

  static boolean[] jj_mask_377 = new boolean[227];
  static {
    jj_mask_377[size] =
    jj_mask_377[enabled] =
    jj_mask_377[center] = true;
  }
  
  static final public void WorldInfoInfoID() throws ParseError {
    jj_consume_token(info);
                         WorldInfo winfo = (WorldInfo)getCurrentNode();
                         PushNode(winfo, parserTypeWorldInfoInfo);
  }

  static final public void WorldInfoElement() throws ParseError {
         String          string;
    if (jj_mask_379[getToken(1).kind]) {
      jj_consume_token(title);
      string = SFStringToken();
                         WorldInfo winfo = (WorldInfo)getCurrentNode();
                         winfo.setTitle(string);
    } else {
      jj_expLA1[379] = jj_gen;
      if (jj_mask_378[getToken(1).kind]) {
        WorldInfoInfoID();
        MFStringToken();
                         PopNode();
      } else {
        jj_expLA1[378] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_378 = new boolean[227];
  static {
    jj_mask_378[info] = true;
  }
  static boolean[] jj_mask_379 = new boolean[227];
  static {
    jj_mask_379[title] = true;
  }
  
  static final public void WorldInfoID() throws ParseError {
    jj_consume_token(WorldInfo);
                         WorldInfo winfo = new WorldInfo();
                         winfo.setName(getDefName());
                         PushNode(winfo,parserTypeWorldInfo);
  }

  static final public void WorldInfo() throws ParseError {
    WorldInfoID();
    jj_consume_token(23);
    label_80:
    while (true) {
      if (jj_mask_380[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[380] = jj_gen;
        break label_80;
      }
      WorldInfoElement();
    }
    jj_consume_token(24);
                         WorldInfo winfo = (WorldInfo)getCurrentNode();
                         PopNode();
                         addNode(winfo);
  }

  static boolean[] jj_mask_380 = new boolean[227];
  static {
    jj_mask_380[title] =
    jj_mask_380[info] = true;
  }
  
  static final public void Input() throws ParseError {
    label_81:
    while (true) {
      if (jj_mask_381[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[381] = jj_gen;
        break label_81;
      }
      if (jj_mask_383[getToken(1).kind]) {
        Node();
      } else {
        jj_expLA1[383] = jj_gen;
        if (jj_mask_382[getToken(1).kind]) {
          Route();
        } else {
          jj_expLA1[382] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
    jj_consume_token(0);
  }

  static boolean[] jj_mask_381 = new boolean[227];
  static {
    jj_mask_381[DEF] =
    jj_mask_381[ROUTE] =
    jj_mask_381[Anchor] =
    jj_mask_381[AudioClip] =
    jj_mask_381[Background] =
    jj_mask_381[Billboard] =
    jj_mask_381[Collision] =
    jj_mask_381[ColorInterpolator] =
    jj_mask_381[CoordinateInterpolator] =
    jj_mask_381[CylinderSensor] =
    jj_mask_381[DirectionalLight] =
    jj_mask_381[Fog] =
    jj_mask_381[Group] =
    jj_mask_381[Inline] =
    jj_mask_381[LOD] =
    jj_mask_381[NavigationInfo] =
    jj_mask_381[NormalInterpolator] =
    jj_mask_381[OrientationInterpolator] =
    jj_mask_381[PlaneSensor] =
    jj_mask_381[PointLight] =
    jj_mask_381[PositionInterpolator] =
    jj_mask_381[ProximitySensor] =
    jj_mask_381[ScalarInterpolator] =
    jj_mask_381[Script] =
    jj_mask_381[Sound] =
    jj_mask_381[SphereSensor] =
    jj_mask_381[SpotLight] =
    jj_mask_381[Switch] =
    jj_mask_381[TimeSensor] =
    jj_mask_381[TouchSensor] =
    jj_mask_381[Transform] =
    jj_mask_381[Viewpoint] =
    jj_mask_381[VisibilitySensor] =
    jj_mask_381[WorldInfo] = true;
  }
  static boolean[] jj_mask_382 = new boolean[227];
  static {
    jj_mask_382[ROUTE] = true;
  }
  static boolean[] jj_mask_383 = new boolean[227];
  static {
    jj_mask_383[DEF] =
    jj_mask_383[Anchor] =
    jj_mask_383[AudioClip] =
    jj_mask_383[Background] =
    jj_mask_383[Billboard] =
    jj_mask_383[Collision] =
    jj_mask_383[ColorInterpolator] =
    jj_mask_383[CoordinateInterpolator] =
    jj_mask_383[CylinderSensor] =
    jj_mask_383[DirectionalLight] =
    jj_mask_383[Fog] =
    jj_mask_383[Group] =
    jj_mask_383[Inline] =
    jj_mask_383[LOD] =
    jj_mask_383[NavigationInfo] =
    jj_mask_383[NormalInterpolator] =
    jj_mask_383[OrientationInterpolator] =
    jj_mask_383[PlaneSensor] =
    jj_mask_383[PointLight] =
    jj_mask_383[PositionInterpolator] =
    jj_mask_383[ProximitySensor] =
    jj_mask_383[ScalarInterpolator] =
    jj_mask_383[Script] =
    jj_mask_383[Sound] =
    jj_mask_383[SphereSensor] =
    jj_mask_383[SpotLight] =
    jj_mask_383[Switch] =
    jj_mask_383[TimeSensor] =
    jj_mask_383[TouchSensor] =
    jj_mask_383[Transform] =
    jj_mask_383[Viewpoint] =
    jj_mask_383[VisibilitySensor] =
    jj_mask_383[WorldInfo] = true;
  }
  
  static final private boolean jj_2_1(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  static final private boolean jj_2_2(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  static final private boolean jj_2_3(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  static final private boolean jj_2_4(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  static final private boolean jj_2_5(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_5();
    jj_save(4, xla);
    return retval;
  }

  static final private boolean jj_2_6(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_6();
    jj_save(5, xla);
    return retval;
  }

  static final private boolean jj_2_7(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_7();
    jj_save(6, xla);
    return retval;
  }

  static final private boolean jj_2_8(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_8();
    jj_save(7, xla);
    return retval;
  }

  static final private boolean jj_2_9(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_9();
    jj_save(8, xla);
    return retval;
  }

  static final private boolean jj_2_10(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_10();
    jj_save(9, xla);
    return retval;
  }

  static final private boolean jj_2_11(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_11();
    jj_save(10, xla);
    return retval;
  }

  static final private boolean jj_2_12(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_12();
    jj_save(11, xla);
    return retval;
  }

  static final private boolean jj_2_13(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_13();
    jj_save(12, xla);
    return retval;
  }

  static final private boolean jj_2_14(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_14();
    jj_save(13, xla);
    return retval;
  }

  static final private boolean jj_2_15(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_15();
    jj_save(14, xla);
    return retval;
  }

  static final private boolean jj_2_16(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_16();
    jj_save(15, xla);
    return retval;
  }

  static final private boolean jj_2_17(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_17();
    jj_save(16, xla);
    return retval;
  }

  static final private boolean jj_2_18(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_18();
    jj_save(17, xla);
    return retval;
  }

  static final private boolean jj_2_19(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_19();
    jj_save(18, xla);
    return retval;
  }

  static final private boolean jj_2_20(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_20();
    jj_save(19, xla);
    return retval;
  }

  static final private boolean jj_2_21(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_21();
    jj_save(20, xla);
    return retval;
  }

  static final private boolean jj_2_22(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_22();
    jj_save(21, xla);
    return retval;
  }

  static final private boolean jj_2_23(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_23();
    jj_save(22, xla);
    return retval;
  }

  static final private boolean jj_2_24(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_24();
    jj_save(23, xla);
    return retval;
  }

  static final private boolean jj_2_25(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_25();
    jj_save(24, xla);
    return retval;
  }

  static final private boolean jj_2_26(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_26();
    jj_save(25, xla);
    return retval;
  }

  static final private boolean jj_2_27(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_27();
    jj_save(26, xla);
    return retval;
  }

  static final private boolean jj_2_28(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_28();
    jj_save(27, xla);
    return retval;
  }

  static final private boolean jj_2_29(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_29();
    jj_save(28, xla);
    return retval;
  }

  static final private boolean jj_2_30(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_30();
    jj_save(29, xla);
    return retval;
  }

  static final private boolean jj_2_31(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_31();
    jj_save(30, xla);
    return retval;
  }

  static final private boolean jj_2_32(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_32();
    jj_save(31, xla);
    return retval;
  }

  static final private boolean jj_2_33(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_33();
    jj_save(32, xla);
    return retval;
  }

  static final private boolean jj_2_34(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_34();
    jj_save(33, xla);
    return retval;
  }

  static final private boolean jj_2_35(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_35();
    jj_save(34, xla);
    return retval;
  }

  static final private boolean jj_2_36(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_36();
    jj_save(35, xla);
    return retval;
  }

  static final private boolean jj_2_37(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_37();
    jj_save(36, xla);
    return retval;
  }

  static final private boolean jj_2_38(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_38();
    jj_save(37, xla);
    return retval;
  }

  static final private boolean jj_2_39(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_39();
    jj_save(38, xla);
    return retval;
  }

  static final private boolean jj_2_40(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_40();
    jj_save(39, xla);
    return retval;
  }

  static final private boolean jj_2_41(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_41();
    jj_save(40, xla);
    return retval;
  }

  static final private boolean jj_2_42(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_42();
    jj_save(41, xla);
    return retval;
  }

  static final private boolean jj_2_43(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_43();
    jj_save(42, xla);
    return retval;
  }

  static final private boolean jj_2_44(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_44();
    jj_save(43, xla);
    return retval;
  }

  static final private boolean jj_2_45(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_45();
    jj_save(44, xla);
    return retval;
  }

  static final private boolean jj_2_46(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_46();
    jj_save(45, xla);
    return retval;
  }

  static final private boolean jj_3_1() throws ParseError {
    if (jj_scan_token(texture)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_82()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_2() throws ParseError {
    if (jj_scan_token(texture)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_3() throws ParseError {
    if (jj_scan_token(texture)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_4() throws ParseError {
    if (jj_scan_token(field)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFVec3f)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_86()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_5() throws ParseError {
    if (jj_scan_token(field)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFVec2f)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_87()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_6() throws ParseError {
    if (jj_scan_token(field)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFTime)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_88()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_7() throws ParseError {
    if (jj_scan_token(field)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFString)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_89()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_8() throws ParseError {
    if (jj_scan_token(field)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFRotation)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_90()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_9() throws ParseError {
    if (jj_scan_token(field)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFInt32)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_91()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_10() throws ParseError {
    if (jj_scan_token(field)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFFloat)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_11() throws ParseError {
    if (jj_scan_token(field)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFColor)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_93()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_12() throws ParseError {
    if (jj_scan_token(field)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFBool)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_13() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFVec3f)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_14() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFVec2f)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_15() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFTime)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_16() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFString)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_17() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFRotation)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_18() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFInt32)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_19() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFFloat)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_20() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFColor)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_21() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFVec3f)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_22() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFVec2f)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_23() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFTime)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_24() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFString)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_25() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFRotation)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_26() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFInt32)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_27() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFFloat)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_28() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFColor)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_29() throws ParseError {
    if (jj_scan_token(eventOut)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFBool)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_30() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFVec3f)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_31() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFVec2f)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_32() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFTime)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_33() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFString)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_34() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFRotation)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_35() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFInt32)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_36() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFFloat)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_37() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MFColor)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_38() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFVec3f)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_39() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFVec2f)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_40() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFTime)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_41() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFString)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_42() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFRotation)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_43() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFInt32)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_44() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFFloat)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_45() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFColor)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_46() throws ParseError {
    if (jj_scan_token(eventIn)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SFBool)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_82() throws ParseError {
    if (jj_3R_95()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(23)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    if (jj_scan_token(24)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_83() throws ParseError {
    if (jj_3R_97()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(23)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    if (jj_scan_token(24)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_84() throws ParseError {
    if (jj_3R_99()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(23)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    if (jj_scan_token(24)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_85() throws ParseError {
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_86() throws ParseError {
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_87() throws ParseError {
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_88() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_89() throws ParseError {
    if (jj_scan_token(STRING)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_90() throws ParseError {
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_91() throws ParseError {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_92() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_93() throws ParseError {
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_94() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_95() throws ParseError {
    if (jj_scan_token(PixelTexture)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_96() throws ParseError {
    if (jj_3R_107()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_97() throws ParseError {
    if (jj_scan_token(MovieTexture)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_98() throws ParseError {
    if (jj_3R_108()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_99() throws ParseError {
    if (jj_scan_token(ImageTexture)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_100() throws ParseError {
    if (jj_3R_109()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_101() throws ParseError {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_102() throws ParseError {
    if (jj_scan_token(FLOAT_NUMBER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_103() throws ParseError {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_104() throws ParseError {
    if (jj_scan_token(FLOAT_NUMBER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_105() throws ParseError {
    if (jj_scan_token(TRUE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_106() throws ParseError {
    if (jj_scan_token(FALSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_107() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_108() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_109() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_110() throws ParseError {
    if (jj_3R_123()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_111() throws ParseError {
    if (jj_scan_token(repeatS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_112() throws ParseError {
    if (jj_scan_token(repeatT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_113() throws ParseError {
    if (jj_3R_125()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_126()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_114() throws ParseError {
    if (jj_scan_token(repeatS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_115() throws ParseError {
    if (jj_scan_token(repeatT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_116() throws ParseError {
    if (jj_scan_token(loop)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_117() throws ParseError {
    if (jj_scan_token(startTime)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_88()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_118() throws ParseError {
    if (jj_scan_token(stopTime)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_88()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_119() throws ParseError {
    if (jj_scan_token(speed)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_120() throws ParseError {
    if (jj_3R_127()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_126()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_121() throws ParseError {
    if (jj_scan_token(repeatS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_122() throws ParseError {
    if (jj_scan_token(repeatT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_123() throws ParseError {
    if (jj_scan_token(image)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_124() throws ParseError {
    if (jj_scan_token(9)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    if (jj_scan_token(11)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_125() throws ParseError {
    if (jj_scan_token(url)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_126() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_127() throws ParseError {
    if (jj_scan_token(url)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_128() throws ParseError {
    if (jj_3R_91()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_129() throws ParseError {
    if (jj_scan_token(9)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    if (jj_scan_token(11)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_130() throws ParseError {
    if (jj_3R_89()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_131() throws ParseError {
    if (jj_3R_89()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_132()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_132() throws ParseError {
    if (jj_scan_token(10)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_89()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public ParserTokenManager token_source;
  static public Token token;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private Parser jj_me;
  static private int jj_gen;
  static private int[] jj_expLA1 = new int[384];
  static private JJParserCalls[] jj_2_rtns = new JJParserCalls[46];
  static private boolean jj_rescan = false;

  public Parser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    ASCII_CharStream input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new ParserTokenManager(input_stream);
    token = new Token();
    jj_me = this;
    jj_gen = 0;
    for (int i = 0; i < 384; i++) jj_expLA1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJParserCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    ASCII_CharStream input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source.ReInit(input_stream);
    token = new Token();
    jj_gen = 0;
    for (int i = 0; i < 384; i++) jj_expLA1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJParserCalls();
  }

  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_me = this;
    jj_gen = 0;
    for (int i = 0; i < 384; i++) jj_expLA1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJParserCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_gen = 0;
    for (int i = 0; i < 384; i++) jj_expLA1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJParserCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseError {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    jj_token_error_setup(token, kind);
    throw new ParseError();
  }

  static final private boolean jj_scan_token(int kind) throws ParseError {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 1; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  static final public Token getNextToken() throws ParseError {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) throws ParseError {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final String jj_add_escapes(String str) {
    String retval = "";
    char ch;
    for (int i = 0; i < str.length(); i++) {
      ch = str.charAt(i);
      if (ch == '\b') {
        retval += "\\b";
      } else if (ch == '\t') {
        retval += "\\t";
      } else if (ch == '\n') {
        retval += "\\n";
      } else if (ch == '\f') {
        retval += "\\f";
      } else if (ch == '\r') {
        retval += "\\r";
      } else if (ch == '\"') {
        retval += "\\\"";
      } else if (ch == '\'') {
        retval += "\\\'";
      } else if (ch == '\\') {
        retval += "\\\\";
      } else if (ch < 0x20 || ch > 0x7e) {
        String s = "0000" + Integer.toString(ch, 16);
        retval += "\\u" + s.substring(s.length() - 4, s.length());
      } else {
        retval += ch;
      }
    }
    return retval;
  }

  static protected int error_line;
  static protected int error_column;
  static protected String error_string;
  static protected String[] expected_tokens;

  protected void token_error() {
    System.out.println("");
    System.out.println("Parse error at line " + error_line + ", column " + error_column + ".  Encountered:");
    System.out.println("    \"" + jj_add_escapes(error_string) + "\"");
    System.out.println("");
    if (expected_tokens.length == 1) {
      System.out.println("Was expecting:");
    } else {
      System.out.println("Was expecting one of:");
    }
    for (int i = 0; i < expected_tokens.length; i++) {
      System.out.println("    " + expected_tokens[i]);
    }
    System.out.println("");
  }

  static private java.util.Vector jj_errortokens = new java.util.Vector();
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos, jj_maxsize;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      if (jj_endpos > jj_maxsize) jj_maxsize = jj_endpos;
      String buf = "";
      for (int i = 0; i < jj_endpos; i++) {
        buf += tokenImage[jj_lasttokens[i]] + " ";
      }
      if (jj_lasttokens[jj_endpos-1] != 0) buf += "...";
      boolean exists = false;
      for (java.util.Enumeration enum = jj_errortokens.elements(); enum.hasMoreElements();) {
        if (buf.equals((String)(enum.nextElement()))) {
          exists = true;
        }
      }
      if (!exists) jj_errortokens.addElement(buf);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static final private void jj_token_error_setup(Token current, int kind) throws ParseError {
    jj_errortokens.removeAllElements();
    boolean[] la1tokens = new boolean[227];
    boolean[] mask = null;
    for (int i = 0; i < 227; i++) {
      la1tokens[i] = false;
    }
    if (kind >= 0) la1tokens[kind] = true;
    for (int i = 0; i < 384; i++) {
      if (jj_expLA1[i] == jj_gen) {
        switch (i) {
          case 0: mask = jj_mask_0; break;
          case 1: mask = jj_mask_1; break;
          case 2: mask = jj_mask_2; break;
          case 3: mask = jj_mask_3; break;
          case 4: mask = jj_mask_4; break;
          case 5: mask = jj_mask_5; break;
          case 6: mask = jj_mask_6; break;
          case 7: mask = jj_mask_7; break;
          case 8: mask = jj_mask_8; break;
          case 9: mask = jj_mask_9; break;
          case 10: mask = jj_mask_10; break;
          case 11: mask = jj_mask_11; break;
          case 12: mask = jj_mask_12; break;
          case 13: mask = jj_mask_13; break;
          case 14: mask = jj_mask_14; break;
          case 15: mask = jj_mask_15; break;
          case 16: mask = jj_mask_16; break;
          case 17: mask = jj_mask_17; break;
          case 18: mask = jj_mask_18; break;
          case 19: mask = jj_mask_19; break;
          case 20: mask = jj_mask_20; break;
          case 21: mask = jj_mask_21; break;
          case 22: mask = jj_mask_22; break;
          case 23: mask = jj_mask_23; break;
          case 24: mask = jj_mask_24; break;
          case 25: mask = jj_mask_25; break;
          case 26: mask = jj_mask_26; break;
          case 27: mask = jj_mask_27; break;
          case 28: mask = jj_mask_28; break;
          case 29: mask = jj_mask_29; break;
          case 30: mask = jj_mask_30; break;
          case 31: mask = jj_mask_31; break;
          case 32: mask = jj_mask_32; break;
          case 33: mask = jj_mask_33; break;
          case 34: mask = jj_mask_34; break;
          case 35: mask = jj_mask_35; break;
          case 36: mask = jj_mask_36; break;
          case 37: mask = jj_mask_37; break;
          case 38: mask = jj_mask_38; break;
          case 39: mask = jj_mask_39; break;
          case 40: mask = jj_mask_40; break;
          case 41: mask = jj_mask_41; break;
          case 42: mask = jj_mask_42; break;
          case 43: mask = jj_mask_43; break;
          case 44: mask = jj_mask_44; break;
          case 45: mask = jj_mask_45; break;
          case 46: mask = jj_mask_46; break;
          case 47: mask = jj_mask_47; break;
          case 48: mask = jj_mask_48; break;
          case 49: mask = jj_mask_49; break;
          case 50: mask = jj_mask_50; break;
          case 51: mask = jj_mask_51; break;
          case 52: mask = jj_mask_52; break;
          case 53: mask = jj_mask_53; break;
          case 54: mask = jj_mask_54; break;
          case 55: mask = jj_mask_55; break;
          case 56: mask = jj_mask_56; break;
          case 57: mask = jj_mask_57; break;
          case 58: mask = jj_mask_58; break;
          case 59: mask = jj_mask_59; break;
          case 60: mask = jj_mask_60; break;
          case 61: mask = jj_mask_61; break;
          case 62: mask = jj_mask_62; break;
          case 63: mask = jj_mask_63; break;
          case 64: mask = jj_mask_64; break;
          case 65: mask = jj_mask_65; break;
          case 66: mask = jj_mask_66; break;
          case 67: mask = jj_mask_67; break;
          case 68: mask = jj_mask_68; break;
          case 69: mask = jj_mask_69; break;
          case 70: mask = jj_mask_70; break;
          case 71: mask = jj_mask_71; break;
          case 72: mask = jj_mask_72; break;
          case 73: mask = jj_mask_73; break;
          case 74: mask = jj_mask_74; break;
          case 75: mask = jj_mask_75; break;
          case 76: mask = jj_mask_76; break;
          case 77: mask = jj_mask_77; break;
          case 78: mask = jj_mask_78; break;
          case 79: mask = jj_mask_79; break;
          case 80: mask = jj_mask_80; break;
          case 81: mask = jj_mask_81; break;
          case 82: mask = jj_mask_82; break;
          case 83: mask = jj_mask_83; break;
          case 84: mask = jj_mask_84; break;
          case 85: mask = jj_mask_85; break;
          case 86: mask = jj_mask_86; break;
          case 87: mask = jj_mask_87; break;
          case 88: mask = jj_mask_88; break;
          case 89: mask = jj_mask_89; break;
          case 90: mask = jj_mask_90; break;
          case 91: mask = jj_mask_91; break;
          case 92: mask = jj_mask_92; break;
          case 93: mask = jj_mask_93; break;
          case 94: mask = jj_mask_94; break;
          case 95: mask = jj_mask_95; break;
          case 96: mask = jj_mask_96; break;
          case 97: mask = jj_mask_97; break;
          case 98: mask = jj_mask_98; break;
          case 99: mask = jj_mask_99; break;
          case 100: mask = jj_mask_100; break;
          case 101: mask = jj_mask_101; break;
          case 102: mask = jj_mask_102; break;
          case 103: mask = jj_mask_103; break;
          case 104: mask = jj_mask_104; break;
          case 105: mask = jj_mask_105; break;
          case 106: mask = jj_mask_106; break;
          case 107: mask = jj_mask_107; break;
          case 108: mask = jj_mask_108; break;
          case 109: mask = jj_mask_109; break;
          case 110: mask = jj_mask_110; break;
          case 111: mask = jj_mask_111; break;
          case 112: mask = jj_mask_112; break;
          case 113: mask = jj_mask_113; break;
          case 114: mask = jj_mask_114; break;
          case 115: mask = jj_mask_115; break;
          case 116: mask = jj_mask_116; break;
          case 117: mask = jj_mask_117; break;
          case 118: mask = jj_mask_118; break;
          case 119: mask = jj_mask_119; break;
          case 120: mask = jj_mask_120; break;
          case 121: mask = jj_mask_121; break;
          case 122: mask = jj_mask_122; break;
          case 123: mask = jj_mask_123; break;
          case 124: mask = jj_mask_124; break;
          case 125: mask = jj_mask_125; break;
          case 126: mask = jj_mask_126; break;
          case 127: mask = jj_mask_127; break;
          case 128: mask = jj_mask_128; break;
          case 129: mask = jj_mask_129; break;
          case 130: mask = jj_mask_130; break;
          case 131: mask = jj_mask_131; break;
          case 132: mask = jj_mask_132; break;
          case 133: mask = jj_mask_133; break;
          case 134: mask = jj_mask_134; break;
          case 135: mask = jj_mask_135; break;
          case 136: mask = jj_mask_136; break;
          case 137: mask = jj_mask_137; break;
          case 138: mask = jj_mask_138; break;
          case 139: mask = jj_mask_139; break;
          case 140: mask = jj_mask_140; break;
          case 141: mask = jj_mask_141; break;
          case 142: mask = jj_mask_142; break;
          case 143: mask = jj_mask_143; break;
          case 144: mask = jj_mask_144; break;
          case 145: mask = jj_mask_145; break;
          case 146: mask = jj_mask_146; break;
          case 147: mask = jj_mask_147; break;
          case 148: mask = jj_mask_148; break;
          case 149: mask = jj_mask_149; break;
          case 150: mask = jj_mask_150; break;
          case 151: mask = jj_mask_151; break;
          case 152: mask = jj_mask_152; break;
          case 153: mask = jj_mask_153; break;
          case 154: mask = jj_mask_154; break;
          case 155: mask = jj_mask_155; break;
          case 156: mask = jj_mask_156; break;
          case 157: mask = jj_mask_157; break;
          case 158: mask = jj_mask_158; break;
          case 159: mask = jj_mask_159; break;
          case 160: mask = jj_mask_160; break;
          case 161: mask = jj_mask_161; break;
          case 162: mask = jj_mask_162; break;
          case 163: mask = jj_mask_163; break;
          case 164: mask = jj_mask_164; break;
          case 165: mask = jj_mask_165; break;
          case 166: mask = jj_mask_166; break;
          case 167: mask = jj_mask_167; break;
          case 168: mask = jj_mask_168; break;
          case 169: mask = jj_mask_169; break;
          case 170: mask = jj_mask_170; break;
          case 171: mask = jj_mask_171; break;
          case 172: mask = jj_mask_172; break;
          case 173: mask = jj_mask_173; break;
          case 174: mask = jj_mask_174; break;
          case 175: mask = jj_mask_175; break;
          case 176: mask = jj_mask_176; break;
          case 177: mask = jj_mask_177; break;
          case 178: mask = jj_mask_178; break;
          case 179: mask = jj_mask_179; break;
          case 180: mask = jj_mask_180; break;
          case 181: mask = jj_mask_181; break;
          case 182: mask = jj_mask_182; break;
          case 183: mask = jj_mask_183; break;
          case 184: mask = jj_mask_184; break;
          case 185: mask = jj_mask_185; break;
          case 186: mask = jj_mask_186; break;
          case 187: mask = jj_mask_187; break;
          case 188: mask = jj_mask_188; break;
          case 189: mask = jj_mask_189; break;
          case 190: mask = jj_mask_190; break;
          case 191: mask = jj_mask_191; break;
          case 192: mask = jj_mask_192; break;
          case 193: mask = jj_mask_193; break;
          case 194: mask = jj_mask_194; break;
          case 195: mask = jj_mask_195; break;
          case 196: mask = jj_mask_196; break;
          case 197: mask = jj_mask_197; break;
          case 198: mask = jj_mask_198; break;
          case 199: mask = jj_mask_199; break;
          case 200: mask = jj_mask_200; break;
          case 201: mask = jj_mask_201; break;
          case 202: mask = jj_mask_202; break;
          case 203: mask = jj_mask_203; break;
          case 204: mask = jj_mask_204; break;
          case 205: mask = jj_mask_205; break;
          case 206: mask = jj_mask_206; break;
          case 207: mask = jj_mask_207; break;
          case 208: mask = jj_mask_208; break;
          case 209: mask = jj_mask_209; break;
          case 210: mask = jj_mask_210; break;
          case 211: mask = jj_mask_211; break;
          case 212: mask = jj_mask_212; break;
          case 213: mask = jj_mask_213; break;
          case 214: mask = jj_mask_214; break;
          case 215: mask = jj_mask_215; break;
          case 216: mask = jj_mask_216; break;
          case 217: mask = jj_mask_217; break;
          case 218: mask = jj_mask_218; break;
          case 219: mask = jj_mask_219; break;
          case 220: mask = jj_mask_220; break;
          case 221: mask = jj_mask_221; break;
          case 222: mask = jj_mask_222; break;
          case 223: mask = jj_mask_223; break;
          case 224: mask = jj_mask_224; break;
          case 225: mask = jj_mask_225; break;
          case 226: mask = jj_mask_226; break;
          case 227: mask = jj_mask_227; break;
          case 228: mask = jj_mask_228; break;
          case 229: mask = jj_mask_229; break;
          case 230: mask = jj_mask_230; break;
          case 231: mask = jj_mask_231; break;
          case 232: mask = jj_mask_232; break;
          case 233: mask = jj_mask_233; break;
          case 234: mask = jj_mask_234; break;
          case 235: mask = jj_mask_235; break;
          case 236: mask = jj_mask_236; break;
          case 237: mask = jj_mask_237; break;
          case 238: mask = jj_mask_238; break;
          case 239: mask = jj_mask_239; break;
          case 240: mask = jj_mask_240; break;
          case 241: mask = jj_mask_241; break;
          case 242: mask = jj_mask_242; break;
          case 243: mask = jj_mask_243; break;
          case 244: mask = jj_mask_244; break;
          case 245: mask = jj_mask_245; break;
          case 246: mask = jj_mask_246; break;
          case 247: mask = jj_mask_247; break;
          case 248: mask = jj_mask_248; break;
          case 249: mask = jj_mask_249; break;
          case 250: mask = jj_mask_250; break;
          case 251: mask = jj_mask_251; break;
          case 252: mask = jj_mask_252; break;
          case 253: mask = jj_mask_253; break;
          case 254: mask = jj_mask_254; break;
          case 255: mask = jj_mask_255; break;
          case 256: mask = jj_mask_256; break;
          case 257: mask = jj_mask_257; break;
          case 258: mask = jj_mask_258; break;
          case 259: mask = jj_mask_259; break;
          case 260: mask = jj_mask_260; break;
          case 261: mask = jj_mask_261; break;
          case 262: mask = jj_mask_262; break;
          case 263: mask = jj_mask_263; break;
          case 264: mask = jj_mask_264; break;
          case 265: mask = jj_mask_265; break;
          case 266: mask = jj_mask_266; break;
          case 267: mask = jj_mask_267; break;
          case 268: mask = jj_mask_268; break;
          case 269: mask = jj_mask_269; break;
          case 270: mask = jj_mask_270; break;
          case 271: mask = jj_mask_271; break;
          case 272: mask = jj_mask_272; break;
          case 273: mask = jj_mask_273; break;
          case 274: mask = jj_mask_274; break;
          case 275: mask = jj_mask_275; break;
          case 276: mask = jj_mask_276; break;
          case 277: mask = jj_mask_277; break;
          case 278: mask = jj_mask_278; break;
          case 279: mask = jj_mask_279; break;
          case 280: mask = jj_mask_280; break;
          case 281: mask = jj_mask_281; break;
          case 282: mask = jj_mask_282; break;
          case 283: mask = jj_mask_283; break;
          case 284: mask = jj_mask_284; break;
          case 285: mask = jj_mask_285; break;
          case 286: mask = jj_mask_286; break;
          case 287: mask = jj_mask_287; break;
          case 288: mask = jj_mask_288; break;
          case 289: mask = jj_mask_289; break;
          case 290: mask = jj_mask_290; break;
          case 291: mask = jj_mask_291; break;
          case 292: mask = jj_mask_292; break;
          case 293: mask = jj_mask_293; break;
          case 294: mask = jj_mask_294; break;
          case 295: mask = jj_mask_295; break;
          case 296: mask = jj_mask_296; break;
          case 297: mask = jj_mask_297; break;
          case 298: mask = jj_mask_298; break;
          case 299: mask = jj_mask_299; break;
          case 300: mask = jj_mask_300; break;
          case 301: mask = jj_mask_301; break;
          case 302: mask = jj_mask_302; break;
          case 303: mask = jj_mask_303; break;
          case 304: mask = jj_mask_304; break;
          case 305: mask = jj_mask_305; break;
          case 306: mask = jj_mask_306; break;
          case 307: mask = jj_mask_307; break;
          case 308: mask = jj_mask_308; break;
          case 309: mask = jj_mask_309; break;
          case 310: mask = jj_mask_310; break;
          case 311: mask = jj_mask_311; break;
          case 312: mask = jj_mask_312; break;
          case 313: mask = jj_mask_313; break;
          case 314: mask = jj_mask_314; break;
          case 315: mask = jj_mask_315; break;
          case 316: mask = jj_mask_316; break;
          case 317: mask = jj_mask_317; break;
          case 318: mask = jj_mask_318; break;
          case 319: mask = jj_mask_319; break;
          case 320: mask = jj_mask_320; break;
          case 321: mask = jj_mask_321; break;
          case 322: mask = jj_mask_322; break;
          case 323: mask = jj_mask_323; break;
          case 324: mask = jj_mask_324; break;
          case 325: mask = jj_mask_325; break;
          case 326: mask = jj_mask_326; break;
          case 327: mask = jj_mask_327; break;
          case 328: mask = jj_mask_328; break;
          case 329: mask = jj_mask_329; break;
          case 330: mask = jj_mask_330; break;
          case 331: mask = jj_mask_331; break;
          case 332: mask = jj_mask_332; break;
          case 333: mask = jj_mask_333; break;
          case 334: mask = jj_mask_334; break;
          case 335: mask = jj_mask_335; break;
          case 336: mask = jj_mask_336; break;
          case 337: mask = jj_mask_337; break;
          case 338: mask = jj_mask_338; break;
          case 339: mask = jj_mask_339; break;
          case 340: mask = jj_mask_340; break;
          case 341: mask = jj_mask_341; break;
          case 342: mask = jj_mask_342; break;
          case 343: mask = jj_mask_343; break;
          case 344: mask = jj_mask_344; break;
          case 345: mask = jj_mask_345; break;
          case 346: mask = jj_mask_346; break;
          case 347: mask = jj_mask_347; break;
          case 348: mask = jj_mask_348; break;
          case 349: mask = jj_mask_349; break;
          case 350: mask = jj_mask_350; break;
          case 351: mask = jj_mask_351; break;
          case 352: mask = jj_mask_352; break;
          case 353: mask = jj_mask_353; break;
          case 354: mask = jj_mask_354; break;
          case 355: mask = jj_mask_355; break;
          case 356: mask = jj_mask_356; break;
          case 357: mask = jj_mask_357; break;
          case 358: mask = jj_mask_358; break;
          case 359: mask = jj_mask_359; break;
          case 360: mask = jj_mask_360; break;
          case 361: mask = jj_mask_361; break;
          case 362: mask = jj_mask_362; break;
          case 363: mask = jj_mask_363; break;
          case 364: mask = jj_mask_364; break;
          case 365: mask = jj_mask_365; break;
          case 366: mask = jj_mask_366; break;
          case 367: mask = jj_mask_367; break;
          case 368: mask = jj_mask_368; break;
          case 369: mask = jj_mask_369; break;
          case 370: mask = jj_mask_370; break;
          case 371: mask = jj_mask_371; break;
          case 372: mask = jj_mask_372; break;
          case 373: mask = jj_mask_373; break;
          case 374: mask = jj_mask_374; break;
          case 375: mask = jj_mask_375; break;
          case 376: mask = jj_mask_376; break;
          case 377: mask = jj_mask_377; break;
          case 378: mask = jj_mask_378; break;
          case 379: mask = jj_mask_379; break;
          case 380: mask = jj_mask_380; break;
          case 381: mask = jj_mask_381; break;
          case 382: mask = jj_mask_382; break;
          case 383: mask = jj_mask_383; break;
        }
        for (int j = 0; j < 227; j++) {
          if (mask[j]) la1tokens[j] = true;
        }
      }
    }
    if (la1tokens[0]) {
      jj_errortokens.addElement(tokenImage[0] + " ");
    }
    for (int i = 1; i < 227; i++) {
      if (la1tokens[i]) {
        jj_errortokens.addElement(tokenImage[i] + " ...");
      }
    }
    jj_endpos = 0;
    jj_maxsize = 1;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    expected_tokens = new String[jj_errortokens.size()];
    for (int i = 0; i < jj_errortokens.size(); i++) {
      expected_tokens[i] = (String)(jj_errortokens.elementAt(i));
    }
    error_line = current.beginLine;
    error_column = current.beginColumn;
    error_string = "";
    Token tok = current;
    for (int i = 0; i < jj_maxsize; i++) {
      if (tok.kind == 0) {
        error_string += " " + tokenImage[0];
        break;
      }
      error_string += " " + tok.image;
      tok = tok.next;
    }
    error_string = error_string.substring(1);
    jj_me.token_error();
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() throws ParseError {
    jj_rescan = true;
    for (int i = 0; i < 46; i++) {
      JJParserCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJParserCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJParserCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

}

class JJParserCalls {
  int gen;
  Token first;
  int arg;
  JJParserCalls next;
}
